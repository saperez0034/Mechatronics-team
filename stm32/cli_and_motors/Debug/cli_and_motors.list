
cli_and_motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08008a80  08008a80  00009a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009118  08009118  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009118  08009118  0000a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009120  08009120  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009120  08009120  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009124  08009124  0000a124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009128  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d64  20000080  080091a8  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004de4  080091a8  0000bde4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c86c  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000471d  00000000  00000000  0002791c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0002c040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011fe  00000000  00000000  0002d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af43  00000000  00000000  0002e9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccfe  00000000  00000000  000498f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be8e  00000000  00000000  000665f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006890  00000000  00000000  001024c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00108d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a68 	.word	0x08008a68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008a68 	.word	0x08008a68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10b      	bne.n	80005aa <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000596:	f383 8811 	msr	BASEPRI, r3
 800059a:	f3bf 8f6f 	isb	sy
 800059e:	f3bf 8f4f 	dsb	sy
 80005a2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	e7fd      	b.n	80005a6 <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80005aa:	2008      	movs	r0, #8
 80005ac:	f006 ffb6 	bl	800751c <pvPortMalloc>
 80005b0:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10b      	bne.n	80005d0 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 80005b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005bc:	f383 8811 	msr	BASEPRI, r3
 80005c0:	f3bf 8f6f 	isb	sy
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	60bb      	str	r3, [r7, #8]
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d005      	beq.n	80005e2 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 80005d6:	6939      	ldr	r1, [r7, #16]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f8e7 	bl	80007ac <prvRegisterCommand>
            xReturn = pdPASS;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 80005e2:	697b      	ldr	r3, [r7, #20]
    }
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 80005fc:	4b3a      	ldr	r3, [pc, #232]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d141      	bne.n	8000688 <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000604:	4b38      	ldr	r3, [pc, #224]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000606:	4a39      	ldr	r2, [pc, #228]	@ (80006ec <FreeRTOS_CLIProcessCommand+0x100>)
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	e037      	b.n	800067c <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800060c:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 8000616:	69b8      	ldr	r0, [r7, #24]
 8000618:	f7ff fde2 	bl	80001e0 <strlen>
 800061c:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	69b9      	ldr	r1, [r7, #24]
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f007 fcdd 	bl	8007fe2 <strncmp>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d121      	bne.n	8000672 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b20      	cmp	r3, #32
 8000638:	d005      	beq.n	8000646 <FreeRTOS_CLIProcessCommand+0x5a>
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d115      	bne.n	8000672 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db18      	blt.n	8000686 <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f000 f911 	bl	800087c <prvGetNumberOfParameters>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000668:	429a      	cmp	r2, r3
 800066a:	d00c      	beq.n	8000686 <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 8000670:	e009      	b.n	8000686 <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1c3      	bne.n	800060c <FreeRTOS_CLIProcessCommand+0x20>
 8000684:	e000      	b.n	8000688 <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 8000686:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000688:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00b      	beq.n	80006a8 <FreeRTOS_CLIProcessCommand+0xbc>
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d108      	bne.n	80006a8 <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4915      	ldr	r1, [pc, #84]	@ (80006f0 <FreeRTOS_CLIProcessCommand+0x104>)
 800069a:	68b8      	ldr	r0, [r7, #8]
 800069c:	f007 fcb3 	bl	8008006 <strncpy>
        pxCommand = NULL;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e01a      	b.n	80006de <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00f      	beq.n	80006d0 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	4798      	blx	r3
 80006c0:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10a      	bne.n	80006de <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e006      	b.n	80006de <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4908      	ldr	r1, [pc, #32]	@ (80006f4 <FreeRTOS_CLIProcessCommand+0x108>)
 80006d4:	68b8      	ldr	r0, [r7, #8]
 80006d6:	f007 fc96 	bl	8008006 <strncpy>
        xReturn = pdFALSE;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80006de:	69fb      	ldr	r3, [r7, #28]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000009c 	.word	0x2000009c
 80006ec:	20000000 	.word	0x20000000
 80006f0:	08008ab8 	.word	0x08008ab8
 80006f4:	08008b10 	.word	0x08008b10

080006f8 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 80006f8:	b480      	push	{r7}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8000712:	e03b      	b.n	800078c <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <FreeRTOS_CLIGetParameter+0x3a>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b20      	cmp	r3, #32
 8000728:	d1f4      	bne.n	8000714 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800072a:	e002      	b.n	8000732 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <FreeRTOS_CLIGetParameter+0x4a>
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b20      	cmp	r3, #32
 8000740:	d0f4      	beq.n	800072c <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d025      	beq.n	8000796 <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	429a      	cmp	r2, r3
 8000756:	d119      	bne.n	800078c <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800075c:	e007      	b.n	800076e <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <FreeRTOS_CLIGetParameter+0x86>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b20      	cmp	r3, #32
 800077c:	d1ef      	bne.n	800075e <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d109      	bne.n	800079a <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
                }

                break;
 800078a:	e006      	b.n	800079a <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3c2      	bcc.n	800071a <FreeRTOS_CLIGetParameter+0x22>
 8000794:	e002      	b.n	800079c <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 8000796:	bf00      	nop
 8000798:	e000      	b.n	800079c <FreeRTOS_CLIGetParameter+0xa4>
                break;
 800079a:	bf00      	nop
        }
    }

    return pcReturn;
 800079c:	693b      	ldr	r3, [r7, #16]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	371c      	adds	r7, #28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10b      	bne.n	80007d4 <prvRegisterCommand+0x28>
	__asm volatile
 80007bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c0:	f383 8811 	msr	BASEPRI, r3
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	f3bf 8f4f 	dsb	sy
 80007cc:	60fb      	str	r3, [r7, #12]
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10b      	bne.n	80007f2 <prvRegisterCommand+0x46>
	__asm volatile
 80007da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007de:	f383 8811 	msr	BASEPRI, r3
 80007e2:	f3bf 8f6f 	isb	sy
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	60bb      	str	r3, [r7, #8]
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 80007f2:	f006 fd71 	bl	80072d8 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <prvRegisterCommand+0x70>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800080a:	4a04      	ldr	r2, [pc, #16]	@ (800081c <prvRegisterCommand+0x70>)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8000810:	f006 fd94 	bl	800733c <vPortExitCritical>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000008 	.word	0x20000008

08000820 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <prvHelpCommand+0x54>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <prvHelpCommand+0x54>)
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <prvHelpCommand+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <prvHelpCommand+0x54>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f007 fbdd 	bl	8008006 <strncpy>
    pxCommand = pxCommand->pxNext;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <prvHelpCommand+0x54>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <prvHelpCommand+0x54>)
 8000854:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <prvHelpCommand+0x54>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	e001      	b.n	8000868 <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8000868:	697b      	ldr	r3, [r7, #20]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000a0 	.word	0x200000a0
 8000878:	20000000 	.word	0x20000000

0800087c <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 800088c:	e014      	b.n	80008b8 <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b20      	cmp	r3, #32
 8000894:	d10b      	bne.n	80008ae <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d00a      	beq.n	80008b2 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 800089c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	3301      	adds	r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e001      	b.n	80008b2 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e6      	bne.n	800088e <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d105      	bne.n	80008d2 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <vServoControl>:
#include "main.h"
#include "cmsis_os.h"
#include "stdio.h"
#include "tim.h"

void vServoControl (void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
    uint32_t angle;
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80008ea:	210c      	movs	r1, #12
 80008ec:	480e      	ldr	r0, [pc, #56]	@ (8000928 <vServoControl+0x44>)
 80008ee:	f002 f9db 	bl	8002ca8 <HAL_TIM_PWM_Start>
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 80008f2:	463a      	mov	r2, r7
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	2100      	movs	r1, #0
 80008fa:	2000      	movs	r0, #0
 80008fc:	f005 fe02 	bl	8006504 <xTaskNotifyWait>
            0,  // Clear all bits on exit
            &angle, // Receives the notification value
            portMAX_DELAY); // Wait indefinitely
        uint32_t pulse = 1000 + ((angle * 1000)/180);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <vServoControl+0x48>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000918:	607b      	str	r3, [r7, #4]
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse);
 800091a:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <vServoControl+0x44>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	641a      	str	r2, [r3, #64]	@ 0x40
    {
 8000922:	bf00      	nop
 8000924:	e7e5      	b.n	80008f2 <vServoControl+0xe>
 8000926:	bf00      	nop
 8000928:	20000208 	.word	0x20000208
 800092c:	16c16c17 	.word	0x16c16c17

08000930 <vLinServoControl>:
    }
}

void vLinServoControl (void){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
    uint32_t pctg;
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000936:	2104      	movs	r1, #4
 8000938:	480d      	ldr	r0, [pc, #52]	@ (8000970 <vLinServoControl+0x40>)
 800093a:	f002 f9b5 	bl	8002ca8 <HAL_TIM_PWM_Start>
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 800093e:	463a      	mov	r2, r7
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	2100      	movs	r1, #0
 8000946:	2000      	movs	r0, #0
 8000948:	f005 fddc 	bl	8006504 <xTaskNotifyWait>
            0,  // Clear all bits on exit
            &pctg, // Receives the notification value
            portMAX_DELAY); // Wait indefinitely
        uint32_t pulse = 1000 + ((pctg * 1000)/100);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <vLinServoControl+0x44>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	095b      	lsrs	r3, r3, #5
 800095e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000962:	607b      	str	r3, [r7, #4]
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8000964:	4b02      	ldr	r3, [pc, #8]	@ (8000970 <vLinServoControl+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	639a      	str	r2, [r3, #56]	@ 0x38
    {
 800096c:	bf00      	nop
 800096e:	e7e6      	b.n	800093e <vLinServoControl+0xe>
 8000970:	20000208 	.word	0x20000208
 8000974:	51eb851f 	.word	0x51eb851f

08000978 <vLinActControl>:
    }
}

void vLinActControl (void){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
    uint32_t pctg;
    // uint32_t prev_pctg = 0;
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800097e:	2100      	movs	r1, #0
 8000980:	4815      	ldr	r0, [pc, #84]	@ (80009d8 <vLinActControl+0x60>)
 8000982:	f002 f991 	bl	8002ca8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <vLinActControl+0x60>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8000990:	1d3a      	adds	r2, r7, #4
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	2100      	movs	r1, #0
 8000998:	2000      	movs	r0, #0
 800099a:	f005 fdb3 	bl	8006504 <xTaskNotifyWait>
            0,  // Clear all bits on exit
            &pctg, // Receives the notification value
            portMAX_DELAY); // Wait indefinitely
        if (pctg){
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00a      	beq.n	80009ba <vLinActControl+0x42>
            HAL_GPIO_WritePin(hbridge_l1_GPIO_Port, hbridge_l1_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2120      	movs	r1, #32
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <vLinActControl+0x64>)
 80009aa:	f001 fbcd 	bl	8002148 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(hbridge_l2_GPIO_Port, hbridge_l2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	480a      	ldr	r0, [pc, #40]	@ (80009dc <vLinActControl+0x64>)
 80009b4:	f001 fbc8 	bl	8002148 <HAL_GPIO_WritePin>
 80009b8:	e7ea      	b.n	8000990 <vLinActControl+0x18>
        }
        else if (!pctg){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1e7      	bne.n	8000990 <vLinActControl+0x18>
            HAL_GPIO_WritePin(hbridge_l1_GPIO_Port, hbridge_l1_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2120      	movs	r1, #32
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <vLinActControl+0x64>)
 80009c6:	f001 fbbf 	bl	8002148 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(hbridge_l2_GPIO_Port, hbridge_l2_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	4803      	ldr	r0, [pc, #12]	@ (80009dc <vLinActControl+0x64>)
 80009d0:	f001 fbba 	bl	8002148 <HAL_GPIO_WritePin>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 80009d4:	e7dc      	b.n	8000990 <vLinActControl+0x18>
 80009d6:	bf00      	nop
 80009d8:	20000208 	.word	0x20000208
 80009dc:	40020000 	.word	0x40020000

080009e0 <_write>:
extern rotServoTaskHandle;
extern linServoTaskHandle;
extern linActTaskHandle;

int _write(int file, char *data, int len)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e00f      	b.n	8000a12 <_write+0x32>
    {
        // Send the character
        USART2->DR = (uint16_t)data[i];
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	4413      	add	r3, r2
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <_write+0x48>)
 80009fc:	605a      	str	r2, [r3, #4]
        // Wait for the transmit buffer to be empty
        while (!(USART2->SR & USART_SR_TXE));
 80009fe:	bf00      	nop
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <_write+0x48>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f9      	beq.n	8000a00 <_write+0x20>
    for (int i = 0; i < len; i++)
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	dbeb      	blt.n	80009f2 <_write+0x12>
    }
    return len;
 8000a1a:	687b      	ldr	r3, [r7, #4]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40004400 	.word	0x40004400

08000a2c <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f007 fac8 	bl	8007fd2 <memset>
    printf("\033[2J\033[1;1H");
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <cmd_clearScreen+0x28>)
 8000a44:	f007 fa70 	bl	8007f28 <iprintf>
    return pdFALSE;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08008b68 	.word	0x08008b68

08000a58 <cmd_toggle_led>:
//*****************************************************************************
BaseType_t cmd_toggle_led(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b089      	sub	sp, #36	@ 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
    (void)pcCommandString; // contains the command string
    (void)xWriteBufferLen; // contains the length of the write buffer
    
    /* Toggle the LED */
    if (flag)
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <cmd_toggle_led+0x60>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d005      	beq.n	8000a78 <cmd_toggle_led+0x20>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4812      	ldr	r0, [pc, #72]	@ (8000abc <cmd_toggle_led+0x64>)
 8000a72:	f001 fb69 	bl	8002148 <HAL_GPIO_WritePin>
 8000a76:	e004      	b.n	8000a82 <cmd_toggle_led+0x2a>
    else
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	480f      	ldr	r0, [pc, #60]	@ (8000abc <cmd_toggle_led+0x64>)
 8000a7e:	f001 fb63 	bl	8002148 <HAL_GPIO_WritePin>
    flag = !flag;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <cmd_toggle_led+0x60>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf0c      	ite	eq
 8000a8a:	2301      	moveq	r3, #1
 8000a8c:	2300      	movne	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <cmd_toggle_led+0x60>)
 8000a94:	701a      	strb	r2, [r3, #0]

    
    /* Write the response to the buffer */
    uint8_t string[] = "LED toggled\r\n";
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <cmd_toggle_led+0x68>)
 8000a98:	f107 0410 	add.w	r4, r7, #16
 8000a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000aa0:	8023      	strh	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f007 fb95 	bl	80081d8 <strcpy>
    
    return pdFALSE;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3724      	adds	r7, #36	@ 0x24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	2000019f 	.word	0x2000019f
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	08008b74 	.word	0x08008b74

08000ac4 <cmd_hello>:
//*****************************************************************************
BaseType_t cmd_hello(char *pcWriteBuffer, size_t xWriteBufferLen,
    const char *pcCommandString)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
    (void)pcCommandString; // contains the command string
    (void)xWriteBufferLen; // contains the length of the write buffer

    /* Write the response to the buffer */
    uint8_t string[] = "Hello World!\r\n";
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <cmd_hello+0x34>)
 8000ad2:	f107 0410 	add.w	r4, r7, #16
 8000ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad8:	c407      	stmia	r4!, {r0, r1, r2}
 8000ada:	8023      	strh	r3, [r4, #0]
 8000adc:	3402      	adds	r4, #2
 8000ade:	0c1b      	lsrs	r3, r3, #16
 8000ae0:	7023      	strb	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f007 fb75 	bl	80081d8 <strcpy>

    return pdFALSE;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3724      	adds	r7, #36	@ 0x24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	08008b84 	.word	0x08008b84

08000afc <cmd_add>:
//*****************************************************************************
BaseType_t cmd_add(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	@ 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
    char *pcParameter1, *pcParameter2;
    BaseType_t xParameter1StringLength, xParameter2StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2101      	movs	r1, #1
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fdf1 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000b16:	6378      	str	r0, [r7, #52]	@ 0x34
                          /* Return the first parameter. */
                          1,
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    pcParameter2 = FreeRTOS_CLIGetParameter
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2102      	movs	r1, #2
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fde9 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000b26:	6338      	str	r0, [r7, #48]	@ 0x30
                          2,
                          /* Store the parameter string length. */
                          &xParameter2StringLength
                        );
    // convert the string to a number
    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000b28:	220a      	movs	r2, #10
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000b2e:	f007 f82d 	bl	8007b8c <strtol>
 8000b32:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t xValue2 = strtol(pcParameter2, NULL, 10);
 8000b34:	220a      	movs	r2, #10
 8000b36:	2100      	movs	r1, #0
 8000b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000b3a:	f007 f827 	bl	8007b8c <strtol>
 8000b3e:	62b8      	str	r0, [r7, #40]	@ 0x28
    // add the two numbers
    int32_t xResultValue = xValue1 + xValue2;
 8000b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b44:	4413      	add	r3, r2
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    // convert the result to a string
    char cResultString[10];
    itoa(xResultValue, cResultString, 10);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	4619      	mov	r1, r3
 8000b50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b52:	f006 fee9 	bl	8007928 <itoa>
    // copy the result to the write buffer
    strcpy(pcWriteBuffer, cResultString);
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f007 fb3b 	bl	80081d8 <strcpy>
    
    return pdFALSE;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3738      	adds	r7, #56	@ 0x38
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <cmd_stepx>:
//*****************************************************************************
BaseType_t cmd_stepx(char *pcWriteBuffer, size_t xWriteBufferLen,
                                const char *pcCommandString)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
    char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2101      	movs	r1, #1
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fdb9 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000b86:	61f8      	str	r0, [r7, #28]
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    // convert the string to a number

    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000b88:	220a      	movs	r2, #10
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	69f8      	ldr	r0, [r7, #28]
 8000b8e:	f006 fffd 	bl	8007b8c <strtol>
 8000b92:	61b8      	str	r0, [r7, #24]
    xTaskNotify(stepperXTaskHandle, xValue1, eSetValueWithOverwrite);
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <cmd_stepx+0x44>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	69b9      	ldr	r1, [r7, #24]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	f005 fd10 	bl	80065c4 <xTaskGenericNotify>
    return pdFALSE;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200001a4 	.word	0x200001a4

08000bb4 <cmd_stepy>:
//*****************************************************************************
BaseType_t cmd_stepy(char *pcWriteBuffer, size_t xWriteBufferLen,
                                const char *pcCommandString)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
    char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fd95 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000bce:	61f8      	str	r0, [r7, #28]
                         /* Store the parameter string length. */
                         &xParameter1StringLength
                        );
    // convert the string to a number

    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	69f8      	ldr	r0, [r7, #28]
 8000bd6:	f006 ffd9 	bl	8007b8c <strtol>
 8000bda:	61b8      	str	r0, [r7, #24]
    xTaskNotify(stepperYTaskHandle, xValue1, eSetValueWithOverwrite);
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <cmd_stepy+0x44>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	69b9      	ldr	r1, [r7, #24]
 8000be4:	2300      	movs	r3, #0
 8000be6:	2203      	movs	r2, #3
 8000be8:	f005 fcec 	bl	80065c4 <xTaskGenericNotify>
    return pdFALSE;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001a8 	.word	0x200001a8

08000bfc <cmd_servo_rot>:
//*****************************************************************************
BaseType_t cmd_servo_rot(char *pcWriteBuffer, size_t xWriteBufferLen,
    const char *pcCommandString)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
    char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2101      	movs	r1, #1
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fd71 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000c16:	61f8      	str	r0, [r7, #28]
                        /* Store the parameter string length. */
                        &xParameter1StringLength
                        );
    // convert the string to a number

    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000c18:	220a      	movs	r2, #10
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	69f8      	ldr	r0, [r7, #28]
 8000c1e:	f006 ffb5 	bl	8007b8c <strtol>
 8000c22:	61b8      	str	r0, [r7, #24]
    xTaskNotify(rotServoTaskHandle, xValue1, eSetValueWithOverwrite);
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <cmd_servo_rot+0x44>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	69b9      	ldr	r1, [r7, #24]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2203      	movs	r2, #3
 8000c30:	f005 fcc8 	bl	80065c4 <xTaskGenericNotify>
    return pdFALSE;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200001ac 	.word	0x200001ac

08000c44 <cmd_servo_lin>:
//*****************************************************************************
BaseType_t cmd_servo_lin(char *pcWriteBuffer, size_t xWriteBufferLen,
    const char *pcCommandString)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
    char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	461a      	mov	r2, r3
 8000c56:	2101      	movs	r1, #1
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fd4d 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000c5e:	61f8      	str	r0, [r7, #28]
                        /* Store the parameter string length. */
                        &xParameter1StringLength
                        );
    // convert the string to a number

    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000c60:	220a      	movs	r2, #10
 8000c62:	2100      	movs	r1, #0
 8000c64:	69f8      	ldr	r0, [r7, #28]
 8000c66:	f006 ff91 	bl	8007b8c <strtol>
 8000c6a:	61b8      	str	r0, [r7, #24]
    xTaskNotify(linServoTaskHandle, xValue1, eSetValueWithOverwrite);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <cmd_servo_lin+0x44>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	69b9      	ldr	r1, [r7, #24]
 8000c74:	2300      	movs	r3, #0
 8000c76:	2203      	movs	r2, #3
 8000c78:	f005 fca4 	bl	80065c4 <xTaskGenericNotify>
    return pdFALSE;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001b0 	.word	0x200001b0

08000c8c <cmd_lin_act>:
//*****************************************************************************
BaseType_t cmd_lin_act(char *pcWriteBuffer, size_t xWriteBufferLen,
    const char *pcCommandString)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
    char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fd29 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000ca6:	61f8      	str	r0, [r7, #28]
                        /* Store the parameter string length. */
                        &xParameter1StringLength
                        );
    // convert the string to a number

    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000ca8:	220a      	movs	r2, #10
 8000caa:	2100      	movs	r1, #0
 8000cac:	69f8      	ldr	r0, [r7, #28]
 8000cae:	f006 ff6d 	bl	8007b8c <strtol>
 8000cb2:	61b8      	str	r0, [r7, #24]
    xTaskNotify(linActTaskHandle, xValue1, eSetValueWithOverwrite);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <cmd_lin_act+0x44>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	69b9      	ldr	r1, [r7, #24]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	f005 fc80 	bl	80065c4 <xTaskGenericNotify>
    return pdFALSE;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001b4 	.word	0x200001b4

08000cd4 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
    //iterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	e009      	b.n	8000cf4 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <vRegisterCLICommands+0x38>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc49 	bl	8000580 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <vRegisterCLICommands+0x38>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4413      	add	r3, r2
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1ee      	bne.n	8000ce0 <vRegisterCLICommands+0xc>
    }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08008e08 	.word	0x08008e08

08000d10 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <cliWrite+0x24>)
 8000d1c:	f007 f904 	bl	8007f28 <iprintf>
   // flush stdout
   fflush(stdout);
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <cliWrite+0x28>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 f828 	bl	8007d7c <fflush>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08008d74 	.word	0x08008d74
 8000d38:	20000030 	.word	0x20000030

08000d3c <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 8000d48:	480f      	ldr	r0, [pc, #60]	@ (8000d88 <handleNewline+0x4c>)
 8000d4a:	f7ff ffe1 	bl	8000d10 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {     
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8000d4e:	22c8      	movs	r2, #200	@ 0xc8
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff fc4a 	bl	80005ec <FreeRTOS_CLIProcessCommand>
 8000d58:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 8000d5a:	68b8      	ldr	r0, [r7, #8]
 8000d5c:	f7ff ffd8 	bl	8000d10 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f3      	bne.n	8000d4e <handleNewline+0x12>

    cliWrite(cli_prompt);
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <handleNewline+0x50>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ffd0 	bl	8000d10 <cliWrite>
    *cInputIndex = 0;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 8000d76:	2232      	movs	r2, #50	@ 0x32
 8000d78:	2100      	movs	r1, #0
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f007 f929 	bl	8007fd2 <memset>
}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	08008d78 	.word	0x08008d78
 8000d8c:	2000000c 	.word	0x2000000c

08000d90 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d010      	beq.n	8000dc4 <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <handleBackspace+0x4c>)
 8000dbe:	f7ff ffa7 	bl	8000d10 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 8000dc2:	e006      	b.n	8000dd2 <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <handleBackspace+0x50>)
 8000dc6:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff9f 	bl	8000d10 <cliWrite>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	00435b1b 	.word	0x00435b1b

08000de4 <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <handleCharacterInput+0x64>)
 8000df0:	f993 3000 	ldrsb.w	r3, [r3]
 8000df4:	2b0d      	cmp	r3, #13
 8000df6:	d023      	beq.n	8000e40 <handleCharacterInput+0x5c>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <handleCharacterInput+0x64>)
 8000dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d004      	beq.n	8000e0c <handleCharacterInput+0x28>
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <handleCharacterInput+0x64>)
 8000e04:	f993 3000 	ldrsb.w	r3, [r3]
 8000e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0a:	d104      	bne.n	8000e16 <handleCharacterInput+0x32>
    {
        handleBackspace(cInputIndex, pcInputString);
 8000e0c:	6839      	ldr	r1, [r7, #0]
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffbe 	bl	8000d90 <handleBackspace>
 8000e14:	e015      	b.n	8000e42 <handleCharacterInput+0x5e>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b31      	cmp	r3, #49	@ 0x31
 8000e1c:	d811      	bhi.n	8000e42 <handleCharacterInput+0x5e>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <handleCharacterInput+0x64>)
 8000e20:	f993 2000 	ldrsb.w	r2, [r3]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e000      	b.n	8000e42 <handleCharacterInput+0x5e>
        return;
 8000e40:	bf00      	nop
        }
    }
}
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000019e 	.word	0x2000019e

08000e4c <vCommandConsoleTask>:
/*************************************************************************************************/
void vCommandConsoleTask(void *pvParameters)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
    uint32_t receivedValue; // used to store the received value from the notification
    UNUSED(pvParameters);
    vRegisterCLICommands();
 8000e58:	f7ff ff3c 	bl	8000cd4 <vRegisterCLICommands>
    
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8000e5c:	f107 0208 	add.w	r2, r7, #8
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	2100      	movs	r1, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f005 fb4c 	bl	8006504 <xTaskNotifyWait>
                                  0,  // Clear all bits on exit
                                  &receivedValue, // Receives the notification value
                                  portMAX_DELAY); // Wait indefinitely
        //echo recevied char
        cRxedChar = receivedValue & 0xFF;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	b25a      	sxtb	r2, r3
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <vCommandConsoleTask+0x5c>)
 8000e72:	701a      	strb	r2, [r3, #0]
        // cliWrite((char *)&cRxedChar);
        if (cRxedChar == '\r' || cRxedChar == '\n')
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <vCommandConsoleTask+0x5c>)
 8000e76:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7a:	2b0d      	cmp	r3, #13
 8000e7c:	d004      	beq.n	8000e88 <vCommandConsoleTask+0x3c>
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <vCommandConsoleTask+0x5c>)
 8000e80:	f993 3000 	ldrsb.w	r3, [r3]
 8000e84:	2b0a      	cmp	r3, #10
 8000e86:	d107      	bne.n	8000e98 <vCommandConsoleTask+0x4c>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 8000e88:	f107 030f 	add.w	r3, r7, #15
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4907      	ldr	r1, [pc, #28]	@ (8000eac <vCommandConsoleTask+0x60>)
 8000e90:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <vCommandConsoleTask+0x64>)
 8000e92:	f7ff ff53 	bl	8000d3c <handleNewline>
 8000e96:	e005      	b.n	8000ea4 <vCommandConsoleTask+0x58>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 8000e98:	f107 030f 	add.w	r3, r7, #15
 8000e9c:	4904      	ldr	r1, [pc, #16]	@ (8000eb0 <vCommandConsoleTask+0x64>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ffa0 	bl	8000de4 <handleCharacterInput>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8000ea4:	e7da      	b.n	8000e5c <vCommandConsoleTask+0x10>
 8000ea6:	bf00      	nop
 8000ea8:	2000019e 	.word	0x2000019e
 8000eac:	200000a4 	.word	0x200000a4
 8000eb0:	2000016c 	.word	0x2000016c

08000eb4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f2c <MX_FREERTOS_Init+0x78>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	481c      	ldr	r0, [pc, #112]	@ (8000f30 <MX_FREERTOS_Init+0x7c>)
 8000ebe:	f003 fdab 	bl	8004a18 <osThreadNew>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <MX_FREERTOS_Init+0x80>)
 8000ec6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  cmdLineTaskHandle = osThreadNew(vCommandConsoleTask, NULL, &cmdLineTask_attributes);
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f38 <MX_FREERTOS_Init+0x84>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	481b      	ldr	r0, [pc, #108]	@ (8000f3c <MX_FREERTOS_Init+0x88>)
 8000ece:	f003 fda3 	bl	8004a18 <osThreadNew>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <MX_FREERTOS_Init+0x8c>)
 8000ed6:	6013      	str	r3, [r2, #0]
  stepperXTaskHandle = osThreadNew(vStepperControlX, NULL, &stepperXTask_attributes);
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f44 <MX_FREERTOS_Init+0x90>)
 8000eda:	2100      	movs	r1, #0
 8000edc:	481a      	ldr	r0, [pc, #104]	@ (8000f48 <MX_FREERTOS_Init+0x94>)
 8000ede:	f003 fd9b 	bl	8004a18 <osThreadNew>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <MX_FREERTOS_Init+0x98>)
 8000ee6:	6013      	str	r3, [r2, #0]
  stepperYTaskHandle = osThreadNew(vStepperControlY, NULL, &stepperYTask_attributes);
 8000ee8:	4a19      	ldr	r2, [pc, #100]	@ (8000f50 <MX_FREERTOS_Init+0x9c>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4819      	ldr	r0, [pc, #100]	@ (8000f54 <MX_FREERTOS_Init+0xa0>)
 8000eee:	f003 fd93 	bl	8004a18 <osThreadNew>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a18      	ldr	r2, [pc, #96]	@ (8000f58 <MX_FREERTOS_Init+0xa4>)
 8000ef6:	6013      	str	r3, [r2, #0]
  rotServoTaskHandle = osThreadNew(vServoControl, NULL, &rotServoTask_attributes);
 8000ef8:	4a18      	ldr	r2, [pc, #96]	@ (8000f5c <MX_FREERTOS_Init+0xa8>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4818      	ldr	r0, [pc, #96]	@ (8000f60 <MX_FREERTOS_Init+0xac>)
 8000efe:	f003 fd8b 	bl	8004a18 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a17      	ldr	r2, [pc, #92]	@ (8000f64 <MX_FREERTOS_Init+0xb0>)
 8000f06:	6013      	str	r3, [r2, #0]
  linServoTaskHandle = osThreadNew(vLinServoControl, NULL, &linServoTask_attributes);
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <MX_FREERTOS_Init+0xb4>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4817      	ldr	r0, [pc, #92]	@ (8000f6c <MX_FREERTOS_Init+0xb8>)
 8000f0e:	f003 fd83 	bl	8004a18 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <MX_FREERTOS_Init+0xbc>)
 8000f16:	6013      	str	r3, [r2, #0]
  linActTaskHandle = osThreadNew(vLinActControl, NULL, &linActTask_attributes);
 8000f18:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <MX_FREERTOS_Init+0xc0>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4816      	ldr	r0, [pc, #88]	@ (8000f78 <MX_FREERTOS_Init+0xc4>)
 8000f1e:	f003 fd7b 	bl	8004a18 <osThreadNew>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <MX_FREERTOS_Init+0xc8>)
 8000f26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08008f80 	.word	0x08008f80
 8000f30:	08000f81 	.word	0x08000f81
 8000f34:	200001b8 	.word	0x200001b8
 8000f38:	08008ea8 	.word	0x08008ea8
 8000f3c:	08000e4d 	.word	0x08000e4d
 8000f40:	200001a0 	.word	0x200001a0
 8000f44:	08008ecc 	.word	0x08008ecc
 8000f48:	080011d1 	.word	0x080011d1
 8000f4c:	200001a4 	.word	0x200001a4
 8000f50:	08008ef0 	.word	0x08008ef0
 8000f54:	0800124d 	.word	0x0800124d
 8000f58:	200001a8 	.word	0x200001a8
 8000f5c:	08008f14 	.word	0x08008f14
 8000f60:	080008e5 	.word	0x080008e5
 8000f64:	200001ac 	.word	0x200001ac
 8000f68:	08008f38 	.word	0x08008f38
 8000f6c:	08000931 	.word	0x08000931
 8000f70:	200001b0 	.word	0x200001b0
 8000f74:	08008f5c 	.word	0x08008f5c
 8000f78:	08000979 	.word	0x08000979
 8000f7c:	200001b4 	.word	0x200001b4

08000f80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f003 fdd7 	bl	8004b3c <osDelay>
 8000f8e:	e7fb      	b.n	8000f88 <StartDefaultTask+0x8>

08000f90 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b34      	ldr	r3, [pc, #208]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a33      	ldr	r2, [pc, #204]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b31      	ldr	r3, [pc, #196]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a2c      	ldr	r2, [pc, #176]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b26      	ldr	r3, [pc, #152]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a25      	ldr	r2, [pc, #148]	@ (800107c <MX_GPIO_Init+0xec>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b23      	ldr	r3, [pc, #140]	@ (800107c <MX_GPIO_Init+0xec>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, hbridge_l1_Pin|hbridge_l2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	21a0      	movs	r1, #160	@ 0xa0
 8000ffe:	4820      	ldr	r0, [pc, #128]	@ (8001080 <MX_GPIO_Init+0xf0>)
 8001000:	f001 f8a2 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, stp2_dir_Pin|stp2_pul_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800100a:	481e      	ldr	r0, [pc, #120]	@ (8001084 <MX_GPIO_Init+0xf4>)
 800100c:	f001 f89c 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, stp1_pul_Pin|stp1_dir_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001016:	481c      	ldr	r0, [pc, #112]	@ (8001088 <MX_GPIO_Init+0xf8>)
 8001018:	f001 f896 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : hbridge_l1_Pin hbridge_l2_Pin */
  GPIO_InitStruct.Pin = hbridge_l1_Pin|hbridge_l2_Pin;
 800101c:	23a0      	movs	r3, #160	@ 0xa0
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	4813      	ldr	r0, [pc, #76]	@ (8001080 <MX_GPIO_Init+0xf0>)
 8001034:	f000 ff04 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : stp2_dir_Pin stp2_pul_Pin */
  GPIO_InitStruct.Pin = stp2_dir_Pin|stp2_pul_Pin;
 8001038:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800103c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <MX_GPIO_Init+0xf4>)
 8001052:	f000 fef5 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : stp1_pul_Pin stp1_dir_Pin */
  GPIO_InitStruct.Pin = stp1_pul_Pin|stp1_dir_Pin;
 8001056:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <MX_GPIO_Init+0xf8>)
 8001070:	f000 fee6 	bl	8001e40 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800
 8001088:	40020400 	.word	0x40020400

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f000 fd20 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f818 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f7ff ff7a 	bl	8000f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800109c:	f000 fba6 	bl	80017ec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80010a0:	f000 fa9c 	bl	80015dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010a4:	f003 fc6e 	bl	8004984 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010a8:	f7ff ff04 	bl	8000eb4 <MX_FREERTOS_Init>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)&huart2.Instance->DR, 1);
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <main+0x38>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <main+0x38>)
 80010b8:	f002 fcf2 	bl	8003aa0 <HAL_UART_Receive_IT>

  /* Start scheduler */
  osKernelStart();
 80010bc:	f003 fc86 	bl	80049cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <main+0x34>
 80010c4:	20000250 	.word	0x20000250

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	@ 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	@ 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f006 ff7b 	bl	8007fd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	4a28      	ldr	r2, [pc, #160]	@ (8001198 <SystemClock_Config+0xd0>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fc:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <SystemClock_Config+0xd0>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <SystemClock_Config+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001114:	4a21      	ldr	r2, [pc, #132]	@ (800119c <SystemClock_Config+0xd4>)
 8001116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2310      	movs	r3, #16
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001138:	2300      	movs	r3, #0
 800113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800113c:	2310      	movs	r3, #16
 800113e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001140:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001144:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001146:	2304      	movs	r3, #4
 8001148:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800114a:	2304      	movs	r3, #4
 800114c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	4618      	mov	r0, r3
 8001154:	f001 f812 	bl	800217c <HAL_RCC_OscConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800115e:	f000 f831 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	2302      	movs	r3, #2
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001172:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fa74 	bl	800266c <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800118a:	f000 f81b 	bl	80011c4 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	@ 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b2:	f000 fcb1 	bl	8001b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40000c00 	.word	0x40000c00

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <vStepperControlX>:
#include "main.h"
#include "cmsis_os.h"
#include "stdio.h"

void vStepperControlX (void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    int32_t steps;
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 80011d6:	463a      	mov	r2, r7
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f005 f990 	bl	8006504 <xTaskNotifyWait>
            0,  // Clear all bits on exit
            &steps, // Receives the notification value
            portMAX_DELAY); // Wait indefinitely
        if (steps < 0)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da09      	bge.n	80011fe <vStepperControlX+0x2e>
        {
            HAL_GPIO_WritePin(stp1_dir_GPIO_Port, stp1_dir_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f0:	4815      	ldr	r0, [pc, #84]	@ (8001248 <vStepperControlX+0x78>)
 80011f2:	f000 ffa9 	bl	8002148 <HAL_GPIO_WritePin>
            steps = steps * -1;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	425b      	negs	r3, r3
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	e005      	b.n	800120a <vStepperControlX+0x3a>
        }
        else
            HAL_GPIO_WritePin(stp1_dir_GPIO_Port, stp1_dir_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001204:	4810      	ldr	r0, [pc, #64]	@ (8001248 <vStepperControlX+0x78>)
 8001206:	f000 ff9f 	bl	8002148 <HAL_GPIO_WritePin>
        
        for (uint32_t pwm = 0; pwm < steps; pwm++){
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	e014      	b.n	800123a <vStepperControlX+0x6a>
            HAL_GPIO_WritePin(stp1_pul_GPIO_Port, stp1_pul_Pin, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001216:	480c      	ldr	r0, [pc, #48]	@ (8001248 <vStepperControlX+0x78>)
 8001218:	f000 ff96 	bl	8002148 <HAL_GPIO_WritePin>
            osDelay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f003 fc8d 	bl	8004b3c <osDelay>
            HAL_GPIO_WritePin(stp1_pul_GPIO_Port, stp1_pul_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <vStepperControlX+0x78>)
 800122a:	f000 ff8d 	bl	8002148 <HAL_GPIO_WritePin>
            osDelay(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f003 fc84 	bl	8004b3c <osDelay>
        for (uint32_t pwm = 0; pwm < steps; pwm++){
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3301      	adds	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4293      	cmp	r3, r2
 8001242:	d3e5      	bcc.n	8001210 <vStepperControlX+0x40>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8001244:	e7c7      	b.n	80011d6 <vStepperControlX+0x6>
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400

0800124c <vStepperControlY>:
        }
    }
}

void vStepperControlY (void){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
    int32_t steps;
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8001252:	463a      	mov	r2, r7
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	2100      	movs	r1, #0
 800125a:	2000      	movs	r0, #0
 800125c:	f005 f952 	bl	8006504 <xTaskNotifyWait>
            0,  // Clear all bits on exit
            &steps, // Receives the notification value
            portMAX_DELAY); // Wait indefinitely
        if (steps < 0)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	da08      	bge.n	8001278 <vStepperControlY+0x2c>
        {
            HAL_GPIO_WritePin(stp2_dir_GPIO_Port, stp2_dir_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2140      	movs	r1, #64	@ 0x40
 800126a:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <vStepperControlY+0x74>)
 800126c:	f000 ff6c 	bl	8002148 <HAL_GPIO_WritePin>
            steps = steps * -1;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	425b      	negs	r3, r3
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	e004      	b.n	8001282 <vStepperControlY+0x36>
        }
        else
            HAL_GPIO_WritePin(stp2_dir_GPIO_Port, stp2_dir_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2140      	movs	r1, #64	@ 0x40
 800127c:	4810      	ldr	r0, [pc, #64]	@ (80012c0 <vStepperControlY+0x74>)
 800127e:	f000 ff63 	bl	8002148 <HAL_GPIO_WritePin>
        
        for (uint32_t pwm = 0; pwm < steps; pwm++){
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	e014      	b.n	80012b2 <vStepperControlY+0x66>
            HAL_GPIO_WritePin(stp2_pul_GPIO_Port, stp2_pul_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800128e:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <vStepperControlY+0x74>)
 8001290:	f000 ff5a 	bl	8002148 <HAL_GPIO_WritePin>
            osDelay(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f003 fc51 	bl	8004b3c <osDelay>
            HAL_GPIO_WritePin(stp2_pul_GPIO_Port, stp2_pul_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a0:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <vStepperControlY+0x74>)
 80012a2:	f000 ff51 	bl	8002148 <HAL_GPIO_WritePin>
            osDelay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f003 fc48 	bl	8004b3c <osDelay>
        for (uint32_t pwm = 0; pwm < steps; pwm++){
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d3e5      	bcc.n	8001288 <vStepperControlY+0x3c>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 80012bc:	e7c9      	b.n	8001252 <vStepperControlY+0x6>
 80012be:	bf00      	nop
 80012c0:	40020800 	.word	0x40020800

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_MspInit+0x54>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <HAL_MspInit+0x54>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_MspInit+0x54>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_MspInit+0x54>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_MspInit+0x54>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <HAL_MspInit+0x54>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	210f      	movs	r1, #15
 8001306:	f06f 0001 	mvn.w	r0, #1
 800130a:	f000 fcdd 	bl	8001cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <HAL_InitTick+0xe4>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a32      	ldr	r2, [pc, #200]	@ (8001400 <HAL_InitTick+0xe4>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_InitTick+0xe4>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001348:	f107 0210 	add.w	r2, r7, #16
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fb6a 	bl	8002a2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800135c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135e:	2b00      	cmp	r3, #0
 8001360:	d103      	bne.n	800136a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001362:	f001 fb3b 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8001366:	6378      	str	r0, [r7, #52]	@ 0x34
 8001368:	e004      	b.n	8001374 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800136a:	f001 fb37 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 800136e:	4603      	mov	r3, r0
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <HAL_InitTick+0xe8>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	3b01      	subs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_InitTick+0xec>)
 8001384:	4a21      	ldr	r2, [pc, #132]	@ (800140c <HAL_InitTick+0xf0>)
 8001386:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_InitTick+0xec>)
 800138a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_InitTick+0xec>)
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_InitTick+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_InitTick+0xec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_InitTick+0xec>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80013a8:	4817      	ldr	r0, [pc, #92]	@ (8001408 <HAL_InitTick+0xec>)
 80013aa:	f001 fb71 	bl	8002a90 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11b      	bne.n	80013f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <HAL_InitTick+0xec>)
 80013be:	f001 fbb7 	bl	8002b30 <HAL_TIM_Base_Start_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013d0:	2032      	movs	r0, #50	@ 0x32
 80013d2:	f000 fc95 	bl	8001d00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d808      	bhi.n	80013ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2032      	movs	r0, #50	@ 0x32
 80013e2:	f000 fc71 	bl	8001cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_InitTick+0xf4>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e002      	b.n	80013f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3738      	adds	r7, #56	@ 0x38
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	431bde83 	.word	0x431bde83
 8001408:	200001bc 	.word	0x200001bc
 800140c:	40000c00 	.word	0x40000c00
 8001410:	20000018 	.word	0x20000018

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001452:	480d      	ldr	r0, [pc, #52]	@ (8001488 <USART2_IRQHandler+0x3c>)
 8001454:	f002 fb4a 	bl	8003aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char rxedValue = USART2->DR & 0xFF;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <USART2_IRQHandler+0x40>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&huart2.Instance->DR, 1);
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <USART2_IRQHandler+0x3c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3304      	adds	r3, #4
 8001464:	2201      	movs	r2, #1
 8001466:	4619      	mov	r1, r3
 8001468:	4807      	ldr	r0, [pc, #28]	@ (8001488 <USART2_IRQHandler+0x3c>)
 800146a:	f002 fb19 	bl	8003aa0 <HAL_UART_Receive_IT>
  //send the char to the command line task
  xTaskNotifyFromISR(cmdLineTaskHandle, (uint32_t)rxedValue, eSetValueWithOverwrite , NULL);
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <USART2_IRQHandler+0x44>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	79f9      	ldrb	r1, [r7, #7]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	2203      	movs	r2, #3
 800147c:	f005 f964 	bl	8006748 <xTaskGenericNotifyFromISR>
  /* USER CODE END USART2_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000250 	.word	0x20000250
 800148c:	40004400 	.word	0x40004400
 8001490:	200001a0 	.word	0x200001a0

08001494 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <TIM5_IRQHandler+0x10>)
 800149a:	f001 fcb5 	bl	8002e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200001bc 	.word	0x200001bc

080014a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800150a:	605a      	str	r2, [r3, #4]
  return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f006 fe02 	bl	8008184 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20018000 	.word	0x20018000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000204 	.word	0x20000204
 80015b4:	20004de8 	.word	0x20004de8

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	@ 0x38
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160c:	4b37      	ldr	r3, [pc, #220]	@ (80016ec <MX_TIM3_Init+0x110>)
 800160e:	4a38      	ldr	r2, [pc, #224]	@ (80016f0 <MX_TIM3_Init+0x114>)
 8001610:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <MX_TIM3_Init+0x110>)
 8001614:	2254      	movs	r2, #84	@ 0x54
 8001616:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <MX_TIM3_Init+0x110>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800161e:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <MX_TIM3_Init+0x110>)
 8001620:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001624:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <MX_TIM3_Init+0x110>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <MX_TIM3_Init+0x110>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001632:	482e      	ldr	r0, [pc, #184]	@ (80016ec <MX_TIM3_Init+0x110>)
 8001634:	f001 fa2c 	bl	8002a90 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800163e:	f7ff fdc1 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164c:	4619      	mov	r1, r3
 800164e:	4827      	ldr	r0, [pc, #156]	@ (80016ec <MX_TIM3_Init+0x110>)
 8001650:	f001 fd8c 	bl	800316c <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800165a:	f7ff fdb3 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800165e:	4823      	ldr	r0, [pc, #140]	@ (80016ec <MX_TIM3_Init+0x110>)
 8001660:	f001 fac8 	bl	8002bf4 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800166a:	f7ff fdab 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	4619      	mov	r1, r3
 800167c:	481b      	ldr	r0, [pc, #108]	@ (80016ec <MX_TIM3_Init+0x110>)
 800167e:	f002 f93d 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001688:	f7ff fd9c 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	@ 0x60
 800168e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	4812      	ldr	r0, [pc, #72]	@ (80016ec <MX_TIM3_Init+0x110>)
 80016a4:	f001 fca0 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016ae:	f7ff fd89 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2204      	movs	r2, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	480c      	ldr	r0, [pc, #48]	@ (80016ec <MX_TIM3_Init+0x110>)
 80016ba:	f001 fc95 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80016c4:	f7ff fd7e 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	220c      	movs	r2, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	@ (80016ec <MX_TIM3_Init+0x110>)
 80016d0:	f001 fc8a 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80016da:	f7ff fd73 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016de:	4803      	ldr	r0, [pc, #12]	@ (80016ec <MX_TIM3_Init+0x110>)
 80016e0:	f000 f82a 	bl	8001738 <HAL_TIM_MspPostInit>

}
 80016e4:	bf00      	nop
 80016e6:	3738      	adds	r7, #56	@ 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000208 	.word	0x20000208
 80016f0:	40000400 	.word	0x40000400

080016f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_TIM_Base_MspInit+0x3c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10d      	bne.n	8001722 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_TIM_Base_MspInit+0x40>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_TIM_Base_MspInit+0x40>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6413      	str	r3, [r2, #64]	@ 0x40
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <HAL_TIM_Base_MspInit+0x40>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40000400 	.word	0x40000400
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <HAL_TIM_MspPostInit+0xa4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d13c      	bne.n	80017d4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <HAL_TIM_MspPostInit+0xa8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <HAL_TIM_MspPostInit+0xa8>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <HAL_TIM_MspPostInit+0xa8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_TIM_MspPostInit+0xa8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a18      	ldr	r2, [pc, #96]	@ (80017e0 <HAL_TIM_MspPostInit+0xa8>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_TIM_MspPostInit+0xa8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = hbridge_en_Pin;
 8001792:	2340      	movs	r3, #64	@ 0x40
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017a2:	2302      	movs	r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(hbridge_en_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <HAL_TIM_MspPostInit+0xac>)
 80017ae:	f000 fb47 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = lin_servo_pwm_Pin|rot_servo_pwm_Pin;
 80017b2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c4:	2302      	movs	r3, #2
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <HAL_TIM_MspPostInit+0xb0>)
 80017d0:	f000 fb36 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	@ 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40000400 	.word	0x40000400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020800 	.word	0x40020800

080017ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <MX_USART2_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001824:	f002 f8ec 	bl	8003a00 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f7ff fcc9 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000250 	.word	0x20000250
 800183c:	40004400 	.word	0x40004400

08001840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <HAL_UART_MspInit+0x94>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d133      	bne.n	80018ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_UART_MspInit+0x98>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a1b      	ldr	r2, [pc, #108]	@ (80018d8 <HAL_UART_MspInit+0x98>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_UART_MspInit+0x98>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_UART_MspInit+0x98>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <HAL_UART_MspInit+0x98>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_UART_MspInit+0x98>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800189a:	230c      	movs	r3, #12
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018aa:	2307      	movs	r3, #7
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4809      	ldr	r0, [pc, #36]	@ (80018dc <HAL_UART_MspInit+0x9c>)
 80018b6:	f000 fac3 	bl	8001e40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2105      	movs	r1, #5
 80018be:	2026      	movs	r0, #38	@ 0x26
 80018c0:	f000 fa02 	bl	8001cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c4:	2026      	movs	r0, #38	@ 0x26
 80018c6:	f000 fa1b 	bl	8001d00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	@ 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001918 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018e4:	f7ff fe68 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ea:	490d      	ldr	r1, [pc, #52]	@ (8001920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001900:	4c0a      	ldr	r4, [pc, #40]	@ (800192c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800190e:	f006 fc3f 	bl	8008190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7ff fbbb 	bl	800108c <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001918:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001924:	08009128 	.word	0x08009128
  ldr r2, =_sbss
 8001928:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800192c:	20004de4 	.word	0x20004de4

08001930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC_IRQHandler>

08001932 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
 8001944:	f7ff fc3e 	bl	80011c4 <Error_Handler>
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e007      	b.n	8001962 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	2100      	movs	r1, #0
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d9f4      	bls.n	8001952 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	721a      	strb	r2, [r3, #8]
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
 8001988:	f7ff fc1c 	bl	80011c4 <Error_Handler>
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a1b      	ldrb	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d905      	bls.n	80019a4 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
 800199c:	f7ff fc12 	bl	80011c4 <Error_Handler>
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7a1b      	ldrb	r3, [r3, #8]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	b2d1      	uxtb	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	7211      	strb	r1, [r2, #8]
 80019b0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80019b2:	f3ef 8211 	mrs	r2, BASEPRI
 80019b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	60fa      	str	r2, [r7, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
 80019ec:	f7ff fbea 	bl	80011c4 <Error_Handler>
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7a1b      	ldrb	r3, [r3, #8]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7a1b      	ldrb	r3, [r3, #8]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d905      	bls.n	8001a14 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
 8001a0c:	f7ff fbda 	bl	80011c4 <Error_Handler>
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a1b      	ldrb	r3, [r3, #8]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001a28:	bf00      	nop
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001a40:	f006 fba0 	bl	8008184 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2216      	movs	r2, #22
 8001a48:	601a      	str	r2, [r3, #0]
    return;
 8001a4a:	e016      	b.n	8001a7a <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f005 ff6d 	bl	800792c <malloc>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff63 	bl	8001932 <stm32_lock_init>
    return;
 8001a6c:	e005      	b.n	8001a7a <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6e:	b672      	cpsid	i
}
 8001a70:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001a72:	f7ff fba7 	bl	80011c4 <Error_Handler>
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <__retarget_lock_init_recursive+0x44>
}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8e:	b672      	cpsid	i
}
 8001a90:	bf00      	nop
 8001a92:	f7ff fb97 	bl	80011c4 <Error_Handler>
 8001a96:	bf00      	nop
 8001a98:	e7fd      	b.n	8001a96 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff6a 	bl	8001976 <stm32_lock_acquire>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
 8001abc:	f7ff fb82 	bl	80011c4 <Error_Handler>
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff87 	bl	80019da <stm32_lock_release>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <HAL_Init+0x40>)
 8001ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_Init+0x40>)
 8001aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <HAL_Init+0x40>)
 8001af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 f8d8 	bl	8001cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f7ff fc0a 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f7ff fbdc 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023c00 	.word	0x40023c00

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000001c 	.word	0x2000001c
 8001b3c:	200002b0 	.word	0x200002b0

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200002b0 	.word	0x200002b0

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	@ (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff4c 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cda:	f7ff ff61 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	6978      	ldr	r0, [r7, #20]
 8001ce6:	f7ff ffb1 	bl	8001c4c <NVIC_EncodePriority>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff80 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff54 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d2a:	f7ff ff09 	bl	8001b40 <HAL_GetTick>
 8001d2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2280      	movs	r2, #128	@ 0x80
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e052      	b.n	8001df4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_Abort+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9e:	e013      	b.n	8001dc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da0:	f7ff fece 	bl	8001b40 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d90c      	bls.n	8001dc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2220      	movs	r2, #32
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2203      	movs	r2, #3
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e015      	b.n	8001df4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e4      	bne.n	8001da0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	223f      	movs	r2, #63	@ 0x3f
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d004      	beq.n	8001e1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2280      	movs	r2, #128	@ 0x80
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00c      	b.n	8001e34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2205      	movs	r2, #5
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e159      	b.n	8002110 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8148 	bne.w	800210a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a2 	beq.w	800210a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b57      	ldr	r3, [pc, #348]	@ (8002128 <HAL_GPIO_Init+0x2e8>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a56      	ldr	r2, [pc, #344]	@ (8002128 <HAL_GPIO_Init+0x2e8>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b54      	ldr	r3, [pc, #336]	@ (8002128 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe2:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_GPIO_Init+0x2ec>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a49      	ldr	r2, [pc, #292]	@ (8002130 <HAL_GPIO_Init+0x2f0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x202>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a48      	ldr	r2, [pc, #288]	@ (8002134 <HAL_GPIO_Init+0x2f4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x1fe>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <HAL_GPIO_Init+0x2f8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x1fa>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a46      	ldr	r2, [pc, #280]	@ (800213c <HAL_GPIO_Init+0x2fc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x1f6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a45      	ldr	r2, [pc, #276]	@ (8002140 <HAL_GPIO_Init+0x300>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x1f2>
 800202e:	2304      	movs	r3, #4
 8002030:	e008      	b.n	8002044 <HAL_GPIO_Init+0x204>
 8002032:	2307      	movs	r3, #7
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x204>
 8002036:	2303      	movs	r3, #3
 8002038:	e004      	b.n	8002044 <HAL_GPIO_Init+0x204>
 800203a:	2302      	movs	r3, #2
 800203c:	e002      	b.n	8002044 <HAL_GPIO_Init+0x204>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x204>
 8002042:	2300      	movs	r3, #0
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f002 0203 	and.w	r2, r2, #3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4093      	lsls	r3, r2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002054:	4935      	ldr	r1, [pc, #212]	@ (800212c <HAL_GPIO_Init+0x2ec>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_GPIO_Init+0x304>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002086:	4a2f      	ldr	r2, [pc, #188]	@ (8002144 <HAL_GPIO_Init+0x304>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <HAL_GPIO_Init+0x304>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b0:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <HAL_GPIO_Init+0x304>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b6:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <HAL_GPIO_Init+0x304>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020da:	4a1a      	ldr	r2, [pc, #104]	@ (8002144 <HAL_GPIO_Init+0x304>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_GPIO_Init+0x304>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002104:	4a0f      	ldr	r2, [pc, #60]	@ (8002144 <HAL_GPIO_Init+0x304>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f aea2 	bls.w	8001e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40013c00 	.word	0x40013c00

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e267      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800219a:	4b88      	ldr	r3, [pc, #544]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b85      	ldr	r3, [pc, #532]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b82      	ldr	r3, [pc, #520]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b7e      	ldr	r3, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e242      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x74>
 80021e2:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b70      	ldr	r3, [pc, #448]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6f      	ldr	r2, [pc, #444]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6c      	ldr	r2, [pc, #432]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 8002214:	4b69      	ldr	r3, [pc, #420]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a68      	ldr	r2, [pc, #416]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fc84 	bl	8001b40 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fc80 	bl	8001b40 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e207      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b5b      	ldr	r3, [pc, #364]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xc0>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fc70 	bl	8001b40 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fc6c 	bl	8001b40 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1f3      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b51      	ldr	r3, [pc, #324]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002292:	4b4a      	ldr	r3, [pc, #296]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b44      	ldr	r3, [pc, #272]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c7      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4937      	ldr	r1, [pc, #220]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_RCC_OscConfig+0x244>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7ff fc25 	bl	8001b40 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff fc21 	bl	8001b40 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1a8      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4925      	ldr	r1, [pc, #148]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCC_OscConfig+0x244>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fc04 	bl	8001b40 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fc00 	bl	8001b40 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e187      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d036      	beq.n	80023d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_RCC_OscConfig+0x248>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff fbe4 	bl	8001b40 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fbe0 	bl	8001b40 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e167      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x200>
 800239a:	e01b      	b.n	80023d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_RCC_OscConfig+0x248>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fbcd 	bl	8001b40 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e00e      	b.n	80023c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff fbc9 	bl	8001b40 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d907      	bls.n	80023c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e150      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000
 80023c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b88      	ldr	r3, [pc, #544]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ea      	bne.n	80023aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8097 	beq.w	8002510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b81      	ldr	r3, [pc, #516]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b7d      	ldr	r3, [pc, #500]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	4a7c      	ldr	r2, [pc, #496]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	@ 0x40
 8002402:	4b7a      	ldr	r3, [pc, #488]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b77      	ldr	r3, [pc, #476]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b74      	ldr	r3, [pc, #464]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a73      	ldr	r2, [pc, #460]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7ff fb89 	bl	8001b40 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff fb85 	bl	8001b40 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e10c      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b6a      	ldr	r3, [pc, #424]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x2ea>
 8002458:	4b64      	ldr	r3, [pc, #400]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245c:	4a63      	ldr	r2, [pc, #396]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	@ 0x70
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x324>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x30c>
 800246e:	4b5f      	ldr	r3, [pc, #380]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	4a5e      	ldr	r2, [pc, #376]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	@ 0x70
 800247a:	4b5c      	ldr	r3, [pc, #368]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	4a5b      	ldr	r2, [pc, #364]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	@ 0x70
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x324>
 8002488:	4b58      	ldr	r3, [pc, #352]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	4a57      	ldr	r2, [pc, #348]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	@ 0x70
 8002494:	4b55      	ldr	r3, [pc, #340]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002498:	4a54      	ldr	r2, [pc, #336]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff fb4a 	bl	8001b40 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7ff fb46 	bl	8001b40 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0cb      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	4b49      	ldr	r3, [pc, #292]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ee      	beq.n	80024b0 <HAL_RCC_OscConfig+0x334>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7ff fb34 	bl	8001b40 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7ff fb30 	bl	8001b40 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0b5      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ee      	bne.n	80024dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	4a38      	ldr	r2, [pc, #224]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a1 	beq.w	800265c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251a:	4b34      	ldr	r3, [pc, #208]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d05c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d141      	bne.n	80025b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <HAL_RCC_OscConfig+0x478>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff fb04 	bl	8001b40 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff fb00 	bl	8001b40 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e087      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	3b01      	subs	r3, #1
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	491b      	ldr	r1, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x478>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fad9 	bl	8001b40 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff fad5 	bl	8001b40 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e05c      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a4:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x416>
 80025b0:	e054      	b.n	800265c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fac2 	bl	8001b40 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff fabe 	bl	8001b40 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e045      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x444>
 80025de:	e03d      	b.n	800265c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e038      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40007000 	.word	0x40007000
 80025f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4ec>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d028      	beq.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d121      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d11a      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002628:	4013      	ands	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800262e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002630:	4293      	cmp	r3, r2
 8002632:	d111      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	085b      	lsrs	r3, r3, #1
 8002640:	3b01      	subs	r3, #1
 8002642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0cc      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b68      	ldr	r3, [pc, #416]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d90c      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b65      	ldr	r3, [pc, #404]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a58      	ldr	r2, [pc, #352]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a52      	ldr	r2, [pc, #328]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d044      	beq.n	800278c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3b      	ldr	r3, [pc, #236]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e067      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4934      	ldr	r1, [pc, #208]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7ff f9f0 	bl	8001b40 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7ff f9ec 	bl	8001b40 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490a      	ldr	r1, [pc, #40]	@ (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fd82 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00
 8002828:	40023800 	.word	0x40023800
 800282c:	08008fa4 	.word	0x08008fa4
 8002830:	20000014 	.word	0x20000014
 8002834:	20000018 	.word	0x20000018

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	b090      	sub	sp, #64	@ 0x40
 800283e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002850:	4b59      	ldr	r3, [pc, #356]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d00d      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x40>
 800285c:	2b08      	cmp	r3, #8
 800285e:	f200 80a1 	bhi.w	80029a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x34>
 8002866:	2b04      	cmp	r3, #4
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x3a>
 800286a:	e09b      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b53      	ldr	r3, [pc, #332]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x184>)
 800286e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002870:	e09b      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002872:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002876:	e098      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002878:	4b4f      	ldr	r3, [pc, #316]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	4b4d      	ldr	r3, [pc, #308]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b4a      	ldr	r3, [pc, #296]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	2200      	movs	r2, #0
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	627a      	str	r2, [r7, #36]	@ 0x24
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028a0:	2100      	movs	r1, #0
 80028a2:	4b47      	ldr	r3, [pc, #284]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80028a4:	fb03 f201 	mul.w	r2, r3, r1
 80028a8:	2300      	movs	r3, #0
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b2:	fba0 1202 	umull	r1, r2, r0, r2
 80028b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028b8:	460a      	mov	r2, r1
 80028ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028be:	4413      	add	r3, r2
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c4:	2200      	movs	r2, #0
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	61fa      	str	r2, [r7, #28]
 80028ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028d2:	f7fd fcdd 	bl	8000290 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4613      	mov	r3, r2
 80028dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028de:	e053      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b35      	ldr	r3, [pc, #212]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	617a      	str	r2, [r7, #20]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028f2:	f04f 0b00 	mov.w	fp, #0
 80028f6:	4652      	mov	r2, sl
 80028f8:	465b      	mov	r3, fp
 80028fa:	f04f 0000 	mov.w	r0, #0
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	0159      	lsls	r1, r3, #5
 8002904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002908:	0150      	lsls	r0, r2, #5
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	ebb2 080a 	subs.w	r8, r2, sl
 8002912:	eb63 090b 	sbc.w	r9, r3, fp
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002922:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002926:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800292a:	ebb2 0408 	subs.w	r4, r2, r8
 800292e:	eb63 0509 	sbc.w	r5, r3, r9
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	00eb      	lsls	r3, r5, #3
 800293c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002940:	00e2      	lsls	r2, r4, #3
 8002942:	4614      	mov	r4, r2
 8002944:	461d      	mov	r5, r3
 8002946:	eb14 030a 	adds.w	r3, r4, sl
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	eb45 030b 	adc.w	r3, r5, fp
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295e:	4629      	mov	r1, r5
 8002960:	028b      	lsls	r3, r1, #10
 8002962:	4621      	mov	r1, r4
 8002964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002968:	4621      	mov	r1, r4
 800296a:	028a      	lsls	r2, r1, #10
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002972:	2200      	movs	r2, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800297c:	f7fd fc88 	bl	8000290 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002988:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002998:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x184>)
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3740      	adds	r7, #64	@ 0x40
 80029b0:	46bd      	mov	sp, r7
 80029b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	017d7840 	.word	0x017d7840

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000014 	.word	0x20000014

080029dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e0:	f7ff fff0 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0a9b      	lsrs	r3, r3, #10
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4903      	ldr	r1, [pc, #12]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	08008fb4 	.word	0x08008fb4

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff ffdc 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0b5b      	lsrs	r3, r3, #13
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08008fb4 	.word	0x08008fb4

08002a2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	220f      	movs	r2, #15
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a3c:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a48:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a6e:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <HAL_RCC_GetClockConfig+0x60>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0207 	and.w	r2, r3, #7
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	601a      	str	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40023c00 	.word	0x40023c00

08002a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e041      	b.n	8002b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fe1c 	bl	80016f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 fc3c 	bl	800334c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e044      	b.n	8002bd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1e      	ldr	r2, [pc, #120]	@ (8002be0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d018      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x6c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d013      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x6c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1a      	ldr	r2, [pc, #104]	@ (8002be4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00e      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x6c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x6c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <HAL_TIM_Base_Start_IT+0xbc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x6c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a16      	ldr	r2, [pc, #88]	@ (8002bf0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d111      	bne.n	8002bc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d010      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbe:	e007      	b.n	8002bd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40014000 	.word	0x40014000

08002bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f839 	bl	8002c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fb8a 	bl	800334c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_TIM_PWM_Start+0x24>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e022      	b.n	8002d12 <HAL_TIM_PWM_Start+0x6a>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d109      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0x3e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	bf14      	ite	ne
 8002cde:	2301      	movne	r3, #1
 8002ce0:	2300      	moveq	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e015      	b.n	8002d12 <HAL_TIM_PWM_Start+0x6a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d109      	bne.n	8002d00 <HAL_TIM_PWM_Start+0x58>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e008      	b.n	8002d12 <HAL_TIM_PWM_Start+0x6a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e068      	b.n	8002dec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start+0x82>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d28:	e013      	b.n	8002d52 <HAL_TIM_PWM_Start+0xaa>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start+0x92>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d38:	e00b      	b.n	8002d52 <HAL_TIM_PWM_Start+0xaa>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xa2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d48:	e003      	b.n	8002d52 <HAL_TIM_PWM_Start+0xaa>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fda8 	bl	80038b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <HAL_TIM_PWM_Start+0x14c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <HAL_TIM_PWM_Start+0x14c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d018      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x10e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8c:	d013      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x10e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a19      	ldr	r2, [pc, #100]	@ (8002df8 <HAL_TIM_PWM_Start+0x150>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x10e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_TIM_PWM_Start+0x154>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x10e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a16      	ldr	r2, [pc, #88]	@ (8002e00 <HAL_TIM_PWM_Start+0x158>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x10e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <HAL_TIM_PWM_Start+0x15c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d111      	bne.n	8002dda <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d010      	beq.n	8002dea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	e007      	b.n	8002dea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40014000 	.word	0x40014000

08002e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d020      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0202 	mvn.w	r2, #2
 8002e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa5b 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa4d 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fa5e 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d020      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01b      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0204 	mvn.w	r2, #4
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa35 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa27 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa38 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0208 	mvn.w	r2, #8
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa0f 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa01 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa12 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9e9 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9db 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f9ec 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0201 	mvn.w	r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe f916 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fd2a 	bl	80039ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9bd 	bl	8003336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0220 	mvn.w	r2, #32
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fcfc 	bl	80039d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003002:	2302      	movs	r3, #2
 8003004:	e0ae      	b.n	8003164 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b0c      	cmp	r3, #12
 8003012:	f200 809f 	bhi.w	8003154 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003051 	.word	0x08003051
 8003020:	08003155 	.word	0x08003155
 8003024:	08003155 	.word	0x08003155
 8003028:	08003155 	.word	0x08003155
 800302c:	08003091 	.word	0x08003091
 8003030:	08003155 	.word	0x08003155
 8003034:	08003155 	.word	0x08003155
 8003038:	08003155 	.word	0x08003155
 800303c:	080030d3 	.word	0x080030d3
 8003040:	08003155 	.word	0x08003155
 8003044:	08003155 	.word	0x08003155
 8003048:	08003155 	.word	0x08003155
 800304c:	08003113 	.word	0x08003113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fa04 	bl	8003464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	619a      	str	r2, [r3, #24]
      break;
 800308e:	e064      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fa4a 	bl	8003530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6999      	ldr	r1, [r3, #24]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	021a      	lsls	r2, r3, #8
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	619a      	str	r2, [r3, #24]
      break;
 80030d0:	e043      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fa95 	bl	8003608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0208 	orr.w	r2, r2, #8
 80030ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0204 	bic.w	r2, r2, #4
 80030fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	61da      	str	r2, [r3, #28]
      break;
 8003110:	e023      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fadf 	bl	80036dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69d9      	ldr	r1, [r3, #28]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	021a      	lsls	r2, r3, #8
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	61da      	str	r2, [r3, #28]
      break;
 8003152:	e002      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
      break;
 8003158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_TIM_ConfigClockSource+0x1c>
 8003184:	2302      	movs	r3, #2
 8003186:	e0b4      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x186>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c0:	d03e      	beq.n	8003240 <HAL_TIM_ConfigClockSource+0xd4>
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c6:	f200 8087 	bhi.w	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ce:	f000 8086 	beq.w	80032de <HAL_TIM_ConfigClockSource+0x172>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	d87f      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b70      	cmp	r3, #112	@ 0x70
 80031da:	d01a      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0xa6>
 80031dc:	2b70      	cmp	r3, #112	@ 0x70
 80031de:	d87b      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b60      	cmp	r3, #96	@ 0x60
 80031e2:	d050      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x11a>
 80031e4:	2b60      	cmp	r3, #96	@ 0x60
 80031e6:	d877      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b50      	cmp	r3, #80	@ 0x50
 80031ea:	d03c      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0xfa>
 80031ec:	2b50      	cmp	r3, #80	@ 0x50
 80031ee:	d873      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d058      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x13a>
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	d86f      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b30      	cmp	r3, #48	@ 0x30
 80031fa:	d064      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 80031fc:	2b30      	cmp	r3, #48	@ 0x30
 80031fe:	d86b      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d060      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003204:	2b20      	cmp	r3, #32
 8003206:	d867      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05c      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 800320c:	2b10      	cmp	r3, #16
 800320e:	d05a      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003210:	e062      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003222:	f000 fb25 	bl	8003870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
      break;
 800323e:	e04f      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003250:	f000 fb0e 	bl	8003870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003262:	609a      	str	r2, [r3, #8]
      break;
 8003264:	e03c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	461a      	mov	r2, r3
 8003274:	f000 fa82 	bl	800377c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2150      	movs	r1, #80	@ 0x50
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fadb 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 8003284:	e02c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	461a      	mov	r2, r3
 8003294:	f000 faa1 	bl	80037da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2160      	movs	r1, #96	@ 0x60
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 facb 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 80032a4:	e01c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	461a      	mov	r2, r3
 80032b4:	f000 fa62 	bl	800377c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2140      	movs	r1, #64	@ 0x40
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fabb 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 80032c4:	e00c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f000 fab2 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 80032d6:	e003      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	e000      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3a      	ldr	r2, [pc, #232]	@ (8003448 <TIM_Base_SetConfig+0xfc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00f      	beq.n	8003384 <TIM_Base_SetConfig+0x38>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336a:	d00b      	beq.n	8003384 <TIM_Base_SetConfig+0x38>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a37      	ldr	r2, [pc, #220]	@ (800344c <TIM_Base_SetConfig+0x100>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <TIM_Base_SetConfig+0x38>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a36      	ldr	r2, [pc, #216]	@ (8003450 <TIM_Base_SetConfig+0x104>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_Base_SetConfig+0x38>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a35      	ldr	r2, [pc, #212]	@ (8003454 <TIM_Base_SetConfig+0x108>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d108      	bne.n	8003396 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2b      	ldr	r2, [pc, #172]	@ (8003448 <TIM_Base_SetConfig+0xfc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01b      	beq.n	80033d6 <TIM_Base_SetConfig+0x8a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a4:	d017      	beq.n	80033d6 <TIM_Base_SetConfig+0x8a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a28      	ldr	r2, [pc, #160]	@ (800344c <TIM_Base_SetConfig+0x100>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <TIM_Base_SetConfig+0x8a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a27      	ldr	r2, [pc, #156]	@ (8003450 <TIM_Base_SetConfig+0x104>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00f      	beq.n	80033d6 <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <TIM_Base_SetConfig+0x108>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a25      	ldr	r2, [pc, #148]	@ (8003458 <TIM_Base_SetConfig+0x10c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a24      	ldr	r2, [pc, #144]	@ (800345c <TIM_Base_SetConfig+0x110>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a23      	ldr	r2, [pc, #140]	@ (8003460 <TIM_Base_SetConfig+0x114>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d108      	bne.n	80033e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0e      	ldr	r2, [pc, #56]	@ (8003448 <TIM_Base_SetConfig+0xfc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d103      	bne.n	800341c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f023 0201 	bic.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	611a      	str	r2, [r3, #16]
  }
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800

08003464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 0201 	bic.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0302 	bic.w	r3, r3, #2
 80034ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <TIM_OC1_SetConfig+0xc8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10c      	bne.n	80034da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0308 	bic.w	r3, r3, #8
 80034c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a13      	ldr	r2, [pc, #76]	@ (800352c <TIM_OC1_SetConfig+0xc8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d111      	bne.n	8003506 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40010000 	.word	0x40010000

08003530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f023 0210 	bic.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0320 	bic.w	r3, r3, #32
 800357a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1e      	ldr	r2, [pc, #120]	@ (8003604 <TIM_OC2_SetConfig+0xd4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10d      	bne.n	80035ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a15      	ldr	r2, [pc, #84]	@ (8003604 <TIM_OC2_SetConfig+0xd4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d113      	bne.n	80035dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000

08003608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1d      	ldr	r2, [pc, #116]	@ (80036d8 <TIM_OC3_SetConfig+0xd0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10d      	bne.n	8003682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800366c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a14      	ldr	r2, [pc, #80]	@ (80036d8 <TIM_OC3_SetConfig+0xd0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d113      	bne.n	80036b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40010000 	.word	0x40010000

080036dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a10      	ldr	r2, [pc, #64]	@ (8003778 <TIM_OC4_SetConfig+0x9c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000

0800377c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f023 0201 	bic.w	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 030a 	bic.w	r3, r3, #10
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037da:	b480      	push	{r7}
 80037dc:	b087      	sub	sp, #28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 0210 	bic.w	r2, r3, #16
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	031b      	lsls	r3, r3, #12
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003816:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	f043 0307 	orr.w	r3, r3, #7
 800385c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	021a      	lsls	r2, r3, #8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	431a      	orrs	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2201      	movs	r2, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	401a      	ands	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003910:	2302      	movs	r3, #2
 8003912:	e050      	b.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d018      	beq.n	800398a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003960:	d013      	beq.n	800398a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a18      	ldr	r2, [pc, #96]	@ (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10c      	bne.n	80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4313      	orrs	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000

080039d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e042      	b.n	8003a98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd ff0a 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	@ 0x24
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fce5 	bl	8004414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d112      	bne.n	8003ae0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_UART_Receive_IT+0x26>
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00b      	b.n	8003ae2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fac4 	bl	8004064 <UART_Start_Receive_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0ba      	sub	sp, #232	@ 0xe8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_UART_IRQHandler+0x66>
 8003b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fba3 	bl	8004296 <UART_Receive_IT>
      return;
 8003b50:	e25b      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80de 	beq.w	8003d18 <HAL_UART_IRQHandler+0x22c>
 8003b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80d1 	beq.w	8003d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_UART_IRQHandler+0xae>
 8003b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0201 	orr.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
 8003ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f043 0202 	orr.w	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_UART_IRQHandler+0xf6>
 8003bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_UART_IRQHandler+0x126>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f043 0208 	orr.w	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 81f2 	beq.w	8004000 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_UART_IRQHandler+0x14e>
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb2e 	bl	8004296 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_UART_IRQHandler+0x17a>
 8003c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d04f      	beq.n	8003d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa36 	bl	80040d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b40      	cmp	r3, #64	@ 0x40
 8003c78:	d141      	bne.n	8003cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d013      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ecc <HAL_UART_IRQHandler+0x3e0>)
 8003cd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe f88e 	bl	8001dfc <HAL_DMA_Abort_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d016      	beq.n	8003d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e00e      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f99e 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e00a      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f99a 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	e006      	b.n	8003d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f996 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d12:	e175      	b.n	8004000 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	bf00      	nop
    return;
 8003d16:	e173      	b.n	8004000 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	f040 814f 	bne.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8148 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8141 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	f040 80b6 	bne.w	8003ed0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8145 	beq.w	8004004 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d82:	429a      	cmp	r2, r3
 8003d84:	f080 813e 	bcs.w	8004004 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9a:	f000 8088 	beq.w	8003eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1d9      	bne.n	8003d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3314      	adds	r3, #20
 8003e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e1      	bne.n	8003dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7e:	f023 0310 	bic.w	r3, r3, #16
 8003e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd ff37 	bl	8001d1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8c1 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eca:	e09b      	b.n	8004004 <HAL_UART_IRQHandler+0x518>
 8003ecc:	0800419f 	.word	0x0800419f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 808e 	beq.w	8004008 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8089 	beq.w	8004008 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f98:	61fa      	str	r2, [r7, #28]
 8003f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	69b9      	ldr	r1, [r7, #24]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e3      	bne.n	8003f74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f847 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fbe:	e023      	b.n	8004008 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x4f4>
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8f4 	bl	80041c6 <UART_Transmit_IT>
    return;
 8003fde:	e014      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <HAL_UART_IRQHandler+0x51e>
 8003fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f934 	bl	8004266 <UART_EndTransmit_IT>
    return;
 8003ffe:	e004      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
    return;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
      return;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <HAL_UART_IRQHandler+0x51e>
      return;
 8004008:	bf00      	nop
  }
}
 800400a:	37e8      	adds	r7, #232	@ 0xe8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2222      	movs	r2, #34	@ 0x22
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0220 	orr.w	r2, r2, #32
 80040c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b095      	sub	sp, #84	@ 0x54
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004100:	643a      	str	r2, [r7, #64]	@ 0x40
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	61fb      	str	r3, [r7, #28]
   return(result);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004134:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800413a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	2b01      	cmp	r3, #1
 800414e:	d119      	bne.n	8004184 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	647b      	str	r3, [r7, #68]	@ 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004170:	61ba      	str	r2, [r7, #24]
 8004172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	613b      	str	r3, [r7, #16]
   return(result);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004192:	bf00      	nop
 8004194:	3754      	adds	r7, #84	@ 0x54
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff ff3d 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b21      	cmp	r3, #33	@ 0x21
 80041d8:	d13e      	bne.n	8004258 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d114      	bne.n	800420e <UART_Transmit_IT+0x48>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d110      	bne.n	800420e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	621a      	str	r2, [r3, #32]
 800420c:	e008      	b.n	8004220 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6211      	str	r1, [r2, #32]
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29b      	uxth	r3, r3
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4619      	mov	r1, r3
 800422e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10f      	bne.n	8004254 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004242:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004252:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800427c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fec2 	bl	8004010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b08c      	sub	sp, #48	@ 0x30
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b22      	cmp	r3, #34	@ 0x22
 80042a8:	f040 80ae 	bne.w	8004408 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b4:	d117      	bne.n	80042e6 <UART_Receive_IT+0x50>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80042e4:	e026      	b.n	8004334 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f8:	d007      	beq.n	800430a <UART_Receive_IT+0x74>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <UART_Receive_IT+0x82>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e008      	b.n	800432a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004324:	b2da      	uxtb	r2, r3
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29b      	uxth	r3, r3
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4619      	mov	r1, r3
 8004342:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004344:	2b00      	cmp	r3, #0
 8004346:	d15d      	bne.n	8004404 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0220 	bic.w	r2, r2, #32
 8004356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	2b01      	cmp	r3, #1
 800438c:	d135      	bne.n	80043fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	613b      	str	r3, [r7, #16]
   return(result);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f023 0310 	bic.w	r3, r3, #16
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	623a      	str	r2, [r7, #32]
 80043b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	69f9      	ldr	r1, [r7, #28]
 80043ba:	6a3a      	ldr	r2, [r7, #32]
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e5      	bne.n	8004394 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d10a      	bne.n	80043ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fe2a 	bl	800404c <HAL_UARTEx_RxEventCallback>
 80043f8:	e002      	b.n	8004400 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fe12 	bl	8004024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e002      	b.n	800440a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3730      	adds	r7, #48	@ 0x30
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004418:	b0c0      	sub	sp, #256	@ 0x100
 800441a:	af00      	add	r7, sp, #0
 800441c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	68d9      	ldr	r1, [r3, #12]
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	ea40 0301 	orr.w	r3, r0, r1
 800443c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	431a      	orrs	r2, r3
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800446c:	f021 010c 	bic.w	r1, r1, #12
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800447a:	430b      	orrs	r3, r1
 800447c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	ea40 0301 	orr.w	r3, r0, r1
 800449a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8f      	ldr	r3, [pc, #572]	@ (80046e0 <UART_SetConfig+0x2cc>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d005      	beq.n	80044b4 <UART_SetConfig+0xa0>
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4b8d      	ldr	r3, [pc, #564]	@ (80046e4 <UART_SetConfig+0x2d0>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d104      	bne.n	80044be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe faa6 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 80044b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044bc:	e003      	b.n	80044c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe fa8d 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 80044c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d0:	f040 810c 	bne.w	80046ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	1891      	adds	r1, r2, r2
 80044ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044ee:	415b      	adcs	r3, r3
 80044f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044f6:	4621      	mov	r1, r4
 80044f8:	eb12 0801 	adds.w	r8, r2, r1
 80044fc:	4629      	mov	r1, r5
 80044fe:	eb43 0901 	adc.w	r9, r3, r1
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004516:	4690      	mov	r8, r2
 8004518:	4699      	mov	r9, r3
 800451a:	4623      	mov	r3, r4
 800451c:	eb18 0303 	adds.w	r3, r8, r3
 8004520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004524:	462b      	mov	r3, r5
 8004526:	eb49 0303 	adc.w	r3, r9, r3
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800453a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800453e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004542:	460b      	mov	r3, r1
 8004544:	18db      	adds	r3, r3, r3
 8004546:	653b      	str	r3, [r7, #80]	@ 0x50
 8004548:	4613      	mov	r3, r2
 800454a:	eb42 0303 	adc.w	r3, r2, r3
 800454e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004558:	f7fb fe9a 	bl	8000290 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <UART_SetConfig+0x2d4>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	011c      	lsls	r4, r3, #4
 800456a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004574:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004584:	415b      	adcs	r3, r3
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800458c:	4641      	mov	r1, r8
 800458e:	eb12 0a01 	adds.w	sl, r2, r1
 8004592:	4649      	mov	r1, r9
 8004594:	eb43 0b01 	adc.w	fp, r3, r1
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ac:	4692      	mov	sl, r2
 80045ae:	469b      	mov	fp, r3
 80045b0:	4643      	mov	r3, r8
 80045b2:	eb1a 0303 	adds.w	r3, sl, r3
 80045b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ba:	464b      	mov	r3, r9
 80045bc:	eb4b 0303 	adc.w	r3, fp, r3
 80045c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045d8:	460b      	mov	r3, r1
 80045da:	18db      	adds	r3, r3, r3
 80045dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80045de:	4613      	mov	r3, r2
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045ee:	f7fb fe4f 	bl	8000290 <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	4b3b      	ldr	r3, [pc, #236]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80045fa:	fba3 2301 	umull	r2, r3, r3, r1
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2264      	movs	r2, #100	@ 0x64
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	1acb      	subs	r3, r1, r3
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800460e:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <UART_SetConfig+0x2d4>)
 8004610:	fba3 2302 	umull	r2, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800461c:	441c      	add	r4, r3
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004628:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800462c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004638:	415b      	adcs	r3, r3
 800463a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800463c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6339      	str	r1, [r7, #48]	@ 0x30
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800468c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004694:	460b      	mov	r3, r1
 8004696:	18db      	adds	r3, r3, r3
 8004698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800469a:	4613      	mov	r3, r2
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046aa:	f7fb fdf1 	bl	8000290 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80046b4:	fba3 1302 	umull	r1, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2164      	movs	r1, #100	@ 0x64
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	3332      	adds	r3, #50	@ 0x32
 80046c6:	4a08      	ldr	r2, [pc, #32]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4422      	add	r2, r4
 80046da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046dc:	e106      	b.n	80048ec <UART_SetConfig+0x4d8>
 80046de:	bf00      	nop
 80046e0:	40011000 	.word	0x40011000
 80046e4:	40011400 	.word	0x40011400
 80046e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046fe:	4642      	mov	r2, r8
 8004700:	464b      	mov	r3, r9
 8004702:	1891      	adds	r1, r2, r2
 8004704:	6239      	str	r1, [r7, #32]
 8004706:	415b      	adcs	r3, r3
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800470e:	4641      	mov	r1, r8
 8004710:	1854      	adds	r4, r2, r1
 8004712:	4649      	mov	r1, r9
 8004714:	eb43 0501 	adc.w	r5, r3, r1
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	00eb      	lsls	r3, r5, #3
 8004722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004726:	00e2      	lsls	r2, r4, #3
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	4643      	mov	r3, r8
 800472e:	18e3      	adds	r3, r4, r3
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004734:	464b      	mov	r3, r9
 8004736:	eb45 0303 	adc.w	r3, r5, r3
 800473a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800474a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800475a:	4629      	mov	r1, r5
 800475c:	008b      	lsls	r3, r1, #2
 800475e:	4621      	mov	r1, r4
 8004760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004764:	4621      	mov	r1, r4
 8004766:	008a      	lsls	r2, r1, #2
 8004768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800476c:	f7fb fd90 	bl	8000290 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4b60      	ldr	r3, [pc, #384]	@ (80048f8 <UART_SetConfig+0x4e4>)
 8004776:	fba3 2302 	umull	r2, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	011c      	lsls	r4, r3, #4
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004788:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800478c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	61b9      	str	r1, [r7, #24]
 8004798:	415b      	adcs	r3, r3
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6139      	str	r1, [r7, #16]
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047f8:	4649      	mov	r1, r9
 80047fa:	008b      	lsls	r3, r1, #2
 80047fc:	4641      	mov	r1, r8
 80047fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004802:	4641      	mov	r1, r8
 8004804:	008a      	lsls	r2, r1, #2
 8004806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800480a:	f7fb fd41 	bl	8000290 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4611      	mov	r1, r2
 8004814:	4b38      	ldr	r3, [pc, #224]	@ (80048f8 <UART_SetConfig+0x4e4>)
 8004816:	fba3 2301 	umull	r2, r3, r3, r1
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2264      	movs	r2, #100	@ 0x64
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	1acb      	subs	r3, r1, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	@ 0x32
 8004828:	4a33      	ldr	r2, [pc, #204]	@ (80048f8 <UART_SetConfig+0x4e4>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004834:	441c      	add	r4, r3
 8004836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800483a:	2200      	movs	r2, #0
 800483c:	673b      	str	r3, [r7, #112]	@ 0x70
 800483e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004840:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	415b      	adcs	r3, r3
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004854:	4641      	mov	r1, r8
 8004856:	1851      	adds	r1, r2, r1
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	4649      	mov	r1, r9
 800485c:	414b      	adcs	r3, r1
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800486c:	4659      	mov	r1, fp
 800486e:	00cb      	lsls	r3, r1, #3
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004876:	4651      	mov	r1, sl
 8004878:	00ca      	lsls	r2, r1, #3
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	4603      	mov	r3, r0
 8004880:	4642      	mov	r2, r8
 8004882:	189b      	adds	r3, r3, r2
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004886:	464b      	mov	r3, r9
 8004888:	460a      	mov	r2, r1
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	663b      	str	r3, [r7, #96]	@ 0x60
 800489a:	667a      	str	r2, [r7, #100]	@ 0x64
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048ba:	f7fb fce9 	bl	8000290 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <UART_SetConfig+0x4e4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	@ 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	@ 0x32
 80048d6:	4a08      	ldr	r2, [pc, #32]	@ (80048f8 <UART_SetConfig+0x4e4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 020f 	and.w	r2, r3, #15
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4422      	add	r2, r4
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048f2:	46bd      	mov	sp, r7
 80048f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f8:	51eb851f 	.word	0x51eb851f

080048fc <__NVIC_SetPriority>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	6039      	str	r1, [r7, #0]
 8004906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490c:	2b00      	cmp	r3, #0
 800490e:	db0a      	blt.n	8004926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	490c      	ldr	r1, [pc, #48]	@ (8004948 <__NVIC_SetPriority+0x4c>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	0112      	lsls	r2, r2, #4
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	440b      	add	r3, r1
 8004920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004924:	e00a      	b.n	800493c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	4908      	ldr	r1, [pc, #32]	@ (800494c <__NVIC_SetPriority+0x50>)
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	3b04      	subs	r3, #4
 8004934:	0112      	lsls	r2, r2, #4
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	440b      	add	r3, r1
 800493a:	761a      	strb	r2, [r3, #24]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000e100 	.word	0xe000e100
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <SysTick_Handler+0x1c>)
 8004956:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004958:	f001 fd46 	bl	80063e8 <xTaskGetSchedulerState>
 800495c:	4603      	mov	r3, r0
 800495e:	2b01      	cmp	r3, #1
 8004960:	d001      	beq.n	8004966 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004962:	f002 fd49 	bl	80073f8 <xPortSysTickHandler>
  }
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	e000e010 	.word	0xe000e010

08004970 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004974:	2100      	movs	r1, #0
 8004976:	f06f 0004 	mvn.w	r0, #4
 800497a:	f7ff ffbf 	bl	80048fc <__NVIC_SetPriority>
#endif
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800498a:	f3ef 8305 	mrs	r3, IPSR
 800498e:	603b      	str	r3, [r7, #0]
  return(result);
 8004990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004996:	f06f 0305 	mvn.w	r3, #5
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	e00c      	b.n	80049b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800499e:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <osKernelInitialize+0x44>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d105      	bne.n	80049b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049a6:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <osKernelInitialize+0x44>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	e002      	b.n	80049b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049b8:	687b      	ldr	r3, [r7, #4]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	200002b4 	.word	0x200002b4

080049cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d2:	f3ef 8305 	mrs	r3, IPSR
 80049d6:	603b      	str	r3, [r7, #0]
  return(result);
 80049d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80049de:	f06f 0305 	mvn.w	r3, #5
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	e010      	b.n	8004a08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <osKernelStart+0x48>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d109      	bne.n	8004a02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049ee:	f7ff ffbf 	bl	8004970 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049f2:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <osKernelStart+0x48>)
 80049f4:	2202      	movs	r2, #2
 80049f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049f8:	f001 f892 	bl	8005b20 <vTaskStartScheduler>
      stat = osOK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	e002      	b.n	8004a08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a08:	687b      	ldr	r3, [r7, #4]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200002b4 	.word	0x200002b4

08004a18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	@ 0x38
 8004a1c:	af04      	add	r7, sp, #16
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a28:	f3ef 8305 	mrs	r3, IPSR
 8004a2c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d17e      	bne.n	8004b32 <osThreadNew+0x11a>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d07b      	beq.n	8004b32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a3a:	2380      	movs	r3, #128	@ 0x80
 8004a3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a3e:	2318      	movs	r3, #24
 8004a40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d045      	beq.n	8004ade <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <osThreadNew+0x48>
        name = attr->name;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <osThreadNew+0x6e>
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b38      	cmp	r3, #56	@ 0x38
 8004a78:	d805      	bhi.n	8004a86 <osThreadNew+0x6e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <osThreadNew+0x72>
        return (NULL);
 8004a86:	2300      	movs	r3, #0
 8004a88:	e054      	b.n	8004b34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00e      	beq.n	8004ac0 <osThreadNew+0xa8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2ba7      	cmp	r3, #167	@ 0xa7
 8004aa8:	d90a      	bls.n	8004ac0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <osThreadNew+0xa8>
        mem = 1;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e010      	b.n	8004ae2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10c      	bne.n	8004ae2 <osThreadNew+0xca>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d108      	bne.n	8004ae2 <osThreadNew+0xca>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <osThreadNew+0xca>
          mem = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	e001      	b.n	8004ae2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d110      	bne.n	8004b0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004af0:	9202      	str	r2, [sp, #8]
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6a3a      	ldr	r2, [r7, #32]
 8004afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fe1a 	bl	8005738 <xTaskCreateStatic>
 8004b04:	4603      	mov	r3, r0
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	e013      	b.n	8004b32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d110      	bne.n	8004b32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f107 0310 	add.w	r3, r7, #16
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fe68 	bl	80057f8 <xTaskCreate>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <osThreadNew+0x11a>
            hTask = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b32:	693b      	ldr	r3, [r7, #16]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3728      	adds	r7, #40	@ 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b44:	f3ef 8305 	mrs	r3, IPSR
 8004b48:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <osDelay+0x1c>
    stat = osErrorISR;
 8004b50:	f06f 0305 	mvn.w	r3, #5
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e007      	b.n	8004b68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 ffa6 	bl	8005ab4 <vTaskDelay>
    }
  }

  return (stat);
 8004b68:	68fb      	ldr	r3, [r7, #12]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a07      	ldr	r2, [pc, #28]	@ (8004ba0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4a06      	ldr	r2, [pc, #24]	@ (8004ba4 <vApplicationGetIdleTaskMemory+0x30>)
 8004b8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2280      	movs	r2, #128	@ 0x80
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	200002b8 	.word	0x200002b8
 8004ba4:	20000360 	.word	0x20000360

08004ba8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a07      	ldr	r2, [pc, #28]	@ (8004bd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a06      	ldr	r2, [pc, #24]	@ (8004bd8 <vApplicationGetTimerTaskMemory+0x30>)
 8004bbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bc6:	601a      	str	r2, [r3, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000560 	.word	0x20000560
 8004bd8:	20000608 	.word	0x20000608

08004bdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f103 0208 	add.w	r2, r3, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f103 0208 	add.w	r2, r3, #8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f103 0208 	add.w	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d103      	bne.n	8004c9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e00c      	b.n	8004cb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e002      	b.n	8004cac <vListInsert+0x2e>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d2f6      	bcs.n	8004ca6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6892      	ldr	r2, [r2, #8]
 8004d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6852      	ldr	r2, [r2, #4]
 8004d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d103      	bne.n	8004d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <xQueueGenericReset+0x2c>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60bb      	str	r3, [r7, #8]
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d70:	f002 fab2 	bl	80072d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7c:	68f9      	ldr	r1, [r7, #12]
 8004d7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da0:	3b01      	subs	r3, #1
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	441a      	add	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	22ff      	movs	r2, #255	@ 0xff
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	22ff      	movs	r2, #255	@ 0xff
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d114      	bne.n	8004df0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01a      	beq.n	8004e04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3310      	adds	r3, #16
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 f942 	bl	800605c <xTaskRemoveFromEventList>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d012      	beq.n	8004e04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dde:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <xQueueGenericReset+0xd0>)
 8004de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	e009      	b.n	8004e04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3310      	adds	r3, #16
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fef1 	bl	8004bdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3324      	adds	r3, #36	@ 0x24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff feec 	bl	8004bdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e04:	f002 fa9a 	bl	800733c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e08:	2301      	movs	r3, #1
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08e      	sub	sp, #56	@ 0x38
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <xQueueGenericCreateStatic+0x56>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <xQueueGenericCreateStatic+0x5a>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <xQueueGenericCreateStatic+0x5c>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10b      	bne.n	8004e90 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	623b      	str	r3, [r7, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	e7fd      	b.n	8004e8c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <xQueueGenericCreateStatic+0x84>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <xQueueGenericCreateStatic+0x88>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <xQueueGenericCreateStatic+0x8a>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	61fb      	str	r3, [r7, #28]
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	e7fd      	b.n	8004eba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ebe:	2350      	movs	r3, #80	@ 0x50
 8004ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b50      	cmp	r3, #80	@ 0x50
 8004ec6:	d00b      	beq.n	8004ee0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	61bb      	str	r3, [r7, #24]
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ee0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ef4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f805 	bl	8004f12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3730      	adds	r7, #48	@ 0x30
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e002      	b.n	8004f34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f40:	2101      	movs	r1, #1
 8004f42:	69b8      	ldr	r0, [r7, #24]
 8004f44:	f7ff fefe 	bl	8004d44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08e      	sub	sp, #56	@ 0x38
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f66:	2300      	movs	r3, #0
 8004f68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <xQueueGenericSend+0x34>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <xQueueGenericSend+0x42>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <xQueueGenericSend+0x46>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <xQueueGenericSend+0x48>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <xQueueGenericSend+0x64>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
 8004fba:	e7fd      	b.n	8004fb8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d103      	bne.n	8004fca <xQueueGenericSend+0x72>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <xQueueGenericSend+0x76>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <xQueueGenericSend+0x78>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <xQueueGenericSend+0x94>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	623b      	str	r3, [r7, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fec:	f001 f9fc 	bl	80063e8 <xTaskGetSchedulerState>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <xQueueGenericSend+0xa4>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <xQueueGenericSend+0xa8>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <xQueueGenericSend+0xaa>
 8005000:	2300      	movs	r3, #0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <xQueueGenericSend+0xc6>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	61fb      	str	r3, [r7, #28]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800501e:	f002 f95b 	bl	80072d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	429a      	cmp	r2, r3
 800502c:	d302      	bcc.n	8005034 <xQueueGenericSend+0xdc>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d129      	bne.n	8005088 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800503a:	f000 fa0f 	bl	800545c <prvCopyDataToQueue>
 800503e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d010      	beq.n	800506a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	3324      	adds	r3, #36	@ 0x24
 800504c:	4618      	mov	r0, r3
 800504e:	f001 f805 	bl	800605c <xTaskRemoveFromEventList>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d013      	beq.n	8005080 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005058:	4b3f      	ldr	r3, [pc, #252]	@ (8005158 <xQueueGenericSend+0x200>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	e00a      	b.n	8005080 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800506a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005070:	4b39      	ldr	r3, [pc, #228]	@ (8005158 <xQueueGenericSend+0x200>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005080:	f002 f95c 	bl	800733c <vPortExitCritical>
				return pdPASS;
 8005084:	2301      	movs	r3, #1
 8005086:	e063      	b.n	8005150 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800508e:	f002 f955 	bl	800733c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005092:	2300      	movs	r3, #0
 8005094:	e05c      	b.n	8005150 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f83f 	bl	8006124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050aa:	f002 f947 	bl	800733c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ae:	f000 fda7 	bl	8005c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050b2:	f002 f911 	bl	80072d8 <vPortEnterCritical>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050bc:	b25b      	sxtb	r3, r3
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d103      	bne.n	80050cc <xQueueGenericSend+0x174>
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d103      	bne.n	80050e2 <xQueueGenericSend+0x18a>
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050e2:	f002 f92b 	bl	800733c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050e6:	1d3a      	adds	r2, r7, #4
 80050e8:	f107 0314 	add.w	r3, r7, #20
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 f82e 	bl	8006150 <xTaskCheckForTimeOut>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d124      	bne.n	8005144 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050fc:	f000 faa6 	bl	800564c <prvIsQueueFull>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d018      	beq.n	8005138 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	3310      	adds	r3, #16
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4611      	mov	r1, r2
 800510e:	4618      	mov	r0, r3
 8005110:	f000 ff52 	bl	8005fb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005116:	f000 fa31 	bl	800557c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800511a:	f000 fd7f 	bl	8005c1c <xTaskResumeAll>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	f47f af7c 	bne.w	800501e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005126:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <xQueueGenericSend+0x200>)
 8005128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	e772      	b.n	800501e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800513a:	f000 fa1f 	bl	800557c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800513e:	f000 fd6d 	bl	8005c1c <xTaskResumeAll>
 8005142:	e76c      	b.n	800501e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005146:	f000 fa19 	bl	800557c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800514a:	f000 fd67 	bl	8005c1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800514e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005150:	4618      	mov	r0, r3
 8005152:	3738      	adds	r7, #56	@ 0x38
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b090      	sub	sp, #64	@ 0x40
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005186:	bf00      	nop
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <xQueueGenericSendFromISR+0x3e>
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <xQueueGenericSendFromISR+0x42>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <xQueueGenericSendFromISR+0x44>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d103      	bne.n	80051ca <xQueueGenericSendFromISR+0x6e>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <xQueueGenericSendFromISR+0x72>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <xQueueGenericSendFromISR+0x74>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	623b      	str	r3, [r7, #32]
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ec:	f002 f954 	bl	8007498 <vPortValidateInterruptPriority>
	__asm volatile
 80051f0:	f3ef 8211 	mrs	r2, BASEPRI
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	61fa      	str	r2, [r7, #28]
 8005206:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005208:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800520c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <xQueueGenericSendFromISR+0xc2>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d12f      	bne.n	800527e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005224:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005234:	f000 f912 	bl	800545c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005238:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d112      	bne.n	8005268 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d016      	beq.n	8005278 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	3324      	adds	r3, #36	@ 0x24
 800524e:	4618      	mov	r0, r3
 8005250:	f000 ff04 	bl	800605c <xTaskRemoveFromEventList>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e007      	b.n	8005278 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005268:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800526c:	3301      	adds	r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	b25a      	sxtb	r2, r3
 8005272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005278:	2301      	movs	r3, #1
 800527a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800527c:	e001      	b.n	8005282 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800527e:	2300      	movs	r3, #0
 8005280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f383 8811 	msr	BASEPRI, r3
}
 800528c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800528e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005290:	4618      	mov	r0, r3
 8005292:	3740      	adds	r7, #64	@ 0x40
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	@ 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <xQueueReceive+0x32>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	623b      	str	r3, [r7, #32]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <xQueueReceive+0x40>
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <xQueueReceive+0x44>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <xQueueReceive+0x46>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <xQueueReceive+0x62>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	61fb      	str	r3, [r7, #28]
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052fa:	f001 f875 	bl	80063e8 <xTaskGetSchedulerState>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <xQueueReceive+0x72>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <xQueueReceive+0x76>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueReceive+0x78>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <xQueueReceive+0x94>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	61bb      	str	r3, [r7, #24]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800532c:	f001 ffd4 	bl	80072d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01f      	beq.n	800537c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005340:	f000 f8f6 	bl	8005530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	1e5a      	subs	r2, r3, #1
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00f      	beq.n	8005374 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	3310      	adds	r3, #16
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fe7f 	bl	800605c <xTaskRemoveFromEventList>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005364:	4b3c      	ldr	r3, [pc, #240]	@ (8005458 <xQueueReceive+0x1c0>)
 8005366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005374:	f001 ffe2 	bl	800733c <vPortExitCritical>
				return pdPASS;
 8005378:	2301      	movs	r3, #1
 800537a:	e069      	b.n	8005450 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005382:	f001 ffdb 	bl	800733c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005386:	2300      	movs	r3, #0
 8005388:	e062      	b.n	8005450 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005390:	f107 0310 	add.w	r3, r7, #16
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fec5 	bl	8006124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800539e:	f001 ffcd 	bl	800733c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053a2:	f000 fc2d 	bl	8005c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053a6:	f001 ff97 	bl	80072d8 <vPortEnterCritical>
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053b0:	b25b      	sxtb	r3, r3
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d103      	bne.n	80053c0 <xQueueReceive+0x128>
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053c6:	b25b      	sxtb	r3, r3
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d103      	bne.n	80053d6 <xQueueReceive+0x13e>
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053d6:	f001 ffb1 	bl	800733c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053da:	1d3a      	adds	r2, r7, #4
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 feb4 	bl	8006150 <xTaskCheckForTimeOut>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d123      	bne.n	8005436 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053f0:	f000 f916 	bl	8005620 <prvIsQueueEmpty>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	3324      	adds	r3, #36	@ 0x24
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fdd8 	bl	8005fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540a:	f000 f8b7 	bl	800557c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800540e:	f000 fc05 	bl	8005c1c <xTaskResumeAll>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d189      	bne.n	800532c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005418:	4b0f      	ldr	r3, [pc, #60]	@ (8005458 <xQueueReceive+0x1c0>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	e780      	b.n	800532c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800542a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800542c:	f000 f8a6 	bl	800557c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005430:	f000 fbf4 	bl	8005c1c <xTaskResumeAll>
 8005434:	e77a      	b.n	800532c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005438:	f000 f8a0 	bl	800557c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800543c:	f000 fbee 	bl	8005c1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005442:	f000 f8ed 	bl	8005620 <prvIsQueueEmpty>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	f43f af6f 	beq.w	800532c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800544e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005450:	4618      	mov	r0, r3
 8005452:	3730      	adds	r7, #48	@ 0x30
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10d      	bne.n	8005496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d14d      	bne.n	800551e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ffcc 	bl	8006424 <xTaskPriorityDisinherit>
 800548c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	e043      	b.n	800551e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d119      	bne.n	80054d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6858      	ldr	r0, [r3, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	461a      	mov	r2, r3
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	f002 fe9e 	bl	80081e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d32b      	bcc.n	800551e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	e026      	b.n	800551e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68d8      	ldr	r0, [r3, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	461a      	mov	r2, r3
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	f002 fe84 	bl	80081e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	425b      	negs	r3, r3
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d207      	bcs.n	800550c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	425b      	negs	r3, r3
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d105      	bne.n	800551e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	3b01      	subs	r3, #1
 800551c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005526:	697b      	ldr	r3, [r7, #20]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d018      	beq.n	8005574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	441a      	add	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	429a      	cmp	r2, r3
 800555a:	d303      	bcc.n	8005564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68d9      	ldr	r1, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	461a      	mov	r2, r3
 800556e:	6838      	ldr	r0, [r7, #0]
 8005570:	f002 fe3a 	bl	80081e8 <memcpy>
	}
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005584:	f001 fea8 	bl	80072d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800558e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005590:	e011      	b.n	80055b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d012      	beq.n	80055c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3324      	adds	r3, #36	@ 0x24
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fd5c 	bl	800605c <xTaskRemoveFromEventList>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055aa:	f000 fe35 	bl	8006218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	dce9      	bgt.n	8005592 <prvUnlockQueue+0x16>
 80055be:	e000      	b.n	80055c2 <prvUnlockQueue+0x46>
					break;
 80055c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	22ff      	movs	r2, #255	@ 0xff
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055ca:	f001 feb7 	bl	800733c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055ce:	f001 fe83 	bl	80072d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055da:	e011      	b.n	8005600 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d012      	beq.n	800560a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3310      	adds	r3, #16
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fd37 	bl	800605c <xTaskRemoveFromEventList>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055f4:	f000 fe10 	bl	8006218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005604:	2b00      	cmp	r3, #0
 8005606:	dce9      	bgt.n	80055dc <prvUnlockQueue+0x60>
 8005608:	e000      	b.n	800560c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800560a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	22ff      	movs	r2, #255	@ 0xff
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005614:	f001 fe92 	bl	800733c <vPortExitCritical>
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005628:	f001 fe56 	bl	80072d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e001      	b.n	800563e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800563e:	f001 fe7d 	bl	800733c <vPortExitCritical>

	return xReturn;
 8005642:	68fb      	ldr	r3, [r7, #12]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005654:	f001 fe40 	bl	80072d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005660:	429a      	cmp	r2, r3
 8005662:	d102      	bne.n	800566a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e001      	b.n	800566e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800566e:	f001 fe65 	bl	800733c <vPortExitCritical>

	return xReturn;
 8005672:	68fb      	ldr	r3, [r7, #12]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e014      	b.n	80056b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800568c:	4a0f      	ldr	r2, [pc, #60]	@ (80056cc <vQueueAddToRegistry+0x50>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005698:	490c      	ldr	r1, [pc, #48]	@ (80056cc <vQueueAddToRegistry+0x50>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056a2:	4a0a      	ldr	r2, [pc, #40]	@ (80056cc <vQueueAddToRegistry+0x50>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4413      	add	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056ae:	e006      	b.n	80056be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b07      	cmp	r3, #7
 80056ba:	d9e7      	bls.n	800568c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000a08 	.word	0x20000a08

080056d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056e0:	f001 fdfa 	bl	80072d8 <vPortEnterCritical>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056ea:	b25b      	sxtb	r3, r3
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d103      	bne.n	80056fa <vQueueWaitForMessageRestricted+0x2a>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005700:	b25b      	sxtb	r3, r3
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d103      	bne.n	8005710 <vQueueWaitForMessageRestricted+0x40>
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005710:	f001 fe14 	bl	800733c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	3324      	adds	r3, #36	@ 0x24
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fc6d 	bl	8006004 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f7ff ff26 	bl	800557c <prvUnlockQueue>
	}
 8005730:	bf00      	nop
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	@ 0x38
 800573c:	af04      	add	r7, sp, #16
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <xTaskCreateStatic+0x2c>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	623b      	str	r3, [r7, #32]
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <xTaskCreateStatic+0x4a>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	61fb      	str	r3, [r7, #28]
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005782:	23a8      	movs	r3, #168	@ 0xa8
 8005784:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2ba8      	cmp	r3, #168	@ 0xa8
 800578a:	d00b      	beq.n	80057a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	61bb      	str	r3, [r7, #24]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01e      	beq.n	80057ea <xTaskCreateStatic+0xb2>
 80057ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01b      	beq.n	80057ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057c4:	2300      	movs	r3, #0
 80057c6:	9303      	str	r3, [sp, #12]
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	9302      	str	r3, [sp, #8]
 80057cc:	f107 0314 	add.w	r3, r7, #20
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f851 	bl	8005884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057e4:	f000 f8f6 	bl	80059d4 <prvAddNewTaskToReadyList>
 80057e8:	e001      	b.n	80057ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057ee:	697b      	ldr	r3, [r7, #20]
	}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	@ 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	@ 0x30
 80057fc:	af04      	add	r7, sp, #16
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fe85 	bl	800751c <pvPortMalloc>
 8005812:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800581a:	20a8      	movs	r0, #168	@ 0xa8
 800581c:	f001 fe7e 	bl	800751c <pvPortMalloc>
 8005820:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	631a      	str	r2, [r3, #48]	@ 0x30
 800582e:	e005      	b.n	800583c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005830:	6978      	ldr	r0, [r7, #20]
 8005832:	f001 ff41 	bl	80076b8 <vPortFree>
 8005836:	e001      	b.n	800583c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d017      	beq.n	8005872 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	2300      	movs	r3, #0
 800584e:	9303      	str	r3, [sp, #12]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f80f 	bl	8005884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005866:	69f8      	ldr	r0, [r7, #28]
 8005868:	f000 f8b4 	bl	80059d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800586c:	2301      	movs	r3, #1
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e002      	b.n	8005878 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295
 8005876:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005878:	69bb      	ldr	r3, [r7, #24]
	}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	461a      	mov	r2, r3
 800589c:	21a5      	movs	r1, #165	@ 0xa5
 800589e:	f002 fb98 	bl	8007fd2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ac:	3b01      	subs	r3, #1
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <prvInitialiseNewTask+0x5a>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	617b      	str	r3, [r7, #20]
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01f      	beq.n	8005924 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e012      	b.n	8005910 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	7819      	ldrb	r1, [r3, #0]
 80058f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	3334      	adds	r3, #52	@ 0x34
 80058fa:	460a      	mov	r2, r1
 80058fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d006      	beq.n	8005918 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	3301      	adds	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b0f      	cmp	r3, #15
 8005914:	d9e9      	bls.n	80058ea <prvInitialiseNewTask+0x66>
 8005916:	e000      	b.n	800591a <prvInitialiseNewTask+0x96>
			{
				break;
 8005918:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005922:	e003      	b.n	800592c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	2b37      	cmp	r3, #55	@ 0x37
 8005930:	d901      	bls.n	8005936 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005932:	2337      	movs	r3, #55	@ 0x37
 8005934:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800593a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005940:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	2200      	movs	r2, #0
 8005946:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff f965 	bl	8004c1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	3318      	adds	r3, #24
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff f960 	bl	8004c1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005960:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2200      	movs	r2, #0
 800597e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	3354      	adds	r3, #84	@ 0x54
 8005986:	224c      	movs	r2, #76	@ 0x4c
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f002 fb21 	bl	8007fd2 <memset>
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	4a0d      	ldr	r2, [pc, #52]	@ (80059c8 <prvInitialiseNewTask+0x144>)
 8005994:	659a      	str	r2, [r3, #88]	@ 0x58
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	4a0c      	ldr	r2, [pc, #48]	@ (80059cc <prvInitialiseNewTask+0x148>)
 800599a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	4a0c      	ldr	r2, [pc, #48]	@ (80059d0 <prvInitialiseNewTask+0x14c>)
 80059a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	69b8      	ldr	r0, [r7, #24]
 80059a8:	f001 fb62 	bl	8007070 <pxPortInitialiseStack>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059be:	bf00      	nop
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20004ca4 	.word	0x20004ca4
 80059cc:	20004d0c 	.word	0x20004d0c
 80059d0:	20004d74 	.word	0x20004d74

080059d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059dc:	f001 fc7c 	bl	80072d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a98 <prvAddNewTaskToReadyList+0xc4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a98 <prvAddNewTaskToReadyList+0xc4>)
 80059e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059ea:	4b2c      	ldr	r3, [pc, #176]	@ (8005a9c <prvAddNewTaskToReadyList+0xc8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059f2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a9c <prvAddNewTaskToReadyList+0xc8>)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059f8:	4b27      	ldr	r3, [pc, #156]	@ (8005a98 <prvAddNewTaskToReadyList+0xc4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d110      	bne.n	8005a22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a00:	f000 fc2e 	bl	8006260 <prvInitialiseTaskLists>
 8005a04:	e00d      	b.n	8005a22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a06:	4b26      	ldr	r3, [pc, #152]	@ (8005aa0 <prvAddNewTaskToReadyList+0xcc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a0e:	4b23      	ldr	r3, [pc, #140]	@ (8005a9c <prvAddNewTaskToReadyList+0xc8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d802      	bhi.n	8005a22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a9c <prvAddNewTaskToReadyList+0xc8>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a22:	4b20      	ldr	r3, [pc, #128]	@ (8005aa4 <prvAddNewTaskToReadyList+0xd0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa4 <prvAddNewTaskToReadyList+0xd0>)
 8005a2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <prvAddNewTaskToReadyList+0xd0>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a38:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa8 <prvAddNewTaskToReadyList+0xd4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d903      	bls.n	8005a48 <prvAddNewTaskToReadyList+0x74>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	4a18      	ldr	r2, [pc, #96]	@ (8005aa8 <prvAddNewTaskToReadyList+0xd4>)
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4a15      	ldr	r2, [pc, #84]	@ (8005aac <prvAddNewTaskToReadyList+0xd8>)
 8005a56:	441a      	add	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f7ff f8e9 	bl	8004c36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a64:	f001 fc6a 	bl	800733c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a68:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <prvAddNewTaskToReadyList+0xcc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00e      	beq.n	8005a8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <prvAddNewTaskToReadyList+0xc8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d207      	bcs.n	8005a8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab0 <prvAddNewTaskToReadyList+0xdc>)
 8005a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000f1c 	.word	0x20000f1c
 8005a9c:	20000a48 	.word	0x20000a48
 8005aa0:	20000f28 	.word	0x20000f28
 8005aa4:	20000f38 	.word	0x20000f38
 8005aa8:	20000f24 	.word	0x20000f24
 8005aac:	20000a4c 	.word	0x20000a4c
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d018      	beq.n	8005af8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ac6:	4b14      	ldr	r3, [pc, #80]	@ (8005b18 <vTaskDelay+0x64>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <vTaskDelay+0x32>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60bb      	str	r3, [r7, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ae6:	f000 f88b 	bl	8005c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aea:	2100      	movs	r1, #0
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 ff11 	bl	8006914 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005af2:	f000 f893 	bl	8005c1c <xTaskResumeAll>
 8005af6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005afe:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <vTaskDelay+0x68>)
 8005b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000f44 	.word	0x20000f44
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	@ 0x28
 8005b24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b2e:	463a      	mov	r2, r7
 8005b30:	1d39      	adds	r1, r7, #4
 8005b32:	f107 0308 	add.w	r3, r7, #8
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff f81c 	bl	8004b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	4924      	ldr	r1, [pc, #144]	@ (8005be0 <vTaskStartScheduler+0xc0>)
 8005b50:	4824      	ldr	r0, [pc, #144]	@ (8005be4 <vTaskStartScheduler+0xc4>)
 8005b52:	f7ff fdf1 	bl	8005738 <xTaskCreateStatic>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4a23      	ldr	r2, [pc, #140]	@ (8005be8 <vTaskStartScheduler+0xc8>)
 8005b5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b5c:	4b22      	ldr	r3, [pc, #136]	@ (8005be8 <vTaskStartScheduler+0xc8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e001      	b.n	8005b6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d102      	bne.n	8005b7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b74:	f000 ff22 	bl	80069bc <xTimerCreateTimerTask>
 8005b78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d11b      	bne.n	8005bb8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	613b      	str	r3, [r7, #16]
}
 8005b92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b94:	4b15      	ldr	r3, [pc, #84]	@ (8005bec <vTaskStartScheduler+0xcc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3354      	adds	r3, #84	@ 0x54
 8005b9a:	4a15      	ldr	r2, [pc, #84]	@ (8005bf0 <vTaskStartScheduler+0xd0>)
 8005b9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b9e:	4b15      	ldr	r3, [pc, #84]	@ (8005bf4 <vTaskStartScheduler+0xd4>)
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <vTaskStartScheduler+0xd8>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bac:	4b13      	ldr	r3, [pc, #76]	@ (8005bfc <vTaskStartScheduler+0xdc>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb2:	f001 faed 	bl	8007190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb6:	e00f      	b.n	8005bd8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d10b      	bne.n	8005bd8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <vTaskStartScheduler+0xb4>
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08008de0 	.word	0x08008de0
 8005be4:	08006231 	.word	0x08006231
 8005be8:	20000f40 	.word	0x20000f40
 8005bec:	20000a48 	.word	0x20000a48
 8005bf0:	20000030 	.word	0x20000030
 8005bf4:	20000f3c 	.word	0x20000f3c
 8005bf8:	20000f28 	.word	0x20000f28
 8005bfc:	20000f20 	.word	0x20000f20

08005c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c04:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <vTaskSuspendAll+0x18>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	4a03      	ldr	r2, [pc, #12]	@ (8005c18 <vTaskSuspendAll+0x18>)
 8005c0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c0e:	bf00      	nop
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	20000f44 	.word	0x20000f44

08005c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c2a:	4b42      	ldr	r3, [pc, #264]	@ (8005d34 <xTaskResumeAll+0x118>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <xTaskResumeAll+0x2e>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	603b      	str	r3, [r7, #0]
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	e7fd      	b.n	8005c46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c4a:	f001 fb45 	bl	80072d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c4e:	4b39      	ldr	r3, [pc, #228]	@ (8005d34 <xTaskResumeAll+0x118>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	4a37      	ldr	r2, [pc, #220]	@ (8005d34 <xTaskResumeAll+0x118>)
 8005c56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c58:	4b36      	ldr	r3, [pc, #216]	@ (8005d34 <xTaskResumeAll+0x118>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d162      	bne.n	8005d26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c60:	4b35      	ldr	r3, [pc, #212]	@ (8005d38 <xTaskResumeAll+0x11c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05e      	beq.n	8005d26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c68:	e02f      	b.n	8005cca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6a:	4b34      	ldr	r3, [pc, #208]	@ (8005d3c <xTaskResumeAll+0x120>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3318      	adds	r3, #24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff f83a 	bl	8004cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff f835 	bl	8004cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005d40 <xTaskResumeAll+0x124>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d903      	bls.n	8005c9a <xTaskResumeAll+0x7e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c96:	4a2a      	ldr	r2, [pc, #168]	@ (8005d40 <xTaskResumeAll+0x124>)
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a27      	ldr	r2, [pc, #156]	@ (8005d44 <xTaskResumeAll+0x128>)
 8005ca8:	441a      	add	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7fe ffc0 	bl	8004c36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cba:	4b23      	ldr	r3, [pc, #140]	@ (8005d48 <xTaskResumeAll+0x12c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d302      	bcc.n	8005cca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005cc4:	4b21      	ldr	r3, [pc, #132]	@ (8005d4c <xTaskResumeAll+0x130>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cca:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <xTaskResumeAll+0x120>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1cb      	bne.n	8005c6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cd8:	f000 fb66 	bl	80063a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8005d50 <xTaskResumeAll+0x134>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ce8:	f000 f846 	bl	8005d78 <xTaskIncrementTick>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005cf2:	4b16      	ldr	r3, [pc, #88]	@ (8005d4c <xTaskResumeAll+0x130>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f1      	bne.n	8005ce8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005d04:	4b12      	ldr	r3, [pc, #72]	@ (8005d50 <xTaskResumeAll+0x134>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d0a:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <xTaskResumeAll+0x130>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d16:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <xTaskResumeAll+0x138>)
 8005d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d26:	f001 fb09 	bl	800733c <vPortExitCritical>

	return xAlreadyYielded;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000f44 	.word	0x20000f44
 8005d38:	20000f1c 	.word	0x20000f1c
 8005d3c:	20000edc 	.word	0x20000edc
 8005d40:	20000f24 	.word	0x20000f24
 8005d44:	20000a4c 	.word	0x20000a4c
 8005d48:	20000a48 	.word	0x20000a48
 8005d4c:	20000f30 	.word	0x20000f30
 8005d50:	20000f2c 	.word	0x20000f2c
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d5e:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <xTaskGetTickCount+0x1c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d64:	687b      	ldr	r3, [r7, #4]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000f20 	.word	0x20000f20

08005d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d82:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec0 <xTaskIncrementTick+0x148>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 8090 	bne.w	8005eac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec4 <xTaskIncrementTick+0x14c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d94:	4a4b      	ldr	r2, [pc, #300]	@ (8005ec4 <xTaskIncrementTick+0x14c>)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d121      	bne.n	8005de4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005da0:	4b49      	ldr	r3, [pc, #292]	@ (8005ec8 <xTaskIncrementTick+0x150>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	603b      	str	r3, [r7, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	e7fd      	b.n	8005dbe <xTaskIncrementTick+0x46>
 8005dc2:	4b41      	ldr	r3, [pc, #260]	@ (8005ec8 <xTaskIncrementTick+0x150>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	4b40      	ldr	r3, [pc, #256]	@ (8005ecc <xTaskIncrementTick+0x154>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ec8 <xTaskIncrementTick+0x150>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8005ecc <xTaskIncrementTick+0x154>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed0 <xTaskIncrementTick+0x158>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ed0 <xTaskIncrementTick+0x158>)
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	f000 fae2 	bl	80063a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005de4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed4 <xTaskIncrementTick+0x15c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d349      	bcc.n	8005e82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dee:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <xTaskIncrementTick+0x150>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df8:	4b36      	ldr	r3, [pc, #216]	@ (8005ed4 <xTaskIncrementTick+0x15c>)
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	601a      	str	r2, [r3, #0]
					break;
 8005e00:	e03f      	b.n	8005e82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e02:	4b31      	ldr	r3, [pc, #196]	@ (8005ec8 <xTaskIncrementTick+0x150>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d203      	bcs.n	8005e22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed4 <xTaskIncrementTick+0x15c>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e20:	e02f      	b.n	8005e82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe ff62 	bl	8004cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	3318      	adds	r3, #24
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe ff59 	bl	8004cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e42:	4b25      	ldr	r3, [pc, #148]	@ (8005ed8 <xTaskIncrementTick+0x160>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d903      	bls.n	8005e52 <xTaskIncrementTick+0xda>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4e:	4a22      	ldr	r2, [pc, #136]	@ (8005ed8 <xTaskIncrementTick+0x160>)
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005edc <xTaskIncrementTick+0x164>)
 8005e60:	441a      	add	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7fe fee4 	bl	8004c36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <xTaskIncrementTick+0x168>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3b8      	bcc.n	8005dee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e80:	e7b5      	b.n	8005dee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e82:	4b17      	ldr	r3, [pc, #92]	@ (8005ee0 <xTaskIncrementTick+0x168>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e88:	4914      	ldr	r1, [pc, #80]	@ (8005edc <xTaskIncrementTick+0x164>)
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d901      	bls.n	8005e9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ee4 <xTaskIncrementTick+0x16c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e004      	b.n	8005eb6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005eac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <xTaskIncrementTick+0x170>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee8 <xTaskIncrementTick+0x170>)
 8005eb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eb6:	697b      	ldr	r3, [r7, #20]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000f44 	.word	0x20000f44
 8005ec4:	20000f20 	.word	0x20000f20
 8005ec8:	20000ed4 	.word	0x20000ed4
 8005ecc:	20000ed8 	.word	0x20000ed8
 8005ed0:	20000f34 	.word	0x20000f34
 8005ed4:	20000f3c 	.word	0x20000f3c
 8005ed8:	20000f24 	.word	0x20000f24
 8005edc:	20000a4c 	.word	0x20000a4c
 8005ee0:	20000a48 	.word	0x20000a48
 8005ee4:	20000f30 	.word	0x20000f30
 8005ee8:	20000f2c 	.word	0x20000f2c

08005eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa0 <vTaskSwitchContext+0xb4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005efa:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa4 <vTaskSwitchContext+0xb8>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f00:	e047      	b.n	8005f92 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005f02:	4b28      	ldr	r3, [pc, #160]	@ (8005fa4 <vTaskSwitchContext+0xb8>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f08:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <vTaskSwitchContext+0xbc>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e011      	b.n	8005f34 <vTaskSwitchContext+0x48>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <vTaskSwitchContext+0x42>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	607b      	str	r3, [r7, #4]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <vTaskSwitchContext+0x3e>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	491d      	ldr	r1, [pc, #116]	@ (8005fac <vTaskSwitchContext+0xc0>)
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0e3      	beq.n	8005f10 <vTaskSwitchContext+0x24>
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <vTaskSwitchContext+0xc0>)
 8005f54:	4413      	add	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d104      	bne.n	8005f78 <vTaskSwitchContext+0x8c>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb0 <vTaskSwitchContext+0xc4>)
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4a09      	ldr	r2, [pc, #36]	@ (8005fa8 <vTaskSwitchContext+0xbc>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f88:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <vTaskSwitchContext+0xc4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3354      	adds	r3, #84	@ 0x54
 8005f8e:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <vTaskSwitchContext+0xc8>)
 8005f90:	6013      	str	r3, [r2, #0]
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000f44 	.word	0x20000f44
 8005fa4:	20000f30 	.word	0x20000f30
 8005fa8:	20000f24 	.word	0x20000f24
 8005fac:	20000a4c 	.word	0x20000a4c
 8005fb0:	20000a48 	.word	0x20000a48
 8005fb4:	20000030 	.word	0x20000030

08005fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60fb      	str	r3, [r7, #12]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fe0:	4b07      	ldr	r3, [pc, #28]	@ (8006000 <vTaskPlaceOnEventList+0x48>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3318      	adds	r3, #24
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fe fe48 	bl	8004c7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fee:	2101      	movs	r1, #1
 8005ff0:	6838      	ldr	r0, [r7, #0]
 8005ff2:	f000 fc8f 	bl	8006914 <prvAddCurrentTaskToDelayedList>
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000a48 	.word	0x20000a48

08006004 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	617b      	str	r3, [r7, #20]
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800602e:	4b0a      	ldr	r3, [pc, #40]	@ (8006058 <vTaskPlaceOnEventListRestricted+0x54>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3318      	adds	r3, #24
 8006034:	4619      	mov	r1, r3
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7fe fdfd 	bl	8004c36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006042:	f04f 33ff 	mov.w	r3, #4294967295
 8006046:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	68b8      	ldr	r0, [r7, #8]
 800604c:	f000 fc62 	bl	8006914 <prvAddCurrentTaskToDelayedList>
	}
 8006050:	bf00      	nop
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000a48 	.word	0x20000a48

0800605c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60fb      	str	r3, [r7, #12]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3318      	adds	r3, #24
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fe2e 	bl	8004cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006094:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <xTaskRemoveFromEventList+0xb0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11d      	bne.n	80060d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3304      	adds	r3, #4
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fe25 	bl	8004cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060aa:	4b19      	ldr	r3, [pc, #100]	@ (8006110 <xTaskRemoveFromEventList+0xb4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d903      	bls.n	80060ba <xTaskRemoveFromEventList+0x5e>
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	4a16      	ldr	r2, [pc, #88]	@ (8006110 <xTaskRemoveFromEventList+0xb4>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a13      	ldr	r2, [pc, #76]	@ (8006114 <xTaskRemoveFromEventList+0xb8>)
 80060c8:	441a      	add	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7fe fdb0 	bl	8004c36 <vListInsertEnd>
 80060d6:	e005      	b.n	80060e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	3318      	adds	r3, #24
 80060dc:	4619      	mov	r1, r3
 80060de:	480e      	ldr	r0, [pc, #56]	@ (8006118 <xTaskRemoveFromEventList+0xbc>)
 80060e0:	f7fe fda9 	bl	8004c36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e8:	4b0c      	ldr	r3, [pc, #48]	@ (800611c <xTaskRemoveFromEventList+0xc0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d905      	bls.n	80060fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006120 <xTaskRemoveFromEventList+0xc4>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	e001      	b.n	8006102 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000f44 	.word	0x20000f44
 8006110:	20000f24 	.word	0x20000f24
 8006114:	20000a4c 	.word	0x20000a4c
 8006118:	20000edc 	.word	0x20000edc
 800611c:	20000a48 	.word	0x20000a48
 8006120:	20000f30 	.word	0x20000f30

08006124 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800612c:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <vTaskInternalSetTimeOutState+0x24>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006134:	4b05      	ldr	r3, [pc, #20]	@ (800614c <vTaskInternalSetTimeOutState+0x28>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000f34 	.word	0x20000f34
 800614c:	20000f20 	.word	0x20000f20

08006150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	613b      	str	r3, [r7, #16]
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	e7fd      	b.n	8006174 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60fb      	str	r3, [r7, #12]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006196:	f001 f89f 	bl	80072d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800619a:	4b1d      	ldr	r3, [pc, #116]	@ (8006210 <xTaskCheckForTimeOut+0xc0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d102      	bne.n	80061ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	e023      	b.n	8006202 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <xTaskCheckForTimeOut+0xc4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d007      	beq.n	80061d6 <xTaskCheckForTimeOut+0x86>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d302      	bcc.n	80061d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	e015      	b.n	8006202 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d20b      	bcs.n	80061f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ff99 	bl	8006124 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	e004      	b.n	8006202 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061fe:	2301      	movs	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006202:	f001 f89b 	bl	800733c <vPortExitCritical>

	return xReturn;
 8006206:	69fb      	ldr	r3, [r7, #28]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3720      	adds	r7, #32
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000f20 	.word	0x20000f20
 8006214:	20000f34 	.word	0x20000f34

08006218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800621c:	4b03      	ldr	r3, [pc, #12]	@ (800622c <vTaskMissedYield+0x14>)
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	20000f30 	.word	0x20000f30

08006230 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006238:	f000 f852 	bl	80062e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <prvIdleTask+0x28>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d9f9      	bls.n	8006238 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006244:	4b05      	ldr	r3, [pc, #20]	@ (800625c <prvIdleTask+0x2c>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006254:	e7f0      	b.n	8006238 <prvIdleTask+0x8>
 8006256:	bf00      	nop
 8006258:	20000a4c 	.word	0x20000a4c
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006266:	2300      	movs	r3, #0
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	e00c      	b.n	8006286 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4a12      	ldr	r2, [pc, #72]	@ (80062c0 <prvInitialiseTaskLists+0x60>)
 8006278:	4413      	add	r3, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe fcae 	bl	8004bdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3301      	adds	r3, #1
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b37      	cmp	r3, #55	@ 0x37
 800628a:	d9ef      	bls.n	800626c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800628c:	480d      	ldr	r0, [pc, #52]	@ (80062c4 <prvInitialiseTaskLists+0x64>)
 800628e:	f7fe fca5 	bl	8004bdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006292:	480d      	ldr	r0, [pc, #52]	@ (80062c8 <prvInitialiseTaskLists+0x68>)
 8006294:	f7fe fca2 	bl	8004bdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006298:	480c      	ldr	r0, [pc, #48]	@ (80062cc <prvInitialiseTaskLists+0x6c>)
 800629a:	f7fe fc9f 	bl	8004bdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800629e:	480c      	ldr	r0, [pc, #48]	@ (80062d0 <prvInitialiseTaskLists+0x70>)
 80062a0:	f7fe fc9c 	bl	8004bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062a4:	480b      	ldr	r0, [pc, #44]	@ (80062d4 <prvInitialiseTaskLists+0x74>)
 80062a6:	f7fe fc99 	bl	8004bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062aa:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <prvInitialiseTaskLists+0x78>)
 80062ac:	4a05      	ldr	r2, [pc, #20]	@ (80062c4 <prvInitialiseTaskLists+0x64>)
 80062ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062b0:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <prvInitialiseTaskLists+0x7c>)
 80062b2:	4a05      	ldr	r2, [pc, #20]	@ (80062c8 <prvInitialiseTaskLists+0x68>)
 80062b4:	601a      	str	r2, [r3, #0]
}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000a4c 	.word	0x20000a4c
 80062c4:	20000eac 	.word	0x20000eac
 80062c8:	20000ec0 	.word	0x20000ec0
 80062cc:	20000edc 	.word	0x20000edc
 80062d0:	20000ef0 	.word	0x20000ef0
 80062d4:	20000f08 	.word	0x20000f08
 80062d8:	20000ed4 	.word	0x20000ed4
 80062dc:	20000ed8 	.word	0x20000ed8

080062e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062e6:	e019      	b.n	800631c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062e8:	f000 fff6 	bl	80072d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ec:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <prvCheckTasksWaitingTermination+0x50>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fcf9 	bl	8004cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006334 <prvCheckTasksWaitingTermination+0x54>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3b01      	subs	r3, #1
 8006304:	4a0b      	ldr	r2, [pc, #44]	@ (8006334 <prvCheckTasksWaitingTermination+0x54>)
 8006306:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006308:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <prvCheckTasksWaitingTermination+0x58>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3b01      	subs	r3, #1
 800630e:	4a0a      	ldr	r2, [pc, #40]	@ (8006338 <prvCheckTasksWaitingTermination+0x58>)
 8006310:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006312:	f001 f813 	bl	800733c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f810 	bl	800633c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800631c:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <prvCheckTasksWaitingTermination+0x58>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e1      	bne.n	80062e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000ef0 	.word	0x20000ef0
 8006334:	20000f1c 	.word	0x20000f1c
 8006338:	20000f04 	.word	0x20000f04

0800633c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3354      	adds	r3, #84	@ 0x54
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fe7f 	bl	800804c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f9ab 	bl	80076b8 <vPortFree>
				vPortFree( pxTCB );
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 f9a8 	bl	80076b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006368:	e019      	b.n	800639e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006370:	2b01      	cmp	r3, #1
 8006372:	d103      	bne.n	800637c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f99f 	bl	80076b8 <vPortFree>
	}
 800637a:	e010      	b.n	800639e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006382:	2b02      	cmp	r3, #2
 8006384:	d00b      	beq.n	800639e <prvDeleteTCB+0x62>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	60fb      	str	r3, [r7, #12]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <prvDeleteTCB+0x5e>
	}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ae:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <prvResetNextTaskUnblockTime+0x38>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <prvResetNextTaskUnblockTime+0x3c>)
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295
 80063be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063c0:	e008      	b.n	80063d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b07      	ldr	r3, [pc, #28]	@ (80063e0 <prvResetNextTaskUnblockTime+0x38>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a04      	ldr	r2, [pc, #16]	@ (80063e4 <prvResetNextTaskUnblockTime+0x3c>)
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20000ed4 	.word	0x20000ed4
 80063e4:	20000f3c 	.word	0x20000f3c

080063e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ee:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <xTaskGetSchedulerState+0x34>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063f6:	2301      	movs	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	e008      	b.n	800640e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fc:	4b08      	ldr	r3, [pc, #32]	@ (8006420 <xTaskGetSchedulerState+0x38>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006404:	2302      	movs	r3, #2
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	e001      	b.n	800640e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800640e:	687b      	ldr	r3, [r7, #4]
	}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000f28 	.word	0x20000f28
 8006420:	20000f44 	.word	0x20000f44

08006424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d058      	beq.n	80064ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800643a:	4b2f      	ldr	r3, [pc, #188]	@ (80064f8 <xTaskPriorityDisinherit+0xd4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d00b      	beq.n	800645c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	60fb      	str	r3, [r7, #12]
}
 8006456:	bf00      	nop
 8006458:	bf00      	nop
 800645a:	e7fd      	b.n	8006458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60bb      	str	r3, [r7, #8]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800648e:	429a      	cmp	r2, r3
 8006490:	d02c      	beq.n	80064ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006496:	2b00      	cmp	r3, #0
 8006498:	d128      	bne.n	80064ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3304      	adds	r3, #4
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fc26 	bl	8004cf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <xTaskPriorityDisinherit+0xd8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d903      	bls.n	80064cc <xTaskPriorityDisinherit+0xa8>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <xTaskPriorityDisinherit+0xd8>)
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <xTaskPriorityDisinherit+0xdc>)
 80064da:	441a      	add	r2, r3
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f7fe fba7 	bl	8004c36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064ec:	697b      	ldr	r3, [r7, #20]
	}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000a48 	.word	0x20000a48
 80064fc:	20000f24 	.word	0x20000f24
 8006500:	20000a4c 	.word	0x20000a4c

08006504 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006512:	f000 fee1 	bl	80072d8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006516:	4b29      	ldr	r3, [pc, #164]	@ (80065bc <xTaskNotifyWait+0xb8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d01c      	beq.n	800655e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006524:	4b25      	ldr	r3, [pc, #148]	@ (80065bc <xTaskNotifyWait+0xb8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	43d2      	mvns	r2, r2
 8006530:	400a      	ands	r2, r1
 8006532:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006536:	4b21      	ldr	r3, [pc, #132]	@ (80065bc <xTaskNotifyWait+0xb8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006546:	2101      	movs	r1, #1
 8006548:	6838      	ldr	r0, [r7, #0]
 800654a:	f000 f9e3 	bl	8006914 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800654e:	4b1c      	ldr	r3, [pc, #112]	@ (80065c0 <xTaskNotifyWait+0xbc>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800655e:	f000 feed 	bl	800733c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006562:	f000 feb9 	bl	80072d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800656c:	4b13      	ldr	r3, [pc, #76]	@ (80065bc <xTaskNotifyWait+0xb8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006578:	4b10      	ldr	r3, [pc, #64]	@ (80065bc <xTaskNotifyWait+0xb8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d002      	beq.n	800658c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	e00a      	b.n	80065a2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800658c:	4b0b      	ldr	r3, [pc, #44]	@ (80065bc <xTaskNotifyWait+0xb8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	43d2      	mvns	r2, r2
 8006598:	400a      	ands	r2, r1
 800659a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065a2:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <xTaskNotifyWait+0xb8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80065ac:	f000 fec6 	bl	800733c <vPortExitCritical>

		return xReturn;
 80065b0:	697b      	ldr	r3, [r7, #20]
	}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000a48 	.word	0x20000a48
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08a      	sub	sp, #40	@ 0x28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80065d4:	2301      	movs	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <xTaskGenericNotify+0x32>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61bb      	str	r3, [r7, #24]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80065fa:	f000 fe6d 	bl	80072d8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006614:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	2202      	movs	r2, #2
 800661a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d82e      	bhi.n	8006682 <xTaskGenericNotify+0xbe>
 8006624:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <xTaskGenericNotify+0x68>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	080066a7 	.word	0x080066a7
 8006630:	08006641 	.word	0x08006641
 8006634:	08006653 	.word	0x08006653
 8006638:	08006663 	.word	0x08006663
 800663c:	0800666d 	.word	0x0800666d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	431a      	orrs	r2, r3
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006650:	e02c      	b.n	80066ac <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006660:	e024      	b.n	80066ac <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800666a:	e01f      	b.n	80066ac <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800666c:	7ffb      	ldrb	r3, [r7, #31]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d004      	beq.n	800667c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800667a:	e017      	b.n	80066ac <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800667c:	2300      	movs	r3, #0
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006680:	e014      	b.n	80066ac <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d00d      	beq.n	80066aa <xTaskGenericNotify+0xe6>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	617b      	str	r3, [r7, #20]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <xTaskGenericNotify+0xde>
					break;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <xTaskGenericNotify+0xe8>

					break;
 80066aa:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80066ac:	7ffb      	ldrb	r3, [r7, #31]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d13b      	bne.n	800672a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fb1a 	bl	8004cf0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <xTaskGenericNotify+0x174>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d903      	bls.n	80066d0 <xTaskGenericNotify+0x10c>
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006738 <xTaskGenericNotify+0x174>)
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4a17      	ldr	r2, [pc, #92]	@ (800673c <xTaskGenericNotify+0x178>)
 80066de:	441a      	add	r2, r3
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f7fe faa5 	bl	8004c36 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <xTaskGenericNotify+0x148>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	613b      	str	r3, [r7, #16]
}
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006710:	4b0b      	ldr	r3, [pc, #44]	@ (8006740 <xTaskGenericNotify+0x17c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	429a      	cmp	r2, r3
 8006718:	d907      	bls.n	800672a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800671a:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <xTaskGenericNotify+0x180>)
 800671c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800672a:	f000 fe07 	bl	800733c <vPortExitCritical>

		return xReturn;
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006730:	4618      	mov	r0, r3
 8006732:	3728      	adds	r7, #40	@ 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000f24 	.word	0x20000f24
 800673c:	20000a4c 	.word	0x20000a4c
 8006740:	20000a48 	.word	0x20000a48
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08e      	sub	sp, #56	@ 0x38
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	4613      	mov	r3, r2
 8006756:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006758:	2301      	movs	r3, #1
 800675a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10b      	bne.n	800677a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800677a:	f000 fe8d 	bl	8007498 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8006782:	f3ef 8211 	mrs	r2, BASEPRI
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	623a      	str	r2, [r7, #32]
 8006798:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800679a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800679c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d004      	beq.n	80067ae <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80067b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d82e      	bhi.n	8006824 <xTaskGenericNotifyFromISR+0xdc>
 80067c6:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <xTaskGenericNotifyFromISR+0x84>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	08006849 	.word	0x08006849
 80067d0:	080067e1 	.word	0x080067e1
 80067d4:	080067f3 	.word	0x080067f3
 80067d8:	08006803 	.word	0x08006803
 80067dc:	0800680d 	.word	0x0800680d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	431a      	orrs	r2, r3
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80067f0:	e02d      	b.n	800684e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006800:	e025      	b.n	800684e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800680a:	e020      	b.n	800684e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800680c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006810:	2b02      	cmp	r3, #2
 8006812:	d004      	beq.n	800681e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800681c:	e017      	b.n	800684e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800681e:	2300      	movs	r3, #0
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8006822:	e014      	b.n	800684e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682e:	d00d      	beq.n	800684c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	61bb      	str	r3, [r7, #24]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <xTaskGenericNotifyFromISR+0x106>
					break;
 800684c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800684e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006852:	2b01      	cmp	r3, #1
 8006854:	d147      	bne.n	80068e6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00b      	beq.n	8006876 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	617b      	str	r3, [r7, #20]
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	e7fd      	b.n	8006872 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006876:	4b21      	ldr	r3, [pc, #132]	@ (80068fc <xTaskGenericNotifyFromISR+0x1b4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d11d      	bne.n	80068ba <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	3304      	adds	r3, #4
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fa34 	bl	8004cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688c:	4b1c      	ldr	r3, [pc, #112]	@ (8006900 <xTaskGenericNotifyFromISR+0x1b8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <xTaskGenericNotifyFromISR+0x154>
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	4a19      	ldr	r2, [pc, #100]	@ (8006900 <xTaskGenericNotifyFromISR+0x1b8>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a16      	ldr	r2, [pc, #88]	@ (8006904 <xTaskGenericNotifyFromISR+0x1bc>)
 80068aa:	441a      	add	r2, r3
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe f9bf 	bl	8004c36 <vListInsertEnd>
 80068b8:	e005      	b.n	80068c6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	3318      	adds	r3, #24
 80068be:	4619      	mov	r1, r3
 80068c0:	4811      	ldr	r0, [pc, #68]	@ (8006908 <xTaskGenericNotifyFromISR+0x1c0>)
 80068c2:	f7fe f9b8 	bl	8004c36 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ca:	4b10      	ldr	r3, [pc, #64]	@ (800690c <xTaskGenericNotifyFromISR+0x1c4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d908      	bls.n	80068e6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80068d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80068da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80068e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <xTaskGenericNotifyFromISR+0x1c8>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f383 8811 	msr	BASEPRI, r3
}
 80068f0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80068f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3738      	adds	r7, #56	@ 0x38
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20000f44 	.word	0x20000f44
 8006900:	20000f24 	.word	0x20000f24
 8006904:	20000a4c 	.word	0x20000a4c
 8006908:	20000edc 	.word	0x20000edc
 800690c:	20000a48 	.word	0x20000a48
 8006910:	20000f30 	.word	0x20000f30

08006914 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800691e:	4b21      	ldr	r3, [pc, #132]	@ (80069a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006924:	4b20      	ldr	r3, [pc, #128]	@ (80069a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3304      	adds	r3, #4
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe f9e0 	bl	8004cf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d10a      	bne.n	800694e <prvAddCurrentTaskToDelayedList+0x3a>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800693e:	4b1a      	ldr	r3, [pc, #104]	@ (80069a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4819      	ldr	r0, [pc, #100]	@ (80069ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006948:	f7fe f975 	bl	8004c36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800694c:	e026      	b.n	800699c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006956:	4b14      	ldr	r3, [pc, #80]	@ (80069a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	429a      	cmp	r2, r3
 8006964:	d209      	bcs.n	800697a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006966:	4b12      	ldr	r3, [pc, #72]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4b0f      	ldr	r3, [pc, #60]	@ (80069a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3304      	adds	r3, #4
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f7fe f983 	bl	8004c7e <vListInsert>
}
 8006978:	e010      	b.n	800699c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800697a:	4b0e      	ldr	r3, [pc, #56]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3304      	adds	r3, #4
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f7fe f979 	bl	8004c7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800698c:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	d202      	bcs.n	800699c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006996:	4a08      	ldr	r2, [pc, #32]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	6013      	str	r3, [r2, #0]
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000f20 	.word	0x20000f20
 80069a8:	20000a48 	.word	0x20000a48
 80069ac:	20000f08 	.word	0x20000f08
 80069b0:	20000ed8 	.word	0x20000ed8
 80069b4:	20000ed4 	.word	0x20000ed4
 80069b8:	20000f3c 	.word	0x20000f3c

080069bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069c6:	f000 fb13 	bl	8006ff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006a40 <xTimerCreateTimerTask+0x84>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d021      	beq.n	8006a16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069da:	1d3a      	adds	r2, r7, #4
 80069dc:	f107 0108 	add.w	r1, r7, #8
 80069e0:	f107 030c 	add.w	r3, r7, #12
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe f8df 	bl	8004ba8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	9202      	str	r2, [sp, #8]
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	2302      	movs	r3, #2
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	460a      	mov	r2, r1
 80069fc:	4911      	ldr	r1, [pc, #68]	@ (8006a44 <xTimerCreateTimerTask+0x88>)
 80069fe:	4812      	ldr	r0, [pc, #72]	@ (8006a48 <xTimerCreateTimerTask+0x8c>)
 8006a00:	f7fe fe9a 	bl	8005738 <xTaskCreateStatic>
 8006a04:	4603      	mov	r3, r0
 8006a06:	4a11      	ldr	r2, [pc, #68]	@ (8006a4c <xTimerCreateTimerTask+0x90>)
 8006a08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a0a:	4b10      	ldr	r3, [pc, #64]	@ (8006a4c <xTimerCreateTimerTask+0x90>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a12:	2301      	movs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	613b      	str	r3, [r7, #16]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a34:	697b      	ldr	r3, [r7, #20]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000f78 	.word	0x20000f78
 8006a44:	08008de8 	.word	0x08008de8
 8006a48:	08006b89 	.word	0x08006b89
 8006a4c:	20000f7c 	.word	0x20000f7c

08006a50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	@ 0x28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	623b      	str	r3, [r7, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a80:	4b19      	ldr	r3, [pc, #100]	@ (8006ae8 <xTimerGenericCommand+0x98>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d02a      	beq.n	8006ade <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	dc18      	bgt.n	8006acc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a9a:	f7ff fca5 	bl	80063e8 <xTaskGetSchedulerState>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d109      	bne.n	8006ab8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006aa4:	4b10      	ldr	r3, [pc, #64]	@ (8006ae8 <xTimerGenericCommand+0x98>)
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	f107 0110 	add.w	r1, r7, #16
 8006aac:	2300      	movs	r3, #0
 8006aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab0:	f7fe fa52 	bl	8004f58 <xQueueGenericSend>
 8006ab4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ab6:	e012      	b.n	8006ade <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae8 <xTimerGenericCommand+0x98>)
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	f107 0110 	add.w	r1, r7, #16
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f7fe fa48 	bl	8004f58 <xQueueGenericSend>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006aca:	e008      	b.n	8006ade <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006acc:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <xTimerGenericCommand+0x98>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	f107 0110 	add.w	r1, r7, #16
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	f7fe fb40 	bl	800515c <xQueueGenericSendFromISR>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3728      	adds	r7, #40	@ 0x28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000f78 	.word	0x20000f78

08006aec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af6:	4b23      	ldr	r3, [pc, #140]	@ (8006b84 <prvProcessExpiredTimer+0x98>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe f8f3 	bl	8004cf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d023      	beq.n	8006b60 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	18d1      	adds	r1, r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	6978      	ldr	r0, [r7, #20]
 8006b26:	f000 f8d5 	bl	8006cd4 <prvInsertTimerInActiveList>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d020      	beq.n	8006b72 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b30:	2300      	movs	r3, #0
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6978      	ldr	r0, [r7, #20]
 8006b3c:	f7ff ff88 	bl	8006a50 <xTimerGenericCommand>
 8006b40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d114      	bne.n	8006b72 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	60fb      	str	r3, [r7, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	bf00      	nop
 8006b5e:	e7fd      	b.n	8006b5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	6978      	ldr	r0, [r7, #20]
 8006b78:	4798      	blx	r3
}
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000f70 	.word	0x20000f70

08006b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b90:	f107 0308 	add.w	r3, r7, #8
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 f859 	bl	8006c4c <prvGetNextExpireTime>
 8006b9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f805 	bl	8006bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ba6:	f000 f8d7 	bl	8006d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006baa:	bf00      	nop
 8006bac:	e7f0      	b.n	8006b90 <prvTimerTask+0x8>
	...

08006bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bba:	f7ff f821 	bl	8005c00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f866 	bl	8006c94 <prvSampleTimeNow>
 8006bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d130      	bne.n	8006c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <prvProcessTimerOrBlockTask+0x3c>
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d806      	bhi.n	8006bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bde:	f7ff f81d 	bl	8005c1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ff81 	bl	8006aec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bea:	e024      	b.n	8006c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bf2:	4b13      	ldr	r3, [pc, #76]	@ (8006c40 <prvProcessTimerOrBlockTask+0x90>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <prvProcessTimerOrBlockTask+0x50>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <prvProcessTimerOrBlockTask+0x52>
 8006c00:	2300      	movs	r3, #0
 8006c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c04:	4b0f      	ldr	r3, [pc, #60]	@ (8006c44 <prvProcessTimerOrBlockTask+0x94>)
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	f7fe fd5d 	bl	80056d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c16:	f7ff f801 	bl	8005c1c <xTaskResumeAll>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c20:	4b09      	ldr	r3, [pc, #36]	@ (8006c48 <prvProcessTimerOrBlockTask+0x98>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
}
 8006c30:	e001      	b.n	8006c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c32:	f7fe fff3 	bl	8005c1c <xTaskResumeAll>
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000f74 	.word	0x20000f74
 8006c44:	20000f78 	.word	0x20000f78
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c54:	4b0e      	ldr	r3, [pc, #56]	@ (8006c90 <prvGetNextExpireTime+0x44>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <prvGetNextExpireTime+0x16>
 8006c5e:	2201      	movs	r2, #1
 8006c60:	e000      	b.n	8006c64 <prvGetNextExpireTime+0x18>
 8006c62:	2200      	movs	r2, #0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d105      	bne.n	8006c7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c70:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <prvGetNextExpireTime+0x44>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	e001      	b.n	8006c80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c80:	68fb      	ldr	r3, [r7, #12]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000f70 	.word	0x20000f70

08006c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c9c:	f7ff f85c 	bl	8005d58 <xTaskGetTickCount>
 8006ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <prvSampleTimeNow+0x3c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d205      	bcs.n	8006cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cac:	f000 f93a 	bl	8006f24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cbe:	4a04      	ldr	r2, [pc, #16]	@ (8006cd0 <prvSampleTimeNow+0x3c>)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000f80 	.word	0x20000f80

08006cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d812      	bhi.n	8006d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d302      	bcc.n	8006d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e01b      	b.n	8006d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d0e:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <prvInsertTimerInActiveList+0x7c>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4619      	mov	r1, r3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	f7fd ffb0 	bl	8004c7e <vListInsert>
 8006d1e:	e012      	b.n	8006d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d206      	bcs.n	8006d36 <prvInsertTimerInActiveList+0x62>
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d302      	bcc.n	8006d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e007      	b.n	8006d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d36:	4b07      	ldr	r3, [pc, #28]	@ (8006d54 <prvInsertTimerInActiveList+0x80>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4610      	mov	r0, r2
 8006d42:	f7fd ff9c 	bl	8004c7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d46:	697b      	ldr	r3, [r7, #20]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000f74 	.word	0x20000f74
 8006d54:	20000f70 	.word	0x20000f70

08006d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08e      	sub	sp, #56	@ 0x38
 8006d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d5e:	e0ce      	b.n	8006efe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da19      	bge.n	8006d9a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d66:	1d3b      	adds	r3, r7, #4
 8006d68:	3304      	adds	r3, #4
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10b      	bne.n	8006d8a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61fb      	str	r3, [r7, #28]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d90:	6850      	ldr	r0, [r2, #4]
 8006d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d94:	6892      	ldr	r2, [r2, #8]
 8006d96:	4611      	mov	r1, r2
 8006d98:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f2c0 80ae 	blt.w	8006efe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	3304      	adds	r3, #4
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fd ff9c 	bl	8004cf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006db8:	463b      	mov	r3, r7
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ff6a 	bl	8006c94 <prvSampleTimeNow>
 8006dc0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b09      	cmp	r3, #9
 8006dc6:	f200 8097 	bhi.w	8006ef8 <prvProcessReceivedCommands+0x1a0>
 8006dca:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <prvProcessReceivedCommands+0x78>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006df9 	.word	0x08006df9
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006df9 	.word	0x08006df9
 8006ddc:	08006e6f 	.word	0x08006e6f
 8006de0:	08006e83 	.word	0x08006e83
 8006de4:	08006ecf 	.word	0x08006ecf
 8006de8:	08006df9 	.word	0x08006df9
 8006dec:	08006df9 	.word	0x08006df9
 8006df0:	08006e6f 	.word	0x08006e6f
 8006df4:	08006e83 	.word	0x08006e83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	18d1      	adds	r1, r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e18:	f7ff ff5c 	bl	8006cd4 <prvInsertTimerInActiveList>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d06c      	beq.n	8006efc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d061      	beq.n	8006efc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	441a      	add	r2, r3
 8006e40:	2300      	movs	r3, #0
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	2100      	movs	r1, #0
 8006e48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e4a:	f7ff fe01 	bl	8006a50 <xTimerGenericCommand>
 8006e4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d152      	bne.n	8006efc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	61bb      	str	r3, [r7, #24]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e80:	e03d      	b.n	8006efe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10b      	bne.n	8006eba <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	617b      	str	r3, [r7, #20]
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop
 8006eb8:	e7fd      	b.n	8006eb6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	18d1      	adds	r1, r2, r3
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ec8:	f7ff ff04 	bl	8006cd4 <prvInsertTimerInActiveList>
					break;
 8006ecc:	e017      	b.n	8006efe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006edc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ede:	f000 fbeb 	bl	80076b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ee2:	e00c      	b.n	8006efe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ef6:	e002      	b.n	8006efe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006ef8:	bf00      	nop
 8006efa:	e000      	b.n	8006efe <prvProcessReceivedCommands+0x1a6>
					break;
 8006efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006efe:	4b08      	ldr	r3, [pc, #32]	@ (8006f20 <prvProcessReceivedCommands+0x1c8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	1d39      	adds	r1, r7, #4
 8006f04:	2200      	movs	r2, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe f9c6 	bl	8005298 <xQueueReceive>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f47f af26 	bne.w	8006d60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	3730      	adds	r7, #48	@ 0x30
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000f78 	.word	0x20000f78

08006f24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f2a:	e049      	b.n	8006fc0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe8 <prvSwitchTimerLists+0xc4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f36:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe8 <prvSwitchTimerLists+0xc4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fd fed3 	bl	8004cf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d02f      	beq.n	8006fc0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4413      	add	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d90e      	bls.n	8006f90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe8 <prvSwitchTimerLists+0xc4>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7fd fe78 	bl	8004c7e <vListInsert>
 8006f8e:	e017      	b.n	8006fc0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f90:	2300      	movs	r3, #0
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2300      	movs	r3, #0
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff fd58 	bl	8006a50 <xTimerGenericCommand>
 8006fa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10b      	bne.n	8006fc0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	603b      	str	r3, [r7, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	e7fd      	b.n	8006fbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fc0:	4b09      	ldr	r3, [pc, #36]	@ (8006fe8 <prvSwitchTimerLists+0xc4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1b0      	bne.n	8006f2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fca:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <prvSwitchTimerLists+0xc4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fd0:	4b06      	ldr	r3, [pc, #24]	@ (8006fec <prvSwitchTimerLists+0xc8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a04      	ldr	r2, [pc, #16]	@ (8006fe8 <prvSwitchTimerLists+0xc4>)
 8006fd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fd8:	4a04      	ldr	r2, [pc, #16]	@ (8006fec <prvSwitchTimerLists+0xc8>)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	6013      	str	r3, [r2, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000f70 	.word	0x20000f70
 8006fec:	20000f74 	.word	0x20000f74

08006ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ff6:	f000 f96f 	bl	80072d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ffa:	4b15      	ldr	r3, [pc, #84]	@ (8007050 <prvCheckForValidListAndQueue+0x60>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d120      	bne.n	8007044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007002:	4814      	ldr	r0, [pc, #80]	@ (8007054 <prvCheckForValidListAndQueue+0x64>)
 8007004:	f7fd fdea 	bl	8004bdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007008:	4813      	ldr	r0, [pc, #76]	@ (8007058 <prvCheckForValidListAndQueue+0x68>)
 800700a:	f7fd fde7 	bl	8004bdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800700e:	4b13      	ldr	r3, [pc, #76]	@ (800705c <prvCheckForValidListAndQueue+0x6c>)
 8007010:	4a10      	ldr	r2, [pc, #64]	@ (8007054 <prvCheckForValidListAndQueue+0x64>)
 8007012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007014:	4b12      	ldr	r3, [pc, #72]	@ (8007060 <prvCheckForValidListAndQueue+0x70>)
 8007016:	4a10      	ldr	r2, [pc, #64]	@ (8007058 <prvCheckForValidListAndQueue+0x68>)
 8007018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800701a:	2300      	movs	r3, #0
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4b11      	ldr	r3, [pc, #68]	@ (8007064 <prvCheckForValidListAndQueue+0x74>)
 8007020:	4a11      	ldr	r2, [pc, #68]	@ (8007068 <prvCheckForValidListAndQueue+0x78>)
 8007022:	2110      	movs	r1, #16
 8007024:	200a      	movs	r0, #10
 8007026:	f7fd fef7 	bl	8004e18 <xQueueGenericCreateStatic>
 800702a:	4603      	mov	r3, r0
 800702c:	4a08      	ldr	r2, [pc, #32]	@ (8007050 <prvCheckForValidListAndQueue+0x60>)
 800702e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007030:	4b07      	ldr	r3, [pc, #28]	@ (8007050 <prvCheckForValidListAndQueue+0x60>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007038:	4b05      	ldr	r3, [pc, #20]	@ (8007050 <prvCheckForValidListAndQueue+0x60>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	490b      	ldr	r1, [pc, #44]	@ (800706c <prvCheckForValidListAndQueue+0x7c>)
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fb1c 	bl	800567c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007044:	f000 f97a 	bl	800733c <vPortExitCritical>
}
 8007048:	bf00      	nop
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000f78 	.word	0x20000f78
 8007054:	20000f48 	.word	0x20000f48
 8007058:	20000f5c 	.word	0x20000f5c
 800705c:	20000f70 	.word	0x20000f70
 8007060:	20000f74 	.word	0x20000f74
 8007064:	20001024 	.word	0x20001024
 8007068:	20000f84 	.word	0x20000f84
 800706c:	08008df0 	.word	0x08008df0

08007070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3b04      	subs	r3, #4
 8007080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3b04      	subs	r3, #4
 800708e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f023 0201 	bic.w	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3b04      	subs	r3, #4
 800709e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070a0:	4a0c      	ldr	r2, [pc, #48]	@ (80070d4 <pxPortInitialiseStack+0x64>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3b14      	subs	r3, #20
 80070aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3b04      	subs	r3, #4
 80070b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f06f 0202 	mvn.w	r2, #2
 80070be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3b20      	subs	r3, #32
 80070c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	080070d9 	.word	0x080070d9

080070d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070e2:	4b13      	ldr	r3, [pc, #76]	@ (8007130 <prvTaskExitError+0x58>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d00b      	beq.n	8007104 <prvTaskExitError+0x2c>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	60fb      	str	r3, [r7, #12]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <prvTaskExitError+0x28>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	60bb      	str	r3, [r7, #8]
}
 8007116:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007118:	bf00      	nop
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0fc      	beq.n	800711a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20000020 	.word	0x20000020
	...

08007140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007140:	4b07      	ldr	r3, [pc, #28]	@ (8007160 <pxCurrentTCBConst2>)
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	6808      	ldr	r0, [r1, #0]
 8007146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f380 8809 	msr	PSP, r0
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8811 	msr	BASEPRI, r0
 800715a:	4770      	bx	lr
 800715c:	f3af 8000 	nop.w

08007160 <pxCurrentTCBConst2>:
 8007160:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop

08007168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007168:	4808      	ldr	r0, [pc, #32]	@ (800718c <prvPortStartFirstTask+0x24>)
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	6800      	ldr	r0, [r0, #0]
 800716e:	f380 8808 	msr	MSP, r0
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8814 	msr	CONTROL, r0
 800717a:	b662      	cpsie	i
 800717c:	b661      	cpsie	f
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	df00      	svc	0
 8007188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800718a:	bf00      	nop
 800718c:	e000ed08 	.word	0xe000ed08

08007190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007196:	4b47      	ldr	r3, [pc, #284]	@ (80072b4 <xPortStartScheduler+0x124>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a47      	ldr	r2, [pc, #284]	@ (80072b8 <xPortStartScheduler+0x128>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d10b      	bne.n	80071b8 <xPortStartScheduler+0x28>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	613b      	str	r3, [r7, #16]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071b8:	4b3e      	ldr	r3, [pc, #248]	@ (80072b4 <xPortStartScheduler+0x124>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a3f      	ldr	r2, [pc, #252]	@ (80072bc <xPortStartScheduler+0x12c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10b      	bne.n	80071da <xPortStartScheduler+0x4a>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60fb      	str	r3, [r7, #12]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071da:	4b39      	ldr	r3, [pc, #228]	@ (80072c0 <xPortStartScheduler+0x130>)
 80071dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	22ff      	movs	r2, #255	@ 0xff
 80071ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	4b31      	ldr	r3, [pc, #196]	@ (80072c4 <xPortStartScheduler+0x134>)
 8007200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007202:	4b31      	ldr	r3, [pc, #196]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007204:	2207      	movs	r2, #7
 8007206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007208:	e009      	b.n	800721e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800720a:	4b2f      	ldr	r3, [pc, #188]	@ (80072c8 <xPortStartScheduler+0x138>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3b01      	subs	r3, #1
 8007210:	4a2d      	ldr	r2, [pc, #180]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	b2db      	uxtb	r3, r3
 800721c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007226:	2b80      	cmp	r3, #128	@ 0x80
 8007228:	d0ef      	beq.n	800720a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800722a:	4b27      	ldr	r3, [pc, #156]	@ (80072c8 <xPortStartScheduler+0x138>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1c3 0307 	rsb	r3, r3, #7
 8007232:	2b04      	cmp	r3, #4
 8007234:	d00b      	beq.n	800724e <xPortStartScheduler+0xbe>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60bb      	str	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800724e:	4b1e      	ldr	r3, [pc, #120]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007258:	4b1b      	ldr	r3, [pc, #108]	@ (80072c8 <xPortStartScheduler+0x138>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007260:	4a19      	ldr	r2, [pc, #100]	@ (80072c8 <xPortStartScheduler+0x138>)
 8007262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800726c:	4b17      	ldr	r3, [pc, #92]	@ (80072cc <xPortStartScheduler+0x13c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a16      	ldr	r2, [pc, #88]	@ (80072cc <xPortStartScheduler+0x13c>)
 8007272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007278:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <xPortStartScheduler+0x13c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a13      	ldr	r2, [pc, #76]	@ (80072cc <xPortStartScheduler+0x13c>)
 800727e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007284:	f000 f8da 	bl	800743c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007288:	4b11      	ldr	r3, [pc, #68]	@ (80072d0 <xPortStartScheduler+0x140>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800728e:	f000 f8f9 	bl	8007484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007292:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <xPortStartScheduler+0x144>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a0f      	ldr	r2, [pc, #60]	@ (80072d4 <xPortStartScheduler+0x144>)
 8007298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800729c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800729e:	f7ff ff63 	bl	8007168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072a2:	f7fe fe23 	bl	8005eec <vTaskSwitchContext>
	prvTaskExitError();
 80072a6:	f7ff ff17 	bl	80070d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	e000ed00 	.word	0xe000ed00
 80072b8:	410fc271 	.word	0x410fc271
 80072bc:	410fc270 	.word	0x410fc270
 80072c0:	e000e400 	.word	0xe000e400
 80072c4:	20001074 	.word	0x20001074
 80072c8:	20001078 	.word	0x20001078
 80072cc:	e000ed20 	.word	0xe000ed20
 80072d0:	20000020 	.word	0x20000020
 80072d4:	e000ef34 	.word	0xe000ef34

080072d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	607b      	str	r3, [r7, #4]
}
 80072f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <vPortEnterCritical+0x5c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3301      	adds	r3, #1
 80072f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007334 <vPortEnterCritical+0x5c>)
 80072fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <vPortEnterCritical+0x5c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d110      	bne.n	8007326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007304:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <vPortEnterCritical+0x60>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <vPortEnterCritical+0x4e>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	603b      	str	r3, [r7, #0]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <vPortEnterCritical+0x4a>
	}
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000020 	.word	0x20000020
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007342:	4b12      	ldr	r3, [pc, #72]	@ (800738c <vPortExitCritical+0x50>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <vPortExitCritical+0x26>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	607b      	str	r3, [r7, #4]
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	e7fd      	b.n	800735e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007362:	4b0a      	ldr	r3, [pc, #40]	@ (800738c <vPortExitCritical+0x50>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3b01      	subs	r3, #1
 8007368:	4a08      	ldr	r2, [pc, #32]	@ (800738c <vPortExitCritical+0x50>)
 800736a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800736c:	4b07      	ldr	r3, [pc, #28]	@ (800738c <vPortExitCritical+0x50>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d105      	bne.n	8007380 <vPortExitCritical+0x44>
 8007374:	2300      	movs	r3, #0
 8007376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f383 8811 	msr	BASEPRI, r3
}
 800737e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	20000020 	.word	0x20000020

08007390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007390:	f3ef 8009 	mrs	r0, PSP
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4b15      	ldr	r3, [pc, #84]	@ (80073f0 <pxCurrentTCBConst>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	f01e 0f10 	tst.w	lr, #16
 80073a0:	bf08      	it	eq
 80073a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	6010      	str	r0, [r2, #0]
 80073ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073b4:	f380 8811 	msr	BASEPRI, r0
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f7fe fd94 	bl	8005eec <vTaskSwitchContext>
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f380 8811 	msr	BASEPRI, r0
 80073cc:	bc09      	pop	{r0, r3}
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	6808      	ldr	r0, [r1, #0]
 80073d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d6:	f01e 0f10 	tst.w	lr, #16
 80073da:	bf08      	it	eq
 80073dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073e0:	f380 8809 	msr	PSP, r0
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	f3af 8000 	nop.w

080073f0 <pxCurrentTCBConst>:
 80073f0:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	607b      	str	r3, [r7, #4]
}
 8007410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007412:	f7fe fcb1 	bl	8005d78 <xTaskIncrementTick>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800741c:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <xPortSysTickHandler+0x40>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	2300      	movs	r3, #0
 8007426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f383 8811 	msr	BASEPRI, r3
}
 800742e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007440:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <vPortSetupTimerInterrupt+0x34>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007446:	4b0b      	ldr	r3, [pc, #44]	@ (8007474 <vPortSetupTimerInterrupt+0x38>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800744c:	4b0a      	ldr	r3, [pc, #40]	@ (8007478 <vPortSetupTimerInterrupt+0x3c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a0a      	ldr	r2, [pc, #40]	@ (800747c <vPortSetupTimerInterrupt+0x40>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	099b      	lsrs	r3, r3, #6
 8007458:	4a09      	ldr	r2, [pc, #36]	@ (8007480 <vPortSetupTimerInterrupt+0x44>)
 800745a:	3b01      	subs	r3, #1
 800745c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800745e:	4b04      	ldr	r3, [pc, #16]	@ (8007470 <vPortSetupTimerInterrupt+0x34>)
 8007460:	2207      	movs	r2, #7
 8007462:	601a      	str	r2, [r3, #0]
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	e000e010 	.word	0xe000e010
 8007474:	e000e018 	.word	0xe000e018
 8007478:	20000014 	.word	0x20000014
 800747c:	10624dd3 	.word	0x10624dd3
 8007480:	e000e014 	.word	0xe000e014

08007484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007494 <vPortEnableVFP+0x10>
 8007488:	6801      	ldr	r1, [r0, #0]
 800748a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800748e:	6001      	str	r1, [r0, #0]
 8007490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007492:	bf00      	nop
 8007494:	e000ed88 	.word	0xe000ed88

08007498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800749e:	f3ef 8305 	mrs	r3, IPSR
 80074a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b0f      	cmp	r3, #15
 80074a8:	d915      	bls.n	80074d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074aa:	4a18      	ldr	r2, [pc, #96]	@ (800750c <vPortValidateInterruptPriority+0x74>)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074b4:	4b16      	ldr	r3, [pc, #88]	@ (8007510 <vPortValidateInterruptPriority+0x78>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	7afa      	ldrb	r2, [r7, #11]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d20b      	bcs.n	80074d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <vPortValidateInterruptPriority+0x7c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074de:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <vPortValidateInterruptPriority+0x80>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d90b      	bls.n	80074fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	603b      	str	r3, [r7, #0]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <vPortValidateInterruptPriority+0x62>
	}
 80074fe:	bf00      	nop
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	e000e3f0 	.word	0xe000e3f0
 8007510:	20001074 	.word	0x20001074
 8007514:	e000ed0c 	.word	0xe000ed0c
 8007518:	20001078 	.word	0x20001078

0800751c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007528:	f7fe fb6a 	bl	8005c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800752c:	4b5c      	ldr	r3, [pc, #368]	@ (80076a0 <pvPortMalloc+0x184>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007534:	f000 f924 	bl	8007780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007538:	4b5a      	ldr	r3, [pc, #360]	@ (80076a4 <pvPortMalloc+0x188>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 8095 	bne.w	8007670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01e      	beq.n	800758a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800754c:	2208      	movs	r2, #8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	2b00      	cmp	r3, #0
 800755c:	d015      	beq.n	800758a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f023 0307 	bic.w	r3, r3, #7
 8007564:	3308      	adds	r3, #8
 8007566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <pvPortMalloc+0x6e>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	617b      	str	r3, [r7, #20]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d06f      	beq.n	8007670 <pvPortMalloc+0x154>
 8007590:	4b45      	ldr	r3, [pc, #276]	@ (80076a8 <pvPortMalloc+0x18c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d86a      	bhi.n	8007670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800759a:	4b44      	ldr	r3, [pc, #272]	@ (80076ac <pvPortMalloc+0x190>)
 800759c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800759e:	4b43      	ldr	r3, [pc, #268]	@ (80076ac <pvPortMalloc+0x190>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075a4:	e004      	b.n	80075b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d903      	bls.n	80075c2 <pvPortMalloc+0xa6>
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f1      	bne.n	80075a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075c2:	4b37      	ldr	r3, [pc, #220]	@ (80076a0 <pvPortMalloc+0x184>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d051      	beq.n	8007670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2208      	movs	r2, #8
 80075d2:	4413      	add	r3, r2
 80075d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	1ad2      	subs	r2, r2, r3
 80075e6:	2308      	movs	r3, #8
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d920      	bls.n	8007630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <pvPortMalloc+0xfc>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	613b      	str	r3, [r7, #16]
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800762a:	69b8      	ldr	r0, [r7, #24]
 800762c:	f000 f90a 	bl	8007844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007630:	4b1d      	ldr	r3, [pc, #116]	@ (80076a8 <pvPortMalloc+0x18c>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <pvPortMalloc+0x18c>)
 800763c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800763e:	4b1a      	ldr	r3, [pc, #104]	@ (80076a8 <pvPortMalloc+0x18c>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b1b      	ldr	r3, [pc, #108]	@ (80076b0 <pvPortMalloc+0x194>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d203      	bcs.n	8007652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800764a:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <pvPortMalloc+0x18c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <pvPortMalloc+0x194>)
 8007650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	4b13      	ldr	r3, [pc, #76]	@ (80076a4 <pvPortMalloc+0x188>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	431a      	orrs	r2, r3
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007666:	4b13      	ldr	r3, [pc, #76]	@ (80076b4 <pvPortMalloc+0x198>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	4a11      	ldr	r2, [pc, #68]	@ (80076b4 <pvPortMalloc+0x198>)
 800766e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007670:	f7fe fad4 	bl	8005c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <pvPortMalloc+0x17a>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60fb      	str	r3, [r7, #12]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <pvPortMalloc+0x176>
	return pvReturn;
 8007696:	69fb      	ldr	r3, [r7, #28]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3728      	adds	r7, #40	@ 0x28
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	20004c84 	.word	0x20004c84
 80076a4:	20004c98 	.word	0x20004c98
 80076a8:	20004c88 	.word	0x20004c88
 80076ac:	20004c7c 	.word	0x20004c7c
 80076b0:	20004c8c 	.word	0x20004c8c
 80076b4:	20004c90 	.word	0x20004c90

080076b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d04f      	beq.n	800776a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076ca:	2308      	movs	r3, #8
 80076cc:	425b      	negs	r3, r3
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4413      	add	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b25      	ldr	r3, [pc, #148]	@ (8007774 <vPortFree+0xbc>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4013      	ands	r3, r2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10b      	bne.n	80076fe <vPortFree+0x46>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	e7fd      	b.n	80076fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <vPortFree+0x66>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	4b14      	ldr	r3, [pc, #80]	@ (8007774 <vPortFree+0xbc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4013      	ands	r3, r2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01e      	beq.n	800776a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11a      	bne.n	800776a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	4b0e      	ldr	r3, [pc, #56]	@ (8007774 <vPortFree+0xbc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	43db      	mvns	r3, r3
 800773e:	401a      	ands	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007744:	f7fe fa5c 	bl	8005c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	4b0a      	ldr	r3, [pc, #40]	@ (8007778 <vPortFree+0xc0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4413      	add	r3, r2
 8007752:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <vPortFree+0xc0>)
 8007754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007756:	6938      	ldr	r0, [r7, #16]
 8007758:	f000 f874 	bl	8007844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800775c:	4b07      	ldr	r3, [pc, #28]	@ (800777c <vPortFree+0xc4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	4a06      	ldr	r2, [pc, #24]	@ (800777c <vPortFree+0xc4>)
 8007764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007766:	f7fe fa59 	bl	8005c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800776a:	bf00      	nop
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20004c98 	.word	0x20004c98
 8007778:	20004c88 	.word	0x20004c88
 800777c:	20004c94 	.word	0x20004c94

08007780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007786:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800778a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800778c:	4b27      	ldr	r3, [pc, #156]	@ (800782c <prvHeapInit+0xac>)
 800778e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00c      	beq.n	80077b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3307      	adds	r3, #7
 800779e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <prvHeapInit+0xac>)
 80077b0:	4413      	add	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007830 <prvHeapInit+0xb0>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077be:	4b1c      	ldr	r3, [pc, #112]	@ (8007830 <prvHeapInit+0xb0>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	4413      	add	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077cc:	2208      	movs	r2, #8
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a15      	ldr	r2, [pc, #84]	@ (8007834 <prvHeapInit+0xb4>)
 80077e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077e2:	4b14      	ldr	r3, [pc, #80]	@ (8007834 <prvHeapInit+0xb4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2200      	movs	r2, #0
 80077e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <prvHeapInit+0xb4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007800:	4b0c      	ldr	r3, [pc, #48]	@ (8007834 <prvHeapInit+0xb4>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4a0a      	ldr	r2, [pc, #40]	@ (8007838 <prvHeapInit+0xb8>)
 800780e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4a09      	ldr	r2, [pc, #36]	@ (800783c <prvHeapInit+0xbc>)
 8007816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007818:	4b09      	ldr	r3, [pc, #36]	@ (8007840 <prvHeapInit+0xc0>)
 800781a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800781e:	601a      	str	r2, [r3, #0]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	2000107c 	.word	0x2000107c
 8007830:	20004c7c 	.word	0x20004c7c
 8007834:	20004c84 	.word	0x20004c84
 8007838:	20004c8c 	.word	0x20004c8c
 800783c:	20004c88 	.word	0x20004c88
 8007840:	20004c98 	.word	0x20004c98

08007844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800784c:	4b28      	ldr	r3, [pc, #160]	@ (80078f0 <prvInsertBlockIntoFreeList+0xac>)
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	e002      	b.n	8007858 <prvInsertBlockIntoFreeList+0x14>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	429a      	cmp	r2, r3
 8007860:	d8f7      	bhi.n	8007852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	4413      	add	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d108      	bne.n	8007886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d118      	bne.n	80078cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b15      	ldr	r3, [pc, #84]	@ (80078f4 <prvInsertBlockIntoFreeList+0xb0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d00d      	beq.n	80078c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e008      	b.n	80078d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078c2:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <prvInsertBlockIntoFreeList+0xb0>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e003      	b.n	80078d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d002      	beq.n	80078e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20004c7c 	.word	0x20004c7c
 80078f4:	20004c84 	.word	0x20004c84

080078f8 <__itoa>:
 80078f8:	1e93      	subs	r3, r2, #2
 80078fa:	2b22      	cmp	r3, #34	@ 0x22
 80078fc:	b510      	push	{r4, lr}
 80078fe:	460c      	mov	r4, r1
 8007900:	d904      	bls.n	800790c <__itoa+0x14>
 8007902:	2300      	movs	r3, #0
 8007904:	700b      	strb	r3, [r1, #0]
 8007906:	461c      	mov	r4, r3
 8007908:	4620      	mov	r0, r4
 800790a:	bd10      	pop	{r4, pc}
 800790c:	2a0a      	cmp	r2, #10
 800790e:	d109      	bne.n	8007924 <__itoa+0x2c>
 8007910:	2800      	cmp	r0, #0
 8007912:	da07      	bge.n	8007924 <__itoa+0x2c>
 8007914:	232d      	movs	r3, #45	@ 0x2d
 8007916:	700b      	strb	r3, [r1, #0]
 8007918:	4240      	negs	r0, r0
 800791a:	2101      	movs	r1, #1
 800791c:	4421      	add	r1, r4
 800791e:	f000 f93f 	bl	8007ba0 <__utoa>
 8007922:	e7f1      	b.n	8007908 <__itoa+0x10>
 8007924:	2100      	movs	r1, #0
 8007926:	e7f9      	b.n	800791c <__itoa+0x24>

08007928 <itoa>:
 8007928:	f7ff bfe6 	b.w	80078f8 <__itoa>

0800792c <malloc>:
 800792c:	4b02      	ldr	r3, [pc, #8]	@ (8007938 <malloc+0xc>)
 800792e:	4601      	mov	r1, r0
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	f000 b825 	b.w	8007980 <_malloc_r>
 8007936:	bf00      	nop
 8007938:	20000030 	.word	0x20000030

0800793c <sbrk_aligned>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	4e0f      	ldr	r6, [pc, #60]	@ (800797c <sbrk_aligned+0x40>)
 8007940:	460c      	mov	r4, r1
 8007942:	6831      	ldr	r1, [r6, #0]
 8007944:	4605      	mov	r5, r0
 8007946:	b911      	cbnz	r1, 800794e <sbrk_aligned+0x12>
 8007948:	f000 fbfa 	bl	8008140 <_sbrk_r>
 800794c:	6030      	str	r0, [r6, #0]
 800794e:	4621      	mov	r1, r4
 8007950:	4628      	mov	r0, r5
 8007952:	f000 fbf5 	bl	8008140 <_sbrk_r>
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	d103      	bne.n	8007962 <sbrk_aligned+0x26>
 800795a:	f04f 34ff 	mov.w	r4, #4294967295
 800795e:	4620      	mov	r0, r4
 8007960:	bd70      	pop	{r4, r5, r6, pc}
 8007962:	1cc4      	adds	r4, r0, #3
 8007964:	f024 0403 	bic.w	r4, r4, #3
 8007968:	42a0      	cmp	r0, r4
 800796a:	d0f8      	beq.n	800795e <sbrk_aligned+0x22>
 800796c:	1a21      	subs	r1, r4, r0
 800796e:	4628      	mov	r0, r5
 8007970:	f000 fbe6 	bl	8008140 <_sbrk_r>
 8007974:	3001      	adds	r0, #1
 8007976:	d1f2      	bne.n	800795e <sbrk_aligned+0x22>
 8007978:	e7ef      	b.n	800795a <sbrk_aligned+0x1e>
 800797a:	bf00      	nop
 800797c:	20004c9c 	.word	0x20004c9c

08007980 <_malloc_r>:
 8007980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007984:	1ccd      	adds	r5, r1, #3
 8007986:	f025 0503 	bic.w	r5, r5, #3
 800798a:	3508      	adds	r5, #8
 800798c:	2d0c      	cmp	r5, #12
 800798e:	bf38      	it	cc
 8007990:	250c      	movcc	r5, #12
 8007992:	2d00      	cmp	r5, #0
 8007994:	4606      	mov	r6, r0
 8007996:	db01      	blt.n	800799c <_malloc_r+0x1c>
 8007998:	42a9      	cmp	r1, r5
 800799a:	d904      	bls.n	80079a6 <_malloc_r+0x26>
 800799c:	230c      	movs	r3, #12
 800799e:	6033      	str	r3, [r6, #0]
 80079a0:	2000      	movs	r0, #0
 80079a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a7c <_malloc_r+0xfc>
 80079aa:	f000 f869 	bl	8007a80 <__malloc_lock>
 80079ae:	f8d8 3000 	ldr.w	r3, [r8]
 80079b2:	461c      	mov	r4, r3
 80079b4:	bb44      	cbnz	r4, 8007a08 <_malloc_r+0x88>
 80079b6:	4629      	mov	r1, r5
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7ff ffbf 	bl	800793c <sbrk_aligned>
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	4604      	mov	r4, r0
 80079c2:	d158      	bne.n	8007a76 <_malloc_r+0xf6>
 80079c4:	f8d8 4000 	ldr.w	r4, [r8]
 80079c8:	4627      	mov	r7, r4
 80079ca:	2f00      	cmp	r7, #0
 80079cc:	d143      	bne.n	8007a56 <_malloc_r+0xd6>
 80079ce:	2c00      	cmp	r4, #0
 80079d0:	d04b      	beq.n	8007a6a <_malloc_r+0xea>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	4639      	mov	r1, r7
 80079d6:	4630      	mov	r0, r6
 80079d8:	eb04 0903 	add.w	r9, r4, r3
 80079dc:	f000 fbb0 	bl	8008140 <_sbrk_r>
 80079e0:	4581      	cmp	r9, r0
 80079e2:	d142      	bne.n	8007a6a <_malloc_r+0xea>
 80079e4:	6821      	ldr	r1, [r4, #0]
 80079e6:	1a6d      	subs	r5, r5, r1
 80079e8:	4629      	mov	r1, r5
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff ffa6 	bl	800793c <sbrk_aligned>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d03a      	beq.n	8007a6a <_malloc_r+0xea>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	442b      	add	r3, r5
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	f8d8 3000 	ldr.w	r3, [r8]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	bb62      	cbnz	r2, 8007a5c <_malloc_r+0xdc>
 8007a02:	f8c8 7000 	str.w	r7, [r8]
 8007a06:	e00f      	b.n	8007a28 <_malloc_r+0xa8>
 8007a08:	6822      	ldr	r2, [r4, #0]
 8007a0a:	1b52      	subs	r2, r2, r5
 8007a0c:	d420      	bmi.n	8007a50 <_malloc_r+0xd0>
 8007a0e:	2a0b      	cmp	r2, #11
 8007a10:	d917      	bls.n	8007a42 <_malloc_r+0xc2>
 8007a12:	1961      	adds	r1, r4, r5
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	6025      	str	r5, [r4, #0]
 8007a18:	bf18      	it	ne
 8007a1a:	6059      	strne	r1, [r3, #4]
 8007a1c:	6863      	ldr	r3, [r4, #4]
 8007a1e:	bf08      	it	eq
 8007a20:	f8c8 1000 	streq.w	r1, [r8]
 8007a24:	5162      	str	r2, [r4, r5]
 8007a26:	604b      	str	r3, [r1, #4]
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f000 f82f 	bl	8007a8c <__malloc_unlock>
 8007a2e:	f104 000b 	add.w	r0, r4, #11
 8007a32:	1d23      	adds	r3, r4, #4
 8007a34:	f020 0007 	bic.w	r0, r0, #7
 8007a38:	1ac2      	subs	r2, r0, r3
 8007a3a:	bf1c      	itt	ne
 8007a3c:	1a1b      	subne	r3, r3, r0
 8007a3e:	50a3      	strne	r3, [r4, r2]
 8007a40:	e7af      	b.n	80079a2 <_malloc_r+0x22>
 8007a42:	6862      	ldr	r2, [r4, #4]
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	bf0c      	ite	eq
 8007a48:	f8c8 2000 	streq.w	r2, [r8]
 8007a4c:	605a      	strne	r2, [r3, #4]
 8007a4e:	e7eb      	b.n	8007a28 <_malloc_r+0xa8>
 8007a50:	4623      	mov	r3, r4
 8007a52:	6864      	ldr	r4, [r4, #4]
 8007a54:	e7ae      	b.n	80079b4 <_malloc_r+0x34>
 8007a56:	463c      	mov	r4, r7
 8007a58:	687f      	ldr	r7, [r7, #4]
 8007a5a:	e7b6      	b.n	80079ca <_malloc_r+0x4a>
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d1fb      	bne.n	8007a5c <_malloc_r+0xdc>
 8007a64:	2300      	movs	r3, #0
 8007a66:	6053      	str	r3, [r2, #4]
 8007a68:	e7de      	b.n	8007a28 <_malloc_r+0xa8>
 8007a6a:	230c      	movs	r3, #12
 8007a6c:	6033      	str	r3, [r6, #0]
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f000 f80c 	bl	8007a8c <__malloc_unlock>
 8007a74:	e794      	b.n	80079a0 <_malloc_r+0x20>
 8007a76:	6005      	str	r5, [r0, #0]
 8007a78:	e7d6      	b.n	8007a28 <_malloc_r+0xa8>
 8007a7a:	bf00      	nop
 8007a7c:	20004ca0 	.word	0x20004ca0

08007a80 <__malloc_lock>:
 8007a80:	4801      	ldr	r0, [pc, #4]	@ (8007a88 <__malloc_lock+0x8>)
 8007a82:	f7f9 bffd 	b.w	8001a80 <__retarget_lock_acquire_recursive>
 8007a86:	bf00      	nop
 8007a88:	200002a4 	.word	0x200002a4

08007a8c <__malloc_unlock>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	@ (8007a94 <__malloc_unlock+0x8>)
 8007a8e:	f7fa b80c 	b.w	8001aaa <__retarget_lock_release_recursive>
 8007a92:	bf00      	nop
 8007a94:	200002a4 	.word	0x200002a4

08007a98 <_strtol_l.constprop.0>:
 8007a98:	2b24      	cmp	r3, #36	@ 0x24
 8007a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9e:	4686      	mov	lr, r0
 8007aa0:	4690      	mov	r8, r2
 8007aa2:	d801      	bhi.n	8007aa8 <_strtol_l.constprop.0+0x10>
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <_strtol_l.constprop.0+0x1e>
 8007aa8:	f000 fb6c 	bl	8008184 <__errno>
 8007aac:	2316      	movs	r3, #22
 8007aae:	6003      	str	r3, [r0, #0]
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab6:	4834      	ldr	r0, [pc, #208]	@ (8007b88 <_strtol_l.constprop.0+0xf0>)
 8007ab8:	460d      	mov	r5, r1
 8007aba:	462a      	mov	r2, r5
 8007abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ac0:	5d06      	ldrb	r6, [r0, r4]
 8007ac2:	f016 0608 	ands.w	r6, r6, #8
 8007ac6:	d1f8      	bne.n	8007aba <_strtol_l.constprop.0+0x22>
 8007ac8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007aca:	d12d      	bne.n	8007b28 <_strtol_l.constprop.0+0x90>
 8007acc:	782c      	ldrb	r4, [r5, #0]
 8007ace:	2601      	movs	r6, #1
 8007ad0:	1c95      	adds	r5, r2, #2
 8007ad2:	f033 0210 	bics.w	r2, r3, #16
 8007ad6:	d109      	bne.n	8007aec <_strtol_l.constprop.0+0x54>
 8007ad8:	2c30      	cmp	r4, #48	@ 0x30
 8007ada:	d12a      	bne.n	8007b32 <_strtol_l.constprop.0+0x9a>
 8007adc:	782a      	ldrb	r2, [r5, #0]
 8007ade:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ae2:	2a58      	cmp	r2, #88	@ 0x58
 8007ae4:	d125      	bne.n	8007b32 <_strtol_l.constprop.0+0x9a>
 8007ae6:	786c      	ldrb	r4, [r5, #1]
 8007ae8:	2310      	movs	r3, #16
 8007aea:	3502      	adds	r5, #2
 8007aec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007af0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007af4:	2200      	movs	r2, #0
 8007af6:	fbbc f9f3 	udiv	r9, ip, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b04:	2f09      	cmp	r7, #9
 8007b06:	d81b      	bhi.n	8007b40 <_strtol_l.constprop.0+0xa8>
 8007b08:	463c      	mov	r4, r7
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	dd27      	ble.n	8007b5e <_strtol_l.constprop.0+0xc6>
 8007b0e:	1c57      	adds	r7, r2, #1
 8007b10:	d007      	beq.n	8007b22 <_strtol_l.constprop.0+0x8a>
 8007b12:	4581      	cmp	r9, r0
 8007b14:	d320      	bcc.n	8007b58 <_strtol_l.constprop.0+0xc0>
 8007b16:	d101      	bne.n	8007b1c <_strtol_l.constprop.0+0x84>
 8007b18:	45a2      	cmp	sl, r4
 8007b1a:	db1d      	blt.n	8007b58 <_strtol_l.constprop.0+0xc0>
 8007b1c:	fb00 4003 	mla	r0, r0, r3, r4
 8007b20:	2201      	movs	r2, #1
 8007b22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b26:	e7eb      	b.n	8007b00 <_strtol_l.constprop.0+0x68>
 8007b28:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b2a:	bf04      	itt	eq
 8007b2c:	782c      	ldrbeq	r4, [r5, #0]
 8007b2e:	1c95      	addeq	r5, r2, #2
 8007b30:	e7cf      	b.n	8007ad2 <_strtol_l.constprop.0+0x3a>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1da      	bne.n	8007aec <_strtol_l.constprop.0+0x54>
 8007b36:	2c30      	cmp	r4, #48	@ 0x30
 8007b38:	bf0c      	ite	eq
 8007b3a:	2308      	moveq	r3, #8
 8007b3c:	230a      	movne	r3, #10
 8007b3e:	e7d5      	b.n	8007aec <_strtol_l.constprop.0+0x54>
 8007b40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b44:	2f19      	cmp	r7, #25
 8007b46:	d801      	bhi.n	8007b4c <_strtol_l.constprop.0+0xb4>
 8007b48:	3c37      	subs	r4, #55	@ 0x37
 8007b4a:	e7de      	b.n	8007b0a <_strtol_l.constprop.0+0x72>
 8007b4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b50:	2f19      	cmp	r7, #25
 8007b52:	d804      	bhi.n	8007b5e <_strtol_l.constprop.0+0xc6>
 8007b54:	3c57      	subs	r4, #87	@ 0x57
 8007b56:	e7d8      	b.n	8007b0a <_strtol_l.constprop.0+0x72>
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	e7e1      	b.n	8007b22 <_strtol_l.constprop.0+0x8a>
 8007b5e:	1c53      	adds	r3, r2, #1
 8007b60:	d108      	bne.n	8007b74 <_strtol_l.constprop.0+0xdc>
 8007b62:	2322      	movs	r3, #34	@ 0x22
 8007b64:	f8ce 3000 	str.w	r3, [lr]
 8007b68:	4660      	mov	r0, ip
 8007b6a:	f1b8 0f00 	cmp.w	r8, #0
 8007b6e:	d0a0      	beq.n	8007ab2 <_strtol_l.constprop.0+0x1a>
 8007b70:	1e69      	subs	r1, r5, #1
 8007b72:	e006      	b.n	8007b82 <_strtol_l.constprop.0+0xea>
 8007b74:	b106      	cbz	r6, 8007b78 <_strtol_l.constprop.0+0xe0>
 8007b76:	4240      	negs	r0, r0
 8007b78:	f1b8 0f00 	cmp.w	r8, #0
 8007b7c:	d099      	beq.n	8007ab2 <_strtol_l.constprop.0+0x1a>
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	d1f6      	bne.n	8007b70 <_strtol_l.constprop.0+0xd8>
 8007b82:	f8c8 1000 	str.w	r1, [r8]
 8007b86:	e794      	b.n	8007ab2 <_strtol_l.constprop.0+0x1a>
 8007b88:	08008fe2 	.word	0x08008fe2

08007b8c <strtol>:
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	460a      	mov	r2, r1
 8007b90:	4601      	mov	r1, r0
 8007b92:	4802      	ldr	r0, [pc, #8]	@ (8007b9c <strtol+0x10>)
 8007b94:	6800      	ldr	r0, [r0, #0]
 8007b96:	f7ff bf7f 	b.w	8007a98 <_strtol_l.constprop.0>
 8007b9a:	bf00      	nop
 8007b9c:	20000030 	.word	0x20000030

08007ba0 <__utoa>:
 8007ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba2:	4c1f      	ldr	r4, [pc, #124]	@ (8007c20 <__utoa+0x80>)
 8007ba4:	b08b      	sub	sp, #44	@ 0x2c
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	466e      	mov	r6, sp
 8007bac:	f104 0c20 	add.w	ip, r4, #32
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	6861      	ldr	r1, [r4, #4]
 8007bb4:	4637      	mov	r7, r6
 8007bb6:	c703      	stmia	r7!, {r0, r1}
 8007bb8:	3408      	adds	r4, #8
 8007bba:	4564      	cmp	r4, ip
 8007bbc:	463e      	mov	r6, r7
 8007bbe:	d1f7      	bne.n	8007bb0 <__utoa+0x10>
 8007bc0:	7921      	ldrb	r1, [r4, #4]
 8007bc2:	7139      	strb	r1, [r7, #4]
 8007bc4:	1e91      	subs	r1, r2, #2
 8007bc6:	6820      	ldr	r0, [r4, #0]
 8007bc8:	6038      	str	r0, [r7, #0]
 8007bca:	2922      	cmp	r1, #34	@ 0x22
 8007bcc:	f04f 0100 	mov.w	r1, #0
 8007bd0:	d904      	bls.n	8007bdc <__utoa+0x3c>
 8007bd2:	7019      	strb	r1, [r3, #0]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	b00b      	add	sp, #44	@ 0x2c
 8007bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bdc:	1e58      	subs	r0, r3, #1
 8007bde:	4684      	mov	ip, r0
 8007be0:	fbb5 f7f2 	udiv	r7, r5, r2
 8007be4:	fb02 5617 	mls	r6, r2, r7, r5
 8007be8:	3628      	adds	r6, #40	@ 0x28
 8007bea:	446e      	add	r6, sp
 8007bec:	460c      	mov	r4, r1
 8007bee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007bf2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007bf6:	462e      	mov	r6, r5
 8007bf8:	42b2      	cmp	r2, r6
 8007bfa:	f101 0101 	add.w	r1, r1, #1
 8007bfe:	463d      	mov	r5, r7
 8007c00:	d9ee      	bls.n	8007be0 <__utoa+0x40>
 8007c02:	2200      	movs	r2, #0
 8007c04:	545a      	strb	r2, [r3, r1]
 8007c06:	1919      	adds	r1, r3, r4
 8007c08:	1aa5      	subs	r5, r4, r2
 8007c0a:	42aa      	cmp	r2, r5
 8007c0c:	dae3      	bge.n	8007bd6 <__utoa+0x36>
 8007c0e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007c12:	780e      	ldrb	r6, [r1, #0]
 8007c14:	7006      	strb	r6, [r0, #0]
 8007c16:	3201      	adds	r2, #1
 8007c18:	f801 5901 	strb.w	r5, [r1], #-1
 8007c1c:	e7f4      	b.n	8007c08 <__utoa+0x68>
 8007c1e:	bf00      	nop
 8007c20:	08008fbc 	.word	0x08008fbc

08007c24 <__sflush_r>:
 8007c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2c:	0716      	lsls	r6, r2, #28
 8007c2e:	4605      	mov	r5, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	d454      	bmi.n	8007cde <__sflush_r+0xba>
 8007c34:	684b      	ldr	r3, [r1, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dc02      	bgt.n	8007c40 <__sflush_r+0x1c>
 8007c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dd48      	ble.n	8007cd2 <__sflush_r+0xae>
 8007c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c42:	2e00      	cmp	r6, #0
 8007c44:	d045      	beq.n	8007cd2 <__sflush_r+0xae>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c4c:	682f      	ldr	r7, [r5, #0]
 8007c4e:	6a21      	ldr	r1, [r4, #32]
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	d030      	beq.n	8007cb6 <__sflush_r+0x92>
 8007c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	0759      	lsls	r1, r3, #29
 8007c5a:	d505      	bpl.n	8007c68 <__sflush_r+0x44>
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c62:	b10b      	cbz	r3, 8007c68 <__sflush_r+0x44>
 8007c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c66:	1ad2      	subs	r2, r2, r3
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c6c:	6a21      	ldr	r1, [r4, #32]
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b0      	blx	r6
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	d106      	bne.n	8007c86 <__sflush_r+0x62>
 8007c78:	6829      	ldr	r1, [r5, #0]
 8007c7a:	291d      	cmp	r1, #29
 8007c7c:	d82b      	bhi.n	8007cd6 <__sflush_r+0xb2>
 8007c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d28 <__sflush_r+0x104>)
 8007c80:	410a      	asrs	r2, r1
 8007c82:	07d6      	lsls	r6, r2, #31
 8007c84:	d427      	bmi.n	8007cd6 <__sflush_r+0xb2>
 8007c86:	2200      	movs	r2, #0
 8007c88:	6062      	str	r2, [r4, #4]
 8007c8a:	04d9      	lsls	r1, r3, #19
 8007c8c:	6922      	ldr	r2, [r4, #16]
 8007c8e:	6022      	str	r2, [r4, #0]
 8007c90:	d504      	bpl.n	8007c9c <__sflush_r+0x78>
 8007c92:	1c42      	adds	r2, r0, #1
 8007c94:	d101      	bne.n	8007c9a <__sflush_r+0x76>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	b903      	cbnz	r3, 8007c9c <__sflush_r+0x78>
 8007c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c9e:	602f      	str	r7, [r5, #0]
 8007ca0:	b1b9      	cbz	r1, 8007cd2 <__sflush_r+0xae>
 8007ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	d002      	beq.n	8007cb0 <__sflush_r+0x8c>
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 faaa 	bl	8008204 <_free_r>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb4:	e00d      	b.n	8007cd2 <__sflush_r+0xae>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b0      	blx	r6
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	1c50      	adds	r0, r2, #1
 8007cc0:	d1c9      	bne.n	8007c56 <__sflush_r+0x32>
 8007cc2:	682b      	ldr	r3, [r5, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0c6      	beq.n	8007c56 <__sflush_r+0x32>
 8007cc8:	2b1d      	cmp	r3, #29
 8007cca:	d001      	beq.n	8007cd0 <__sflush_r+0xac>
 8007ccc:	2b16      	cmp	r3, #22
 8007cce:	d11e      	bne.n	8007d0e <__sflush_r+0xea>
 8007cd0:	602f      	str	r7, [r5, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e022      	b.n	8007d1c <__sflush_r+0xf8>
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	e01b      	b.n	8007d16 <__sflush_r+0xf2>
 8007cde:	690f      	ldr	r7, [r1, #16]
 8007ce0:	2f00      	cmp	r7, #0
 8007ce2:	d0f6      	beq.n	8007cd2 <__sflush_r+0xae>
 8007ce4:	0793      	lsls	r3, r2, #30
 8007ce6:	680e      	ldr	r6, [r1, #0]
 8007ce8:	bf08      	it	eq
 8007cea:	694b      	ldreq	r3, [r1, #20]
 8007cec:	600f      	str	r7, [r1, #0]
 8007cee:	bf18      	it	ne
 8007cf0:	2300      	movne	r3, #0
 8007cf2:	eba6 0807 	sub.w	r8, r6, r7
 8007cf6:	608b      	str	r3, [r1, #8]
 8007cf8:	f1b8 0f00 	cmp.w	r8, #0
 8007cfc:	dde9      	ble.n	8007cd2 <__sflush_r+0xae>
 8007cfe:	6a21      	ldr	r1, [r4, #32]
 8007d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d02:	4643      	mov	r3, r8
 8007d04:	463a      	mov	r2, r7
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b0      	blx	r6
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	dc08      	bgt.n	8007d20 <__sflush_r+0xfc>
 8007d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	4407      	add	r7, r0
 8007d22:	eba8 0800 	sub.w	r8, r8, r0
 8007d26:	e7e7      	b.n	8007cf8 <__sflush_r+0xd4>
 8007d28:	dfbffffe 	.word	0xdfbffffe

08007d2c <_fflush_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	b913      	cbnz	r3, 8007d3c <_fflush_r+0x10>
 8007d36:	2500      	movs	r5, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	b118      	cbz	r0, 8007d46 <_fflush_r+0x1a>
 8007d3e:	6a03      	ldr	r3, [r0, #32]
 8007d40:	b90b      	cbnz	r3, 8007d46 <_fflush_r+0x1a>
 8007d42:	f000 f8bb 	bl	8007ebc <__sinit>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f3      	beq.n	8007d36 <_fflush_r+0xa>
 8007d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d50:	07d0      	lsls	r0, r2, #31
 8007d52:	d404      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d54:	0599      	lsls	r1, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d5a:	f7f9 fe91 	bl	8001a80 <__retarget_lock_acquire_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7ff ff5f 	bl	8007c24 <__sflush_r>
 8007d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d68:	07da      	lsls	r2, r3, #31
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	d4e4      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	059b      	lsls	r3, r3, #22
 8007d72:	d4e1      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d76:	f7f9 fe98 	bl	8001aaa <__retarget_lock_release_recursive>
 8007d7a:	e7dd      	b.n	8007d38 <_fflush_r+0xc>

08007d7c <fflush>:
 8007d7c:	4601      	mov	r1, r0
 8007d7e:	b920      	cbnz	r0, 8007d8a <fflush+0xe>
 8007d80:	4a04      	ldr	r2, [pc, #16]	@ (8007d94 <fflush+0x18>)
 8007d82:	4905      	ldr	r1, [pc, #20]	@ (8007d98 <fflush+0x1c>)
 8007d84:	4805      	ldr	r0, [pc, #20]	@ (8007d9c <fflush+0x20>)
 8007d86:	f000 b8b1 	b.w	8007eec <_fwalk_sglue>
 8007d8a:	4b05      	ldr	r3, [pc, #20]	@ (8007da0 <fflush+0x24>)
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f7ff bfcd 	b.w	8007d2c <_fflush_r>
 8007d92:	bf00      	nop
 8007d94:	20000024 	.word	0x20000024
 8007d98:	08007d2d 	.word	0x08007d2d
 8007d9c:	20000034 	.word	0x20000034
 8007da0:	20000030 	.word	0x20000030

08007da4 <std>:
 8007da4:	2300      	movs	r3, #0
 8007da6:	b510      	push	{r4, lr}
 8007da8:	4604      	mov	r4, r0
 8007daa:	e9c0 3300 	strd	r3, r3, [r0]
 8007dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db2:	6083      	str	r3, [r0, #8]
 8007db4:	8181      	strh	r1, [r0, #12]
 8007db6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007db8:	81c2      	strh	r2, [r0, #14]
 8007dba:	6183      	str	r3, [r0, #24]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	305c      	adds	r0, #92	@ 0x5c
 8007dc2:	f000 f906 	bl	8007fd2 <memset>
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dfc <std+0x58>)
 8007dc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dca:	4b0d      	ldr	r3, [pc, #52]	@ (8007e00 <std+0x5c>)
 8007dcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <std+0x60>)
 8007dd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <std+0x64>)
 8007dd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e0c <std+0x68>)
 8007dd8:	6224      	str	r4, [r4, #32]
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	d006      	beq.n	8007dec <std+0x48>
 8007dde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007de2:	4294      	cmp	r4, r2
 8007de4:	d002      	beq.n	8007dec <std+0x48>
 8007de6:	33d0      	adds	r3, #208	@ 0xd0
 8007de8:	429c      	cmp	r4, r3
 8007dea:	d105      	bne.n	8007df8 <std+0x54>
 8007dec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	f7f9 be1d 	b.w	8001a32 <__retarget_lock_init_recursive>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08007f4d 	.word	0x08007f4d
 8007e00:	08007f6f 	.word	0x08007f6f
 8007e04:	08007fa7 	.word	0x08007fa7
 8007e08:	08007fcb 	.word	0x08007fcb
 8007e0c:	20004ca4 	.word	0x20004ca4

08007e10 <stdio_exit_handler>:
 8007e10:	4a02      	ldr	r2, [pc, #8]	@ (8007e1c <stdio_exit_handler+0xc>)
 8007e12:	4903      	ldr	r1, [pc, #12]	@ (8007e20 <stdio_exit_handler+0x10>)
 8007e14:	4803      	ldr	r0, [pc, #12]	@ (8007e24 <stdio_exit_handler+0x14>)
 8007e16:	f000 b869 	b.w	8007eec <_fwalk_sglue>
 8007e1a:	bf00      	nop
 8007e1c:	20000024 	.word	0x20000024
 8007e20:	08007d2d 	.word	0x08007d2d
 8007e24:	20000034 	.word	0x20000034

08007e28 <cleanup_stdio>:
 8007e28:	6841      	ldr	r1, [r0, #4]
 8007e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e5c <cleanup_stdio+0x34>)
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	d001      	beq.n	8007e38 <cleanup_stdio+0x10>
 8007e34:	f7ff ff7a 	bl	8007d2c <_fflush_r>
 8007e38:	68a1      	ldr	r1, [r4, #8]
 8007e3a:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <cleanup_stdio+0x38>)
 8007e3c:	4299      	cmp	r1, r3
 8007e3e:	d002      	beq.n	8007e46 <cleanup_stdio+0x1e>
 8007e40:	4620      	mov	r0, r4
 8007e42:	f7ff ff73 	bl	8007d2c <_fflush_r>
 8007e46:	68e1      	ldr	r1, [r4, #12]
 8007e48:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <cleanup_stdio+0x3c>)
 8007e4a:	4299      	cmp	r1, r3
 8007e4c:	d004      	beq.n	8007e58 <cleanup_stdio+0x30>
 8007e4e:	4620      	mov	r0, r4
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	f7ff bf6a 	b.w	8007d2c <_fflush_r>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20004ca4 	.word	0x20004ca4
 8007e60:	20004d0c 	.word	0x20004d0c
 8007e64:	20004d74 	.word	0x20004d74

08007e68 <global_stdio_init.part.0>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e98 <global_stdio_init.part.0+0x30>)
 8007e6c:	4c0b      	ldr	r4, [pc, #44]	@ (8007e9c <global_stdio_init.part.0+0x34>)
 8007e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea0 <global_stdio_init.part.0+0x38>)
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	4620      	mov	r0, r4
 8007e74:	2200      	movs	r2, #0
 8007e76:	2104      	movs	r1, #4
 8007e78:	f7ff ff94 	bl	8007da4 <std>
 8007e7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e80:	2201      	movs	r2, #1
 8007e82:	2109      	movs	r1, #9
 8007e84:	f7ff ff8e 	bl	8007da4 <std>
 8007e88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e92:	2112      	movs	r1, #18
 8007e94:	f7ff bf86 	b.w	8007da4 <std>
 8007e98:	20004ddc 	.word	0x20004ddc
 8007e9c:	20004ca4 	.word	0x20004ca4
 8007ea0:	08007e11 	.word	0x08007e11

08007ea4 <__sfp_lock_acquire>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	@ (8007eac <__sfp_lock_acquire+0x8>)
 8007ea6:	f7f9 bdeb 	b.w	8001a80 <__retarget_lock_acquire_recursive>
 8007eaa:	bf00      	nop
 8007eac:	20000298 	.word	0x20000298

08007eb0 <__sfp_lock_release>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	@ (8007eb8 <__sfp_lock_release+0x8>)
 8007eb2:	f7f9 bdfa 	b.w	8001aaa <__retarget_lock_release_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	20000298 	.word	0x20000298

08007ebc <__sinit>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	f7ff fff0 	bl	8007ea4 <__sfp_lock_acquire>
 8007ec4:	6a23      	ldr	r3, [r4, #32]
 8007ec6:	b11b      	cbz	r3, 8007ed0 <__sinit+0x14>
 8007ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ecc:	f7ff bff0 	b.w	8007eb0 <__sfp_lock_release>
 8007ed0:	4b04      	ldr	r3, [pc, #16]	@ (8007ee4 <__sinit+0x28>)
 8007ed2:	6223      	str	r3, [r4, #32]
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <__sinit+0x2c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f5      	bne.n	8007ec8 <__sinit+0xc>
 8007edc:	f7ff ffc4 	bl	8007e68 <global_stdio_init.part.0>
 8007ee0:	e7f2      	b.n	8007ec8 <__sinit+0xc>
 8007ee2:	bf00      	nop
 8007ee4:	08007e29 	.word	0x08007e29
 8007ee8:	20004ddc 	.word	0x20004ddc

08007eec <_fwalk_sglue>:
 8007eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	4688      	mov	r8, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007efc:	f1b9 0901 	subs.w	r9, r9, #1
 8007f00:	d505      	bpl.n	8007f0e <_fwalk_sglue+0x22>
 8007f02:	6824      	ldr	r4, [r4, #0]
 8007f04:	2c00      	cmp	r4, #0
 8007f06:	d1f7      	bne.n	8007ef8 <_fwalk_sglue+0xc>
 8007f08:	4630      	mov	r0, r6
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d907      	bls.n	8007f24 <_fwalk_sglue+0x38>
 8007f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	d003      	beq.n	8007f24 <_fwalk_sglue+0x38>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c0      	blx	r8
 8007f22:	4306      	orrs	r6, r0
 8007f24:	3568      	adds	r5, #104	@ 0x68
 8007f26:	e7e9      	b.n	8007efc <_fwalk_sglue+0x10>

08007f28 <iprintf>:
 8007f28:	b40f      	push	{r0, r1, r2, r3}
 8007f2a:	b507      	push	{r0, r1, r2, lr}
 8007f2c:	4906      	ldr	r1, [pc, #24]	@ (8007f48 <iprintf+0x20>)
 8007f2e:	ab04      	add	r3, sp, #16
 8007f30:	6808      	ldr	r0, [r1, #0]
 8007f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f36:	6881      	ldr	r1, [r0, #8]
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	f000 f9d7 	bl	80082ec <_vfiprintf_r>
 8007f3e:	b003      	add	sp, #12
 8007f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f44:	b004      	add	sp, #16
 8007f46:	4770      	bx	lr
 8007f48:	20000030 	.word	0x20000030

08007f4c <__sread>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	460c      	mov	r4, r1
 8007f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f54:	f000 f8e2 	bl	800811c <_read_r>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	bfab      	itete	ge
 8007f5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f60:	181b      	addge	r3, r3, r0
 8007f62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f66:	bfac      	ite	ge
 8007f68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f6a:	81a3      	strhlt	r3, [r4, #12]
 8007f6c:	bd10      	pop	{r4, pc}

08007f6e <__swrite>:
 8007f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f72:	461f      	mov	r7, r3
 8007f74:	898b      	ldrh	r3, [r1, #12]
 8007f76:	05db      	lsls	r3, r3, #23
 8007f78:	4605      	mov	r5, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	d505      	bpl.n	8007f8c <__swrite+0x1e>
 8007f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f84:	2302      	movs	r3, #2
 8007f86:	2200      	movs	r2, #0
 8007f88:	f000 f8b6 	bl	80080f8 <_lseek_r>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	4632      	mov	r2, r6
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa2:	f000 b8dd 	b.w	8008160 <_write_r>

08007fa6 <__sseek>:
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	460c      	mov	r4, r1
 8007faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fae:	f000 f8a3 	bl	80080f8 <_lseek_r>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	bf15      	itete	ne
 8007fb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fc2:	81a3      	strheq	r3, [r4, #12]
 8007fc4:	bf18      	it	ne
 8007fc6:	81a3      	strhne	r3, [r4, #12]
 8007fc8:	bd10      	pop	{r4, pc}

08007fca <__sclose>:
 8007fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fce:	f000 b82d 	b.w	800802c <_close_r>

08007fd2 <memset>:
 8007fd2:	4402      	add	r2, r0
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d100      	bne.n	8007fdc <memset+0xa>
 8007fda:	4770      	bx	lr
 8007fdc:	f803 1b01 	strb.w	r1, [r3], #1
 8007fe0:	e7f9      	b.n	8007fd6 <memset+0x4>

08007fe2 <strncmp>:
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	b16a      	cbz	r2, 8008002 <strncmp+0x20>
 8007fe6:	3901      	subs	r1, #1
 8007fe8:	1884      	adds	r4, r0, r2
 8007fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d103      	bne.n	8007ffe <strncmp+0x1c>
 8007ff6:	42a0      	cmp	r0, r4
 8007ff8:	d001      	beq.n	8007ffe <strncmp+0x1c>
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	d1f5      	bne.n	8007fea <strncmp+0x8>
 8007ffe:	1ad0      	subs	r0, r2, r3
 8008000:	bd10      	pop	{r4, pc}
 8008002:	4610      	mov	r0, r2
 8008004:	e7fc      	b.n	8008000 <strncmp+0x1e>

08008006 <strncpy>:
 8008006:	b510      	push	{r4, lr}
 8008008:	3901      	subs	r1, #1
 800800a:	4603      	mov	r3, r0
 800800c:	b132      	cbz	r2, 800801c <strncpy+0x16>
 800800e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008012:	f803 4b01 	strb.w	r4, [r3], #1
 8008016:	3a01      	subs	r2, #1
 8008018:	2c00      	cmp	r4, #0
 800801a:	d1f7      	bne.n	800800c <strncpy+0x6>
 800801c:	441a      	add	r2, r3
 800801e:	2100      	movs	r1, #0
 8008020:	4293      	cmp	r3, r2
 8008022:	d100      	bne.n	8008026 <strncpy+0x20>
 8008024:	bd10      	pop	{r4, pc}
 8008026:	f803 1b01 	strb.w	r1, [r3], #1
 800802a:	e7f9      	b.n	8008020 <strncpy+0x1a>

0800802c <_close_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d06      	ldr	r5, [pc, #24]	@ (8008048 <_close_r+0x1c>)
 8008030:	2300      	movs	r3, #0
 8008032:	4604      	mov	r4, r0
 8008034:	4608      	mov	r0, r1
 8008036:	602b      	str	r3, [r5, #0]
 8008038:	f7f9 fa53 	bl	80014e2 <_close>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_close_r+0x1a>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	b103      	cbz	r3, 8008046 <_close_r+0x1a>
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	20004de0 	.word	0x20004de0

0800804c <_reclaim_reent>:
 800804c:	4b29      	ldr	r3, [pc, #164]	@ (80080f4 <_reclaim_reent+0xa8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4283      	cmp	r3, r0
 8008052:	b570      	push	{r4, r5, r6, lr}
 8008054:	4604      	mov	r4, r0
 8008056:	d04b      	beq.n	80080f0 <_reclaim_reent+0xa4>
 8008058:	69c3      	ldr	r3, [r0, #28]
 800805a:	b1ab      	cbz	r3, 8008088 <_reclaim_reent+0x3c>
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	b16b      	cbz	r3, 800807c <_reclaim_reent+0x30>
 8008060:	2500      	movs	r5, #0
 8008062:	69e3      	ldr	r3, [r4, #28]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	5959      	ldr	r1, [r3, r5]
 8008068:	2900      	cmp	r1, #0
 800806a:	d13b      	bne.n	80080e4 <_reclaim_reent+0x98>
 800806c:	3504      	adds	r5, #4
 800806e:	2d80      	cmp	r5, #128	@ 0x80
 8008070:	d1f7      	bne.n	8008062 <_reclaim_reent+0x16>
 8008072:	69e3      	ldr	r3, [r4, #28]
 8008074:	4620      	mov	r0, r4
 8008076:	68d9      	ldr	r1, [r3, #12]
 8008078:	f000 f8c4 	bl	8008204 <_free_r>
 800807c:	69e3      	ldr	r3, [r4, #28]
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	b111      	cbz	r1, 8008088 <_reclaim_reent+0x3c>
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f8be 	bl	8008204 <_free_r>
 8008088:	6961      	ldr	r1, [r4, #20]
 800808a:	b111      	cbz	r1, 8008092 <_reclaim_reent+0x46>
 800808c:	4620      	mov	r0, r4
 800808e:	f000 f8b9 	bl	8008204 <_free_r>
 8008092:	69e1      	ldr	r1, [r4, #28]
 8008094:	b111      	cbz	r1, 800809c <_reclaim_reent+0x50>
 8008096:	4620      	mov	r0, r4
 8008098:	f000 f8b4 	bl	8008204 <_free_r>
 800809c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800809e:	b111      	cbz	r1, 80080a6 <_reclaim_reent+0x5a>
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 f8af 	bl	8008204 <_free_r>
 80080a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080a8:	b111      	cbz	r1, 80080b0 <_reclaim_reent+0x64>
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f8aa 	bl	8008204 <_free_r>
 80080b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80080b2:	b111      	cbz	r1, 80080ba <_reclaim_reent+0x6e>
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 f8a5 	bl	8008204 <_free_r>
 80080ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80080bc:	b111      	cbz	r1, 80080c4 <_reclaim_reent+0x78>
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 f8a0 	bl	8008204 <_free_r>
 80080c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80080c6:	b111      	cbz	r1, 80080ce <_reclaim_reent+0x82>
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 f89b 	bl	8008204 <_free_r>
 80080ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80080d0:	b111      	cbz	r1, 80080d8 <_reclaim_reent+0x8c>
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f896 	bl	8008204 <_free_r>
 80080d8:	6a23      	ldr	r3, [r4, #32]
 80080da:	b14b      	cbz	r3, 80080f0 <_reclaim_reent+0xa4>
 80080dc:	4620      	mov	r0, r4
 80080de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080e2:	4718      	bx	r3
 80080e4:	680e      	ldr	r6, [r1, #0]
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 f88c 	bl	8008204 <_free_r>
 80080ec:	4631      	mov	r1, r6
 80080ee:	e7bb      	b.n	8008068 <_reclaim_reent+0x1c>
 80080f0:	bd70      	pop	{r4, r5, r6, pc}
 80080f2:	bf00      	nop
 80080f4:	20000030 	.word	0x20000030

080080f8 <_lseek_r>:
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4d07      	ldr	r5, [pc, #28]	@ (8008118 <_lseek_r+0x20>)
 80080fc:	4604      	mov	r4, r0
 80080fe:	4608      	mov	r0, r1
 8008100:	4611      	mov	r1, r2
 8008102:	2200      	movs	r2, #0
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f7f9 fa12 	bl	8001530 <_lseek>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_lseek_r+0x1e>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_lseek_r+0x1e>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	20004de0 	.word	0x20004de0

0800811c <_read_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4d07      	ldr	r5, [pc, #28]	@ (800813c <_read_r+0x20>)
 8008120:	4604      	mov	r4, r0
 8008122:	4608      	mov	r0, r1
 8008124:	4611      	mov	r1, r2
 8008126:	2200      	movs	r2, #0
 8008128:	602a      	str	r2, [r5, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	f7f9 f9bc 	bl	80014a8 <_read>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_read_r+0x1e>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_read_r+0x1e>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	20004de0 	.word	0x20004de0

08008140 <_sbrk_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d06      	ldr	r5, [pc, #24]	@ (800815c <_sbrk_r+0x1c>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	f7f9 f9fe 	bl	800154c <_sbrk>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_sbrk_r+0x1a>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_sbrk_r+0x1a>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	20004de0 	.word	0x20004de0

08008160 <_write_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d07      	ldr	r5, [pc, #28]	@ (8008180 <_write_r+0x20>)
 8008164:	4604      	mov	r4, r0
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	2200      	movs	r2, #0
 800816c:	602a      	str	r2, [r5, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f7f8 fc36 	bl	80009e0 <_write>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_write_r+0x1e>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_write_r+0x1e>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	20004de0 	.word	0x20004de0

08008184 <__errno>:
 8008184:	4b01      	ldr	r3, [pc, #4]	@ (800818c <__errno+0x8>)
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	20000030 	.word	0x20000030

08008190 <__libc_init_array>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	4d0d      	ldr	r5, [pc, #52]	@ (80081c8 <__libc_init_array+0x38>)
 8008194:	4c0d      	ldr	r4, [pc, #52]	@ (80081cc <__libc_init_array+0x3c>)
 8008196:	1b64      	subs	r4, r4, r5
 8008198:	10a4      	asrs	r4, r4, #2
 800819a:	2600      	movs	r6, #0
 800819c:	42a6      	cmp	r6, r4
 800819e:	d109      	bne.n	80081b4 <__libc_init_array+0x24>
 80081a0:	4d0b      	ldr	r5, [pc, #44]	@ (80081d0 <__libc_init_array+0x40>)
 80081a2:	4c0c      	ldr	r4, [pc, #48]	@ (80081d4 <__libc_init_array+0x44>)
 80081a4:	f000 fc60 	bl	8008a68 <_init>
 80081a8:	1b64      	subs	r4, r4, r5
 80081aa:	10a4      	asrs	r4, r4, #2
 80081ac:	2600      	movs	r6, #0
 80081ae:	42a6      	cmp	r6, r4
 80081b0:	d105      	bne.n	80081be <__libc_init_array+0x2e>
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b8:	4798      	blx	r3
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7ee      	b.n	800819c <__libc_init_array+0xc>
 80081be:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c2:	4798      	blx	r3
 80081c4:	3601      	adds	r6, #1
 80081c6:	e7f2      	b.n	80081ae <__libc_init_array+0x1e>
 80081c8:	08009120 	.word	0x08009120
 80081cc:	08009120 	.word	0x08009120
 80081d0:	08009120 	.word	0x08009120
 80081d4:	08009124 	.word	0x08009124

080081d8 <strcpy>:
 80081d8:	4603      	mov	r3, r0
 80081da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081de:	f803 2b01 	strb.w	r2, [r3], #1
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d1f9      	bne.n	80081da <strcpy+0x2>
 80081e6:	4770      	bx	lr

080081e8 <memcpy>:
 80081e8:	440a      	add	r2, r1
 80081ea:	4291      	cmp	r1, r2
 80081ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80081f0:	d100      	bne.n	80081f4 <memcpy+0xc>
 80081f2:	4770      	bx	lr
 80081f4:	b510      	push	{r4, lr}
 80081f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081fe:	4291      	cmp	r1, r2
 8008200:	d1f9      	bne.n	80081f6 <memcpy+0xe>
 8008202:	bd10      	pop	{r4, pc}

08008204 <_free_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4605      	mov	r5, r0
 8008208:	2900      	cmp	r1, #0
 800820a:	d041      	beq.n	8008290 <_free_r+0x8c>
 800820c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008210:	1f0c      	subs	r4, r1, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfb8      	it	lt
 8008216:	18e4      	addlt	r4, r4, r3
 8008218:	f7ff fc32 	bl	8007a80 <__malloc_lock>
 800821c:	4a1d      	ldr	r2, [pc, #116]	@ (8008294 <_free_r+0x90>)
 800821e:	6813      	ldr	r3, [r2, #0]
 8008220:	b933      	cbnz	r3, 8008230 <_free_r+0x2c>
 8008222:	6063      	str	r3, [r4, #4]
 8008224:	6014      	str	r4, [r2, #0]
 8008226:	4628      	mov	r0, r5
 8008228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800822c:	f7ff bc2e 	b.w	8007a8c <__malloc_unlock>
 8008230:	42a3      	cmp	r3, r4
 8008232:	d908      	bls.n	8008246 <_free_r+0x42>
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	1821      	adds	r1, r4, r0
 8008238:	428b      	cmp	r3, r1
 800823a:	bf01      	itttt	eq
 800823c:	6819      	ldreq	r1, [r3, #0]
 800823e:	685b      	ldreq	r3, [r3, #4]
 8008240:	1809      	addeq	r1, r1, r0
 8008242:	6021      	streq	r1, [r4, #0]
 8008244:	e7ed      	b.n	8008222 <_free_r+0x1e>
 8008246:	461a      	mov	r2, r3
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	b10b      	cbz	r3, 8008250 <_free_r+0x4c>
 800824c:	42a3      	cmp	r3, r4
 800824e:	d9fa      	bls.n	8008246 <_free_r+0x42>
 8008250:	6811      	ldr	r1, [r2, #0]
 8008252:	1850      	adds	r0, r2, r1
 8008254:	42a0      	cmp	r0, r4
 8008256:	d10b      	bne.n	8008270 <_free_r+0x6c>
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	4401      	add	r1, r0
 800825c:	1850      	adds	r0, r2, r1
 800825e:	4283      	cmp	r3, r0
 8008260:	6011      	str	r1, [r2, #0]
 8008262:	d1e0      	bne.n	8008226 <_free_r+0x22>
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	6053      	str	r3, [r2, #4]
 800826a:	4408      	add	r0, r1
 800826c:	6010      	str	r0, [r2, #0]
 800826e:	e7da      	b.n	8008226 <_free_r+0x22>
 8008270:	d902      	bls.n	8008278 <_free_r+0x74>
 8008272:	230c      	movs	r3, #12
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	e7d6      	b.n	8008226 <_free_r+0x22>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	1821      	adds	r1, r4, r0
 800827c:	428b      	cmp	r3, r1
 800827e:	bf04      	itt	eq
 8008280:	6819      	ldreq	r1, [r3, #0]
 8008282:	685b      	ldreq	r3, [r3, #4]
 8008284:	6063      	str	r3, [r4, #4]
 8008286:	bf04      	itt	eq
 8008288:	1809      	addeq	r1, r1, r0
 800828a:	6021      	streq	r1, [r4, #0]
 800828c:	6054      	str	r4, [r2, #4]
 800828e:	e7ca      	b.n	8008226 <_free_r+0x22>
 8008290:	bd38      	pop	{r3, r4, r5, pc}
 8008292:	bf00      	nop
 8008294:	20004ca0 	.word	0x20004ca0

08008298 <__sfputc_r>:
 8008298:	6893      	ldr	r3, [r2, #8]
 800829a:	3b01      	subs	r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	b410      	push	{r4}
 80082a0:	6093      	str	r3, [r2, #8]
 80082a2:	da08      	bge.n	80082b6 <__sfputc_r+0x1e>
 80082a4:	6994      	ldr	r4, [r2, #24]
 80082a6:	42a3      	cmp	r3, r4
 80082a8:	db01      	blt.n	80082ae <__sfputc_r+0x16>
 80082aa:	290a      	cmp	r1, #10
 80082ac:	d103      	bne.n	80082b6 <__sfputc_r+0x1e>
 80082ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b2:	f000 bac1 	b.w	8008838 <__swbuf_r>
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	1c58      	adds	r0, r3, #1
 80082ba:	6010      	str	r0, [r2, #0]
 80082bc:	7019      	strb	r1, [r3, #0]
 80082be:	4608      	mov	r0, r1
 80082c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <__sfputs_r>:
 80082c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c8:	4606      	mov	r6, r0
 80082ca:	460f      	mov	r7, r1
 80082cc:	4614      	mov	r4, r2
 80082ce:	18d5      	adds	r5, r2, r3
 80082d0:	42ac      	cmp	r4, r5
 80082d2:	d101      	bne.n	80082d8 <__sfputs_r+0x12>
 80082d4:	2000      	movs	r0, #0
 80082d6:	e007      	b.n	80082e8 <__sfputs_r+0x22>
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	463a      	mov	r2, r7
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff ffda 	bl	8008298 <__sfputc_r>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d1f3      	bne.n	80082d0 <__sfputs_r+0xa>
 80082e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082ec <_vfiprintf_r>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	460d      	mov	r5, r1
 80082f2:	b09d      	sub	sp, #116	@ 0x74
 80082f4:	4614      	mov	r4, r2
 80082f6:	4698      	mov	r8, r3
 80082f8:	4606      	mov	r6, r0
 80082fa:	b118      	cbz	r0, 8008304 <_vfiprintf_r+0x18>
 80082fc:	6a03      	ldr	r3, [r0, #32]
 80082fe:	b90b      	cbnz	r3, 8008304 <_vfiprintf_r+0x18>
 8008300:	f7ff fddc 	bl	8007ebc <__sinit>
 8008304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008306:	07d9      	lsls	r1, r3, #31
 8008308:	d405      	bmi.n	8008316 <_vfiprintf_r+0x2a>
 800830a:	89ab      	ldrh	r3, [r5, #12]
 800830c:	059a      	lsls	r2, r3, #22
 800830e:	d402      	bmi.n	8008316 <_vfiprintf_r+0x2a>
 8008310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008312:	f7f9 fbb5 	bl	8001a80 <__retarget_lock_acquire_recursive>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	071b      	lsls	r3, r3, #28
 800831a:	d501      	bpl.n	8008320 <_vfiprintf_r+0x34>
 800831c:	692b      	ldr	r3, [r5, #16]
 800831e:	b99b      	cbnz	r3, 8008348 <_vfiprintf_r+0x5c>
 8008320:	4629      	mov	r1, r5
 8008322:	4630      	mov	r0, r6
 8008324:	f000 fac6 	bl	80088b4 <__swsetup_r>
 8008328:	b170      	cbz	r0, 8008348 <_vfiprintf_r+0x5c>
 800832a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800832c:	07dc      	lsls	r4, r3, #31
 800832e:	d504      	bpl.n	800833a <_vfiprintf_r+0x4e>
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	b01d      	add	sp, #116	@ 0x74
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	0598      	lsls	r0, r3, #22
 800833e:	d4f7      	bmi.n	8008330 <_vfiprintf_r+0x44>
 8008340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008342:	f7f9 fbb2 	bl	8001aaa <__retarget_lock_release_recursive>
 8008346:	e7f3      	b.n	8008330 <_vfiprintf_r+0x44>
 8008348:	2300      	movs	r3, #0
 800834a:	9309      	str	r3, [sp, #36]	@ 0x24
 800834c:	2320      	movs	r3, #32
 800834e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008352:	f8cd 800c 	str.w	r8, [sp, #12]
 8008356:	2330      	movs	r3, #48	@ 0x30
 8008358:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008508 <_vfiprintf_r+0x21c>
 800835c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008360:	f04f 0901 	mov.w	r9, #1
 8008364:	4623      	mov	r3, r4
 8008366:	469a      	mov	sl, r3
 8008368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836c:	b10a      	cbz	r2, 8008372 <_vfiprintf_r+0x86>
 800836e:	2a25      	cmp	r2, #37	@ 0x25
 8008370:	d1f9      	bne.n	8008366 <_vfiprintf_r+0x7a>
 8008372:	ebba 0b04 	subs.w	fp, sl, r4
 8008376:	d00b      	beq.n	8008390 <_vfiprintf_r+0xa4>
 8008378:	465b      	mov	r3, fp
 800837a:	4622      	mov	r2, r4
 800837c:	4629      	mov	r1, r5
 800837e:	4630      	mov	r0, r6
 8008380:	f7ff ffa1 	bl	80082c6 <__sfputs_r>
 8008384:	3001      	adds	r0, #1
 8008386:	f000 80a7 	beq.w	80084d8 <_vfiprintf_r+0x1ec>
 800838a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800838c:	445a      	add	r2, fp
 800838e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008390:	f89a 3000 	ldrb.w	r3, [sl]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 809f 	beq.w	80084d8 <_vfiprintf_r+0x1ec>
 800839a:	2300      	movs	r3, #0
 800839c:	f04f 32ff 	mov.w	r2, #4294967295
 80083a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a4:	f10a 0a01 	add.w	sl, sl, #1
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	9307      	str	r3, [sp, #28]
 80083ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80083b2:	4654      	mov	r4, sl
 80083b4:	2205      	movs	r2, #5
 80083b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ba:	4853      	ldr	r0, [pc, #332]	@ (8008508 <_vfiprintf_r+0x21c>)
 80083bc:	f7f7 ff18 	bl	80001f0 <memchr>
 80083c0:	9a04      	ldr	r2, [sp, #16]
 80083c2:	b9d8      	cbnz	r0, 80083fc <_vfiprintf_r+0x110>
 80083c4:	06d1      	lsls	r1, r2, #27
 80083c6:	bf44      	itt	mi
 80083c8:	2320      	movmi	r3, #32
 80083ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ce:	0713      	lsls	r3, r2, #28
 80083d0:	bf44      	itt	mi
 80083d2:	232b      	movmi	r3, #43	@ 0x2b
 80083d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083d8:	f89a 3000 	ldrb.w	r3, [sl]
 80083dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80083de:	d015      	beq.n	800840c <_vfiprintf_r+0x120>
 80083e0:	9a07      	ldr	r2, [sp, #28]
 80083e2:	4654      	mov	r4, sl
 80083e4:	2000      	movs	r0, #0
 80083e6:	f04f 0c0a 	mov.w	ip, #10
 80083ea:	4621      	mov	r1, r4
 80083ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f0:	3b30      	subs	r3, #48	@ 0x30
 80083f2:	2b09      	cmp	r3, #9
 80083f4:	d94b      	bls.n	800848e <_vfiprintf_r+0x1a2>
 80083f6:	b1b0      	cbz	r0, 8008426 <_vfiprintf_r+0x13a>
 80083f8:	9207      	str	r2, [sp, #28]
 80083fa:	e014      	b.n	8008426 <_vfiprintf_r+0x13a>
 80083fc:	eba0 0308 	sub.w	r3, r0, r8
 8008400:	fa09 f303 	lsl.w	r3, r9, r3
 8008404:	4313      	orrs	r3, r2
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	46a2      	mov	sl, r4
 800840a:	e7d2      	b.n	80083b2 <_vfiprintf_r+0xc6>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	1d19      	adds	r1, r3, #4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	9103      	str	r1, [sp, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	bfbb      	ittet	lt
 8008418:	425b      	neglt	r3, r3
 800841a:	f042 0202 	orrlt.w	r2, r2, #2
 800841e:	9307      	strge	r3, [sp, #28]
 8008420:	9307      	strlt	r3, [sp, #28]
 8008422:	bfb8      	it	lt
 8008424:	9204      	strlt	r2, [sp, #16]
 8008426:	7823      	ldrb	r3, [r4, #0]
 8008428:	2b2e      	cmp	r3, #46	@ 0x2e
 800842a:	d10a      	bne.n	8008442 <_vfiprintf_r+0x156>
 800842c:	7863      	ldrb	r3, [r4, #1]
 800842e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008430:	d132      	bne.n	8008498 <_vfiprintf_r+0x1ac>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	9203      	str	r2, [sp, #12]
 800843a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800843e:	3402      	adds	r4, #2
 8008440:	9305      	str	r3, [sp, #20]
 8008442:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008518 <_vfiprintf_r+0x22c>
 8008446:	7821      	ldrb	r1, [r4, #0]
 8008448:	2203      	movs	r2, #3
 800844a:	4650      	mov	r0, sl
 800844c:	f7f7 fed0 	bl	80001f0 <memchr>
 8008450:	b138      	cbz	r0, 8008462 <_vfiprintf_r+0x176>
 8008452:	9b04      	ldr	r3, [sp, #16]
 8008454:	eba0 000a 	sub.w	r0, r0, sl
 8008458:	2240      	movs	r2, #64	@ 0x40
 800845a:	4082      	lsls	r2, r0
 800845c:	4313      	orrs	r3, r2
 800845e:	3401      	adds	r4, #1
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008466:	4829      	ldr	r0, [pc, #164]	@ (800850c <_vfiprintf_r+0x220>)
 8008468:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800846c:	2206      	movs	r2, #6
 800846e:	f7f7 febf 	bl	80001f0 <memchr>
 8008472:	2800      	cmp	r0, #0
 8008474:	d03f      	beq.n	80084f6 <_vfiprintf_r+0x20a>
 8008476:	4b26      	ldr	r3, [pc, #152]	@ (8008510 <_vfiprintf_r+0x224>)
 8008478:	bb1b      	cbnz	r3, 80084c2 <_vfiprintf_r+0x1d6>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	3307      	adds	r3, #7
 800847e:	f023 0307 	bic.w	r3, r3, #7
 8008482:	3308      	adds	r3, #8
 8008484:	9303      	str	r3, [sp, #12]
 8008486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008488:	443b      	add	r3, r7
 800848a:	9309      	str	r3, [sp, #36]	@ 0x24
 800848c:	e76a      	b.n	8008364 <_vfiprintf_r+0x78>
 800848e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008492:	460c      	mov	r4, r1
 8008494:	2001      	movs	r0, #1
 8008496:	e7a8      	b.n	80083ea <_vfiprintf_r+0xfe>
 8008498:	2300      	movs	r3, #0
 800849a:	3401      	adds	r4, #1
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	4619      	mov	r1, r3
 80084a0:	f04f 0c0a 	mov.w	ip, #10
 80084a4:	4620      	mov	r0, r4
 80084a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084aa:	3a30      	subs	r2, #48	@ 0x30
 80084ac:	2a09      	cmp	r2, #9
 80084ae:	d903      	bls.n	80084b8 <_vfiprintf_r+0x1cc>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0c6      	beq.n	8008442 <_vfiprintf_r+0x156>
 80084b4:	9105      	str	r1, [sp, #20]
 80084b6:	e7c4      	b.n	8008442 <_vfiprintf_r+0x156>
 80084b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084bc:	4604      	mov	r4, r0
 80084be:	2301      	movs	r3, #1
 80084c0:	e7f0      	b.n	80084a4 <_vfiprintf_r+0x1b8>
 80084c2:	ab03      	add	r3, sp, #12
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	462a      	mov	r2, r5
 80084c8:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <_vfiprintf_r+0x228>)
 80084ca:	a904      	add	r1, sp, #16
 80084cc:	4630      	mov	r0, r6
 80084ce:	f3af 8000 	nop.w
 80084d2:	4607      	mov	r7, r0
 80084d4:	1c78      	adds	r0, r7, #1
 80084d6:	d1d6      	bne.n	8008486 <_vfiprintf_r+0x19a>
 80084d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084da:	07d9      	lsls	r1, r3, #31
 80084dc:	d405      	bmi.n	80084ea <_vfiprintf_r+0x1fe>
 80084de:	89ab      	ldrh	r3, [r5, #12]
 80084e0:	059a      	lsls	r2, r3, #22
 80084e2:	d402      	bmi.n	80084ea <_vfiprintf_r+0x1fe>
 80084e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084e6:	f7f9 fae0 	bl	8001aaa <__retarget_lock_release_recursive>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	065b      	lsls	r3, r3, #25
 80084ee:	f53f af1f 	bmi.w	8008330 <_vfiprintf_r+0x44>
 80084f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084f4:	e71e      	b.n	8008334 <_vfiprintf_r+0x48>
 80084f6:	ab03      	add	r3, sp, #12
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	462a      	mov	r2, r5
 80084fc:	4b05      	ldr	r3, [pc, #20]	@ (8008514 <_vfiprintf_r+0x228>)
 80084fe:	a904      	add	r1, sp, #16
 8008500:	4630      	mov	r0, r6
 8008502:	f000 f879 	bl	80085f8 <_printf_i>
 8008506:	e7e4      	b.n	80084d2 <_vfiprintf_r+0x1e6>
 8008508:	080090e2 	.word	0x080090e2
 800850c:	080090ec 	.word	0x080090ec
 8008510:	00000000 	.word	0x00000000
 8008514:	080082c7 	.word	0x080082c7
 8008518:	080090e8 	.word	0x080090e8

0800851c <_printf_common>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	4616      	mov	r6, r2
 8008522:	4698      	mov	r8, r3
 8008524:	688a      	ldr	r2, [r1, #8]
 8008526:	690b      	ldr	r3, [r1, #16]
 8008528:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800852c:	4293      	cmp	r3, r2
 800852e:	bfb8      	it	lt
 8008530:	4613      	movlt	r3, r2
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008538:	4607      	mov	r7, r0
 800853a:	460c      	mov	r4, r1
 800853c:	b10a      	cbz	r2, 8008542 <_printf_common+0x26>
 800853e:	3301      	adds	r3, #1
 8008540:	6033      	str	r3, [r6, #0]
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	0699      	lsls	r1, r3, #26
 8008546:	bf42      	ittt	mi
 8008548:	6833      	ldrmi	r3, [r6, #0]
 800854a:	3302      	addmi	r3, #2
 800854c:	6033      	strmi	r3, [r6, #0]
 800854e:	6825      	ldr	r5, [r4, #0]
 8008550:	f015 0506 	ands.w	r5, r5, #6
 8008554:	d106      	bne.n	8008564 <_printf_common+0x48>
 8008556:	f104 0a19 	add.w	sl, r4, #25
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	6832      	ldr	r2, [r6, #0]
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	42ab      	cmp	r3, r5
 8008562:	dc26      	bgt.n	80085b2 <_printf_common+0x96>
 8008564:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	3b00      	subs	r3, #0
 800856c:	bf18      	it	ne
 800856e:	2301      	movne	r3, #1
 8008570:	0692      	lsls	r2, r2, #26
 8008572:	d42b      	bmi.n	80085cc <_printf_common+0xb0>
 8008574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008578:	4641      	mov	r1, r8
 800857a:	4638      	mov	r0, r7
 800857c:	47c8      	blx	r9
 800857e:	3001      	adds	r0, #1
 8008580:	d01e      	beq.n	80085c0 <_printf_common+0xa4>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	6922      	ldr	r2, [r4, #16]
 8008586:	f003 0306 	and.w	r3, r3, #6
 800858a:	2b04      	cmp	r3, #4
 800858c:	bf02      	ittt	eq
 800858e:	68e5      	ldreq	r5, [r4, #12]
 8008590:	6833      	ldreq	r3, [r6, #0]
 8008592:	1aed      	subeq	r5, r5, r3
 8008594:	68a3      	ldr	r3, [r4, #8]
 8008596:	bf0c      	ite	eq
 8008598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800859c:	2500      	movne	r5, #0
 800859e:	4293      	cmp	r3, r2
 80085a0:	bfc4      	itt	gt
 80085a2:	1a9b      	subgt	r3, r3, r2
 80085a4:	18ed      	addgt	r5, r5, r3
 80085a6:	2600      	movs	r6, #0
 80085a8:	341a      	adds	r4, #26
 80085aa:	42b5      	cmp	r5, r6
 80085ac:	d11a      	bne.n	80085e4 <_printf_common+0xc8>
 80085ae:	2000      	movs	r0, #0
 80085b0:	e008      	b.n	80085c4 <_printf_common+0xa8>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4652      	mov	r2, sl
 80085b6:	4641      	mov	r1, r8
 80085b8:	4638      	mov	r0, r7
 80085ba:	47c8      	blx	r9
 80085bc:	3001      	adds	r0, #1
 80085be:	d103      	bne.n	80085c8 <_printf_common+0xac>
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c8:	3501      	adds	r5, #1
 80085ca:	e7c6      	b.n	800855a <_printf_common+0x3e>
 80085cc:	18e1      	adds	r1, r4, r3
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	2030      	movs	r0, #48	@ 0x30
 80085d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085d6:	4422      	add	r2, r4
 80085d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085e0:	3302      	adds	r3, #2
 80085e2:	e7c7      	b.n	8008574 <_printf_common+0x58>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4622      	mov	r2, r4
 80085e8:	4641      	mov	r1, r8
 80085ea:	4638      	mov	r0, r7
 80085ec:	47c8      	blx	r9
 80085ee:	3001      	adds	r0, #1
 80085f0:	d0e6      	beq.n	80085c0 <_printf_common+0xa4>
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7d9      	b.n	80085aa <_printf_common+0x8e>
	...

080085f8 <_printf_i>:
 80085f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	7e0f      	ldrb	r7, [r1, #24]
 80085fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008600:	2f78      	cmp	r7, #120	@ 0x78
 8008602:	4691      	mov	r9, r2
 8008604:	4680      	mov	r8, r0
 8008606:	460c      	mov	r4, r1
 8008608:	469a      	mov	sl, r3
 800860a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800860e:	d807      	bhi.n	8008620 <_printf_i+0x28>
 8008610:	2f62      	cmp	r7, #98	@ 0x62
 8008612:	d80a      	bhi.n	800862a <_printf_i+0x32>
 8008614:	2f00      	cmp	r7, #0
 8008616:	f000 80d2 	beq.w	80087be <_printf_i+0x1c6>
 800861a:	2f58      	cmp	r7, #88	@ 0x58
 800861c:	f000 80b9 	beq.w	8008792 <_printf_i+0x19a>
 8008620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008624:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008628:	e03a      	b.n	80086a0 <_printf_i+0xa8>
 800862a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800862e:	2b15      	cmp	r3, #21
 8008630:	d8f6      	bhi.n	8008620 <_printf_i+0x28>
 8008632:	a101      	add	r1, pc, #4	@ (adr r1, 8008638 <_printf_i+0x40>)
 8008634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008638:	08008691 	.word	0x08008691
 800863c:	080086a5 	.word	0x080086a5
 8008640:	08008621 	.word	0x08008621
 8008644:	08008621 	.word	0x08008621
 8008648:	08008621 	.word	0x08008621
 800864c:	08008621 	.word	0x08008621
 8008650:	080086a5 	.word	0x080086a5
 8008654:	08008621 	.word	0x08008621
 8008658:	08008621 	.word	0x08008621
 800865c:	08008621 	.word	0x08008621
 8008660:	08008621 	.word	0x08008621
 8008664:	080087a5 	.word	0x080087a5
 8008668:	080086cf 	.word	0x080086cf
 800866c:	0800875f 	.word	0x0800875f
 8008670:	08008621 	.word	0x08008621
 8008674:	08008621 	.word	0x08008621
 8008678:	080087c7 	.word	0x080087c7
 800867c:	08008621 	.word	0x08008621
 8008680:	080086cf 	.word	0x080086cf
 8008684:	08008621 	.word	0x08008621
 8008688:	08008621 	.word	0x08008621
 800868c:	08008767 	.word	0x08008767
 8008690:	6833      	ldr	r3, [r6, #0]
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6032      	str	r2, [r6, #0]
 8008698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800869c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086a0:	2301      	movs	r3, #1
 80086a2:	e09d      	b.n	80087e0 <_printf_i+0x1e8>
 80086a4:	6833      	ldr	r3, [r6, #0]
 80086a6:	6820      	ldr	r0, [r4, #0]
 80086a8:	1d19      	adds	r1, r3, #4
 80086aa:	6031      	str	r1, [r6, #0]
 80086ac:	0606      	lsls	r6, r0, #24
 80086ae:	d501      	bpl.n	80086b4 <_printf_i+0xbc>
 80086b0:	681d      	ldr	r5, [r3, #0]
 80086b2:	e003      	b.n	80086bc <_printf_i+0xc4>
 80086b4:	0645      	lsls	r5, r0, #25
 80086b6:	d5fb      	bpl.n	80086b0 <_printf_i+0xb8>
 80086b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086bc:	2d00      	cmp	r5, #0
 80086be:	da03      	bge.n	80086c8 <_printf_i+0xd0>
 80086c0:	232d      	movs	r3, #45	@ 0x2d
 80086c2:	426d      	negs	r5, r5
 80086c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086c8:	4859      	ldr	r0, [pc, #356]	@ (8008830 <_printf_i+0x238>)
 80086ca:	230a      	movs	r3, #10
 80086cc:	e011      	b.n	80086f2 <_printf_i+0xfa>
 80086ce:	6821      	ldr	r1, [r4, #0]
 80086d0:	6833      	ldr	r3, [r6, #0]
 80086d2:	0608      	lsls	r0, r1, #24
 80086d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80086d8:	d402      	bmi.n	80086e0 <_printf_i+0xe8>
 80086da:	0649      	lsls	r1, r1, #25
 80086dc:	bf48      	it	mi
 80086de:	b2ad      	uxthmi	r5, r5
 80086e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80086e2:	4853      	ldr	r0, [pc, #332]	@ (8008830 <_printf_i+0x238>)
 80086e4:	6033      	str	r3, [r6, #0]
 80086e6:	bf14      	ite	ne
 80086e8:	230a      	movne	r3, #10
 80086ea:	2308      	moveq	r3, #8
 80086ec:	2100      	movs	r1, #0
 80086ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086f2:	6866      	ldr	r6, [r4, #4]
 80086f4:	60a6      	str	r6, [r4, #8]
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	bfa2      	ittt	ge
 80086fa:	6821      	ldrge	r1, [r4, #0]
 80086fc:	f021 0104 	bicge.w	r1, r1, #4
 8008700:	6021      	strge	r1, [r4, #0]
 8008702:	b90d      	cbnz	r5, 8008708 <_printf_i+0x110>
 8008704:	2e00      	cmp	r6, #0
 8008706:	d04b      	beq.n	80087a0 <_printf_i+0x1a8>
 8008708:	4616      	mov	r6, r2
 800870a:	fbb5 f1f3 	udiv	r1, r5, r3
 800870e:	fb03 5711 	mls	r7, r3, r1, r5
 8008712:	5dc7      	ldrb	r7, [r0, r7]
 8008714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008718:	462f      	mov	r7, r5
 800871a:	42bb      	cmp	r3, r7
 800871c:	460d      	mov	r5, r1
 800871e:	d9f4      	bls.n	800870a <_printf_i+0x112>
 8008720:	2b08      	cmp	r3, #8
 8008722:	d10b      	bne.n	800873c <_printf_i+0x144>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	07df      	lsls	r7, r3, #31
 8008728:	d508      	bpl.n	800873c <_printf_i+0x144>
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	6861      	ldr	r1, [r4, #4]
 800872e:	4299      	cmp	r1, r3
 8008730:	bfde      	ittt	le
 8008732:	2330      	movle	r3, #48	@ 0x30
 8008734:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008738:	f106 36ff 	addle.w	r6, r6, #4294967295
 800873c:	1b92      	subs	r2, r2, r6
 800873e:	6122      	str	r2, [r4, #16]
 8008740:	f8cd a000 	str.w	sl, [sp]
 8008744:	464b      	mov	r3, r9
 8008746:	aa03      	add	r2, sp, #12
 8008748:	4621      	mov	r1, r4
 800874a:	4640      	mov	r0, r8
 800874c:	f7ff fee6 	bl	800851c <_printf_common>
 8008750:	3001      	adds	r0, #1
 8008752:	d14a      	bne.n	80087ea <_printf_i+0x1f2>
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	b004      	add	sp, #16
 800875a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	f043 0320 	orr.w	r3, r3, #32
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	4833      	ldr	r0, [pc, #204]	@ (8008834 <_printf_i+0x23c>)
 8008768:	2778      	movs	r7, #120	@ 0x78
 800876a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	6831      	ldr	r1, [r6, #0]
 8008772:	061f      	lsls	r7, r3, #24
 8008774:	f851 5b04 	ldr.w	r5, [r1], #4
 8008778:	d402      	bmi.n	8008780 <_printf_i+0x188>
 800877a:	065f      	lsls	r7, r3, #25
 800877c:	bf48      	it	mi
 800877e:	b2ad      	uxthmi	r5, r5
 8008780:	6031      	str	r1, [r6, #0]
 8008782:	07d9      	lsls	r1, r3, #31
 8008784:	bf44      	itt	mi
 8008786:	f043 0320 	orrmi.w	r3, r3, #32
 800878a:	6023      	strmi	r3, [r4, #0]
 800878c:	b11d      	cbz	r5, 8008796 <_printf_i+0x19e>
 800878e:	2310      	movs	r3, #16
 8008790:	e7ac      	b.n	80086ec <_printf_i+0xf4>
 8008792:	4827      	ldr	r0, [pc, #156]	@ (8008830 <_printf_i+0x238>)
 8008794:	e7e9      	b.n	800876a <_printf_i+0x172>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	f023 0320 	bic.w	r3, r3, #32
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	e7f6      	b.n	800878e <_printf_i+0x196>
 80087a0:	4616      	mov	r6, r2
 80087a2:	e7bd      	b.n	8008720 <_printf_i+0x128>
 80087a4:	6833      	ldr	r3, [r6, #0]
 80087a6:	6825      	ldr	r5, [r4, #0]
 80087a8:	6961      	ldr	r1, [r4, #20]
 80087aa:	1d18      	adds	r0, r3, #4
 80087ac:	6030      	str	r0, [r6, #0]
 80087ae:	062e      	lsls	r6, r5, #24
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	d501      	bpl.n	80087b8 <_printf_i+0x1c0>
 80087b4:	6019      	str	r1, [r3, #0]
 80087b6:	e002      	b.n	80087be <_printf_i+0x1c6>
 80087b8:	0668      	lsls	r0, r5, #25
 80087ba:	d5fb      	bpl.n	80087b4 <_printf_i+0x1bc>
 80087bc:	8019      	strh	r1, [r3, #0]
 80087be:	2300      	movs	r3, #0
 80087c0:	6123      	str	r3, [r4, #16]
 80087c2:	4616      	mov	r6, r2
 80087c4:	e7bc      	b.n	8008740 <_printf_i+0x148>
 80087c6:	6833      	ldr	r3, [r6, #0]
 80087c8:	1d1a      	adds	r2, r3, #4
 80087ca:	6032      	str	r2, [r6, #0]
 80087cc:	681e      	ldr	r6, [r3, #0]
 80087ce:	6862      	ldr	r2, [r4, #4]
 80087d0:	2100      	movs	r1, #0
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7f7 fd0c 	bl	80001f0 <memchr>
 80087d8:	b108      	cbz	r0, 80087de <_printf_i+0x1e6>
 80087da:	1b80      	subs	r0, r0, r6
 80087dc:	6060      	str	r0, [r4, #4]
 80087de:	6863      	ldr	r3, [r4, #4]
 80087e0:	6123      	str	r3, [r4, #16]
 80087e2:	2300      	movs	r3, #0
 80087e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087e8:	e7aa      	b.n	8008740 <_printf_i+0x148>
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	4632      	mov	r2, r6
 80087ee:	4649      	mov	r1, r9
 80087f0:	4640      	mov	r0, r8
 80087f2:	47d0      	blx	sl
 80087f4:	3001      	adds	r0, #1
 80087f6:	d0ad      	beq.n	8008754 <_printf_i+0x15c>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	079b      	lsls	r3, r3, #30
 80087fc:	d413      	bmi.n	8008826 <_printf_i+0x22e>
 80087fe:	68e0      	ldr	r0, [r4, #12]
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	4298      	cmp	r0, r3
 8008804:	bfb8      	it	lt
 8008806:	4618      	movlt	r0, r3
 8008808:	e7a6      	b.n	8008758 <_printf_i+0x160>
 800880a:	2301      	movs	r3, #1
 800880c:	4632      	mov	r2, r6
 800880e:	4649      	mov	r1, r9
 8008810:	4640      	mov	r0, r8
 8008812:	47d0      	blx	sl
 8008814:	3001      	adds	r0, #1
 8008816:	d09d      	beq.n	8008754 <_printf_i+0x15c>
 8008818:	3501      	adds	r5, #1
 800881a:	68e3      	ldr	r3, [r4, #12]
 800881c:	9903      	ldr	r1, [sp, #12]
 800881e:	1a5b      	subs	r3, r3, r1
 8008820:	42ab      	cmp	r3, r5
 8008822:	dcf2      	bgt.n	800880a <_printf_i+0x212>
 8008824:	e7eb      	b.n	80087fe <_printf_i+0x206>
 8008826:	2500      	movs	r5, #0
 8008828:	f104 0619 	add.w	r6, r4, #25
 800882c:	e7f5      	b.n	800881a <_printf_i+0x222>
 800882e:	bf00      	nop
 8008830:	080090f3 	.word	0x080090f3
 8008834:	08009104 	.word	0x08009104

08008838 <__swbuf_r>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	460e      	mov	r6, r1
 800883c:	4614      	mov	r4, r2
 800883e:	4605      	mov	r5, r0
 8008840:	b118      	cbz	r0, 800884a <__swbuf_r+0x12>
 8008842:	6a03      	ldr	r3, [r0, #32]
 8008844:	b90b      	cbnz	r3, 800884a <__swbuf_r+0x12>
 8008846:	f7ff fb39 	bl	8007ebc <__sinit>
 800884a:	69a3      	ldr	r3, [r4, #24]
 800884c:	60a3      	str	r3, [r4, #8]
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	071a      	lsls	r2, r3, #28
 8008852:	d501      	bpl.n	8008858 <__swbuf_r+0x20>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	b943      	cbnz	r3, 800886a <__swbuf_r+0x32>
 8008858:	4621      	mov	r1, r4
 800885a:	4628      	mov	r0, r5
 800885c:	f000 f82a 	bl	80088b4 <__swsetup_r>
 8008860:	b118      	cbz	r0, 800886a <__swbuf_r+0x32>
 8008862:	f04f 37ff 	mov.w	r7, #4294967295
 8008866:	4638      	mov	r0, r7
 8008868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	6922      	ldr	r2, [r4, #16]
 800886e:	1a98      	subs	r0, r3, r2
 8008870:	6963      	ldr	r3, [r4, #20]
 8008872:	b2f6      	uxtb	r6, r6
 8008874:	4283      	cmp	r3, r0
 8008876:	4637      	mov	r7, r6
 8008878:	dc05      	bgt.n	8008886 <__swbuf_r+0x4e>
 800887a:	4621      	mov	r1, r4
 800887c:	4628      	mov	r0, r5
 800887e:	f7ff fa55 	bl	8007d2c <_fflush_r>
 8008882:	2800      	cmp	r0, #0
 8008884:	d1ed      	bne.n	8008862 <__swbuf_r+0x2a>
 8008886:	68a3      	ldr	r3, [r4, #8]
 8008888:	3b01      	subs	r3, #1
 800888a:	60a3      	str	r3, [r4, #8]
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	6022      	str	r2, [r4, #0]
 8008892:	701e      	strb	r6, [r3, #0]
 8008894:	6962      	ldr	r2, [r4, #20]
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	429a      	cmp	r2, r3
 800889a:	d004      	beq.n	80088a6 <__swbuf_r+0x6e>
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	07db      	lsls	r3, r3, #31
 80088a0:	d5e1      	bpl.n	8008866 <__swbuf_r+0x2e>
 80088a2:	2e0a      	cmp	r6, #10
 80088a4:	d1df      	bne.n	8008866 <__swbuf_r+0x2e>
 80088a6:	4621      	mov	r1, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7ff fa3f 	bl	8007d2c <_fflush_r>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d0d9      	beq.n	8008866 <__swbuf_r+0x2e>
 80088b2:	e7d6      	b.n	8008862 <__swbuf_r+0x2a>

080088b4 <__swsetup_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4b29      	ldr	r3, [pc, #164]	@ (800895c <__swsetup_r+0xa8>)
 80088b8:	4605      	mov	r5, r0
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	460c      	mov	r4, r1
 80088be:	b118      	cbz	r0, 80088c8 <__swsetup_r+0x14>
 80088c0:	6a03      	ldr	r3, [r0, #32]
 80088c2:	b90b      	cbnz	r3, 80088c8 <__swsetup_r+0x14>
 80088c4:	f7ff fafa 	bl	8007ebc <__sinit>
 80088c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088cc:	0719      	lsls	r1, r3, #28
 80088ce:	d422      	bmi.n	8008916 <__swsetup_r+0x62>
 80088d0:	06da      	lsls	r2, r3, #27
 80088d2:	d407      	bmi.n	80088e4 <__swsetup_r+0x30>
 80088d4:	2209      	movs	r2, #9
 80088d6:	602a      	str	r2, [r5, #0]
 80088d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	f04f 30ff 	mov.w	r0, #4294967295
 80088e2:	e033      	b.n	800894c <__swsetup_r+0x98>
 80088e4:	0758      	lsls	r0, r3, #29
 80088e6:	d512      	bpl.n	800890e <__swsetup_r+0x5a>
 80088e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ea:	b141      	cbz	r1, 80088fe <__swsetup_r+0x4a>
 80088ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088f0:	4299      	cmp	r1, r3
 80088f2:	d002      	beq.n	80088fa <__swsetup_r+0x46>
 80088f4:	4628      	mov	r0, r5
 80088f6:	f7ff fc85 	bl	8008204 <_free_r>
 80088fa:	2300      	movs	r3, #0
 80088fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	2300      	movs	r3, #0
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0308 	orr.w	r3, r3, #8
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	b94b      	cbnz	r3, 800892e <__swsetup_r+0x7a>
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008924:	d003      	beq.n	800892e <__swsetup_r+0x7a>
 8008926:	4621      	mov	r1, r4
 8008928:	4628      	mov	r0, r5
 800892a:	f000 f83f 	bl	80089ac <__smakebuf_r>
 800892e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008932:	f013 0201 	ands.w	r2, r3, #1
 8008936:	d00a      	beq.n	800894e <__swsetup_r+0x9a>
 8008938:	2200      	movs	r2, #0
 800893a:	60a2      	str	r2, [r4, #8]
 800893c:	6962      	ldr	r2, [r4, #20]
 800893e:	4252      	negs	r2, r2
 8008940:	61a2      	str	r2, [r4, #24]
 8008942:	6922      	ldr	r2, [r4, #16]
 8008944:	b942      	cbnz	r2, 8008958 <__swsetup_r+0xa4>
 8008946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800894a:	d1c5      	bne.n	80088d8 <__swsetup_r+0x24>
 800894c:	bd38      	pop	{r3, r4, r5, pc}
 800894e:	0799      	lsls	r1, r3, #30
 8008950:	bf58      	it	pl
 8008952:	6962      	ldrpl	r2, [r4, #20]
 8008954:	60a2      	str	r2, [r4, #8]
 8008956:	e7f4      	b.n	8008942 <__swsetup_r+0x8e>
 8008958:	2000      	movs	r0, #0
 800895a:	e7f7      	b.n	800894c <__swsetup_r+0x98>
 800895c:	20000030 	.word	0x20000030

08008960 <__swhatbuf_r>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	460c      	mov	r4, r1
 8008964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008968:	2900      	cmp	r1, #0
 800896a:	b096      	sub	sp, #88	@ 0x58
 800896c:	4615      	mov	r5, r2
 800896e:	461e      	mov	r6, r3
 8008970:	da0d      	bge.n	800898e <__swhatbuf_r+0x2e>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008978:	f04f 0100 	mov.w	r1, #0
 800897c:	bf14      	ite	ne
 800897e:	2340      	movne	r3, #64	@ 0x40
 8008980:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008984:	2000      	movs	r0, #0
 8008986:	6031      	str	r1, [r6, #0]
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	b016      	add	sp, #88	@ 0x58
 800898c:	bd70      	pop	{r4, r5, r6, pc}
 800898e:	466a      	mov	r2, sp
 8008990:	f000 f848 	bl	8008a24 <_fstat_r>
 8008994:	2800      	cmp	r0, #0
 8008996:	dbec      	blt.n	8008972 <__swhatbuf_r+0x12>
 8008998:	9901      	ldr	r1, [sp, #4]
 800899a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800899e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089a2:	4259      	negs	r1, r3
 80089a4:	4159      	adcs	r1, r3
 80089a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089aa:	e7eb      	b.n	8008984 <__swhatbuf_r+0x24>

080089ac <__smakebuf_r>:
 80089ac:	898b      	ldrh	r3, [r1, #12]
 80089ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089b0:	079d      	lsls	r5, r3, #30
 80089b2:	4606      	mov	r6, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	d507      	bpl.n	80089c8 <__smakebuf_r+0x1c>
 80089b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	2301      	movs	r3, #1
 80089c2:	6163      	str	r3, [r4, #20]
 80089c4:	b003      	add	sp, #12
 80089c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c8:	ab01      	add	r3, sp, #4
 80089ca:	466a      	mov	r2, sp
 80089cc:	f7ff ffc8 	bl	8008960 <__swhatbuf_r>
 80089d0:	9f00      	ldr	r7, [sp, #0]
 80089d2:	4605      	mov	r5, r0
 80089d4:	4639      	mov	r1, r7
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7fe ffd2 	bl	8007980 <_malloc_r>
 80089dc:	b948      	cbnz	r0, 80089f2 <__smakebuf_r+0x46>
 80089de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e2:	059a      	lsls	r2, r3, #22
 80089e4:	d4ee      	bmi.n	80089c4 <__smakebuf_r+0x18>
 80089e6:	f023 0303 	bic.w	r3, r3, #3
 80089ea:	f043 0302 	orr.w	r3, r3, #2
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	e7e2      	b.n	80089b8 <__smakebuf_r+0xc>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	6020      	str	r0, [r4, #0]
 80089f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	9b01      	ldr	r3, [sp, #4]
 80089fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a02:	b15b      	cbz	r3, 8008a1c <__smakebuf_r+0x70>
 8008a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 f81d 	bl	8008a48 <_isatty_r>
 8008a0e:	b128      	cbz	r0, 8008a1c <__smakebuf_r+0x70>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	431d      	orrs	r5, r3
 8008a20:	81a5      	strh	r5, [r4, #12]
 8008a22:	e7cf      	b.n	80089c4 <__smakebuf_r+0x18>

08008a24 <_fstat_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d07      	ldr	r5, [pc, #28]	@ (8008a44 <_fstat_r+0x20>)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	f7f8 fd62 	bl	80014fa <_fstat>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	d102      	bne.n	8008a40 <_fstat_r+0x1c>
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	b103      	cbz	r3, 8008a40 <_fstat_r+0x1c>
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	bd38      	pop	{r3, r4, r5, pc}
 8008a42:	bf00      	nop
 8008a44:	20004de0 	.word	0x20004de0

08008a48 <_isatty_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d06      	ldr	r5, [pc, #24]	@ (8008a64 <_isatty_r+0x1c>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7f8 fd61 	bl	800151a <_isatty>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_isatty_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_isatty_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	20004de0 	.word	0x20004de0

08008a68 <_init>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr

08008a74 <_fini>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	bf00      	nop
 8008a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	469e      	mov	lr, r3
 8008a7e:	4770      	bx	lr
