
cli_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007920  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08007ac0  08007ac0  00008ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f90  08007f90  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007f90  08007f90  00008f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f98  08007f98  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f98  08007f98  00008f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f9c  08007f9c  00008f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007fa0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d0c  20000080  08008020  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d8c  08008020  00009d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b17e  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004313  00000000  00000000  0002422e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00028548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119f  00000000  00000000  00029c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9a1  00000000  00000000  0002add7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b940  00000000  00000000  00045778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb74  00000000  00000000  000610b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcc2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066ec  00000000  00000000  000fcc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0010335c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007aa8 	.word	0x08007aa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007aa8 	.word	0x08007aa8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10b      	bne.n	80005aa <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000596:	f383 8811 	msr	BASEPRI, r3
 800059a:	f3bf 8f6f 	isb	sy
 800059e:	f3bf 8f4f 	dsb	sy
 80005a2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	e7fd      	b.n	80005a6 <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80005aa:	2008      	movs	r0, #8
 80005ac:	f005 ffd6 	bl	800655c <pvPortMalloc>
 80005b0:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10b      	bne.n	80005d0 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 80005b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005bc:	f383 8811 	msr	BASEPRI, r3
 80005c0:	f3bf 8f6f 	isb	sy
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	60bb      	str	r3, [r7, #8]
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d005      	beq.n	80005e2 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 80005d6:	6939      	ldr	r1, [r7, #16]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f8e7 	bl	80007ac <prvRegisterCommand>
            xReturn = pdPASS;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 80005e2:	697b      	ldr	r3, [r7, #20]
    }
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 80005fc:	4b3a      	ldr	r3, [pc, #232]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d141      	bne.n	8000688 <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000604:	4b38      	ldr	r3, [pc, #224]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000606:	4a39      	ldr	r2, [pc, #228]	@ (80006ec <FreeRTOS_CLIProcessCommand+0x100>)
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	e037      	b.n	800067c <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800060c:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 8000616:	69b8      	ldr	r0, [r7, #24]
 8000618:	f7ff fde2 	bl	80001e0 <strlen>
 800061c:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	69b9      	ldr	r1, [r7, #24]
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f006 fcfd 	bl	8007022 <strncmp>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d121      	bne.n	8000672 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b20      	cmp	r3, #32
 8000638:	d005      	beq.n	8000646 <FreeRTOS_CLIProcessCommand+0x5a>
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d115      	bne.n	8000672 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db18      	blt.n	8000686 <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f000 f911 	bl	800087c <prvGetNumberOfParameters>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000668:	429a      	cmp	r2, r3
 800066a:	d00c      	beq.n	8000686 <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 8000670:	e009      	b.n	8000686 <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1c3      	bne.n	800060c <FreeRTOS_CLIProcessCommand+0x20>
 8000684:	e000      	b.n	8000688 <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 8000686:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000688:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00b      	beq.n	80006a8 <FreeRTOS_CLIProcessCommand+0xbc>
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d108      	bne.n	80006a8 <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4915      	ldr	r1, [pc, #84]	@ (80006f0 <FreeRTOS_CLIProcessCommand+0x104>)
 800069a:	68b8      	ldr	r0, [r7, #8]
 800069c:	f006 fcd3 	bl	8007046 <strncpy>
        pxCommand = NULL;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e01a      	b.n	80006de <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00f      	beq.n	80006d0 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	4798      	blx	r3
 80006c0:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10a      	bne.n	80006de <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e006      	b.n	80006de <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4908      	ldr	r1, [pc, #32]	@ (80006f4 <FreeRTOS_CLIProcessCommand+0x108>)
 80006d4:	68b8      	ldr	r0, [r7, #8]
 80006d6:	f006 fcb6 	bl	8007046 <strncpy>
        xReturn = pdFALSE;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80006de:	69fb      	ldr	r3, [r7, #28]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000009c 	.word	0x2000009c
 80006ec:	20000000 	.word	0x20000000
 80006f0:	08007af8 	.word	0x08007af8
 80006f4:	08007b50 	.word	0x08007b50

080006f8 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 80006f8:	b480      	push	{r7}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8000712:	e03b      	b.n	800078c <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <FreeRTOS_CLIGetParameter+0x3a>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b20      	cmp	r3, #32
 8000728:	d1f4      	bne.n	8000714 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800072a:	e002      	b.n	8000732 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <FreeRTOS_CLIGetParameter+0x4a>
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b20      	cmp	r3, #32
 8000740:	d0f4      	beq.n	800072c <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d025      	beq.n	8000796 <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	429a      	cmp	r2, r3
 8000756:	d119      	bne.n	800078c <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800075c:	e007      	b.n	800076e <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <FreeRTOS_CLIGetParameter+0x86>
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b20      	cmp	r3, #32
 800077c:	d1ef      	bne.n	800075e <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d109      	bne.n	800079a <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
                }

                break;
 800078a:	e006      	b.n	800079a <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3c2      	bcc.n	800071a <FreeRTOS_CLIGetParameter+0x22>
 8000794:	e002      	b.n	800079c <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 8000796:	bf00      	nop
 8000798:	e000      	b.n	800079c <FreeRTOS_CLIGetParameter+0xa4>
                break;
 800079a:	bf00      	nop
        }
    }

    return pcReturn;
 800079c:	693b      	ldr	r3, [r7, #16]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	371c      	adds	r7, #28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10b      	bne.n	80007d4 <prvRegisterCommand+0x28>
	__asm volatile
 80007bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c0:	f383 8811 	msr	BASEPRI, r3
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	f3bf 8f4f 	dsb	sy
 80007cc:	60fb      	str	r3, [r7, #12]
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10b      	bne.n	80007f2 <prvRegisterCommand+0x46>
	__asm volatile
 80007da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007de:	f383 8811 	msr	BASEPRI, r3
 80007e2:	f3bf 8f6f 	isb	sy
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	60bb      	str	r3, [r7, #8]
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 80007f2:	f005 fd91 	bl	8006318 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <prvRegisterCommand+0x70>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800080a:	4a04      	ldr	r2, [pc, #16]	@ (800081c <prvRegisterCommand+0x70>)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8000810:	f005 fdb4 	bl	800637c <vPortExitCritical>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000008 	.word	0x20000008

08000820 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <prvHelpCommand+0x54>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <prvHelpCommand+0x54>)
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <prvHelpCommand+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <prvHelpCommand+0x54>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f006 fbfd 	bl	8007046 <strncpy>
    pxCommand = pxCommand->pxNext;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <prvHelpCommand+0x54>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <prvHelpCommand+0x54>)
 8000854:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <prvHelpCommand+0x54>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	e001      	b.n	8000868 <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8000868:	697b      	ldr	r3, [r7, #20]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000a0 	.word	0x200000a0
 8000878:	20000000 	.word	0x20000000

0800087c <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 800088c:	e014      	b.n	80008b8 <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b20      	cmp	r3, #32
 8000894:	d10b      	bne.n	80008ae <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d00a      	beq.n	80008b2 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 800089c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	3301      	adds	r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e001      	b.n	80008b2 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e6      	bne.n	800088e <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d105      	bne.n	80008d2 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <_write>:
uint8_t backspace_tt[] = " \b";
uint8_t flag = 0;
extern stepperXTaskHandle;

int _write(int file, char *data, int len)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00f      	b.n	8000916 <_write+0x32>
    {
        // Send the character
        USART2->DR = (uint16_t)data[i];
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	4413      	add	r3, r2
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <_write+0x48>)
 8000900:	605a      	str	r2, [r3, #4]
        // Wait for the transmit buffer to be empty
        while (!(USART2->SR & USART_SR_TXE));
 8000902:	bf00      	nop
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <_write+0x48>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f9      	beq.n	8000904 <_write+0x20>
    for (int i = 0; i < len; i++)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3301      	adds	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	dbeb      	blt.n	80008f6 <_write+0x12>
    }
    return len;
 800091e:	687b      	ldr	r3, [r7, #4]
}
 8000920:	4618      	mov	r0, r3
 8000922:	371c      	adds	r7, #28
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40004400 	.word	0x40004400

08000930 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	2100      	movs	r1, #0
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f006 fb66 	bl	8007012 <memset>
    printf("\033[2J\033[1;1H");
 8000946:	4804      	ldr	r0, [pc, #16]	@ (8000958 <cmd_clearScreen+0x28>)
 8000948:	f006 fb0e 	bl	8006f68 <iprintf>
    return pdFALSE;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	08007ba8 	.word	0x08007ba8

0800095c <cmd_toggle_led>:
//*****************************************************************************
BaseType_t cmd_toggle_led(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b089      	sub	sp, #36	@ 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
    (void)pcCommandString; // contains the command string
    (void)xWriteBufferLen; // contains the length of the write buffer
    
    /* Toggle the LED */
    if (flag)
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <cmd_toggle_led+0x60>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <cmd_toggle_led+0x20>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	4812      	ldr	r0, [pc, #72]	@ (80009c0 <cmd_toggle_led+0x64>)
 8000976:	f001 f951 	bl	8001c1c <HAL_GPIO_WritePin>
 800097a:	e004      	b.n	8000986 <cmd_toggle_led+0x2a>
    else
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2120      	movs	r1, #32
 8000980:	480f      	ldr	r0, [pc, #60]	@ (80009c0 <cmd_toggle_led+0x64>)
 8000982:	f001 f94b 	bl	8001c1c <HAL_GPIO_WritePin>
    flag = !flag;
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <cmd_toggle_led+0x60>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	bf0c      	ite	eq
 800098e:	2301      	moveq	r3, #1
 8000990:	2300      	movne	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <cmd_toggle_led+0x60>)
 8000998:	701a      	strb	r2, [r3, #0]

    
    /* Write the response to the buffer */
    uint8_t string[] = "LED toggled\r\n";
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <cmd_toggle_led+0x68>)
 800099c:	f107 0410 	add.w	r4, r7, #16
 80009a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a2:	c407      	stmia	r4!, {r0, r1, r2}
 80009a4:	8023      	strh	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f006 fc33 	bl	8007218 <strcpy>
    
    return pdFALSE;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3724      	adds	r7, #36	@ 0x24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	2000019f 	.word	0x2000019f
 80009c0:	40020000 	.word	0x40020000
 80009c4:	08007bb4 	.word	0x08007bb4

080009c8 <cmd_hello>:
//*****************************************************************************
BaseType_t cmd_hello(char *pcWriteBuffer, size_t xWriteBufferLen,
    const char *pcCommandString)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
    (void)pcCommandString; // contains the command string
    (void)xWriteBufferLen; // contains the length of the write buffer

    /* Write the response to the buffer */
    uint8_t string[] = "Hello World!\r\n";
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <cmd_hello+0x34>)
 80009d6:	f107 0410 	add.w	r4, r7, #16
 80009da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009dc:	c407      	stmia	r4!, {r0, r1, r2}
 80009de:	8023      	strh	r3, [r4, #0]
 80009e0:	3402      	adds	r4, #2
 80009e2:	0c1b      	lsrs	r3, r3, #16
 80009e4:	7023      	strb	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4619      	mov	r1, r3
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f006 fc13 	bl	8007218 <strcpy>

    return pdFALSE;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3724      	adds	r7, #36	@ 0x24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	08007bc4 	.word	0x08007bc4

08000a00 <cmd_add>:
//*****************************************************************************
BaseType_t cmd_add(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	@ 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
    char *pcParameter1, *pcParameter2;
    BaseType_t xParameter1StringLength, xParameter2StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	461a      	mov	r2, r3
 8000a12:	2101      	movs	r1, #1
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fe6f 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000a1a:	6378      	str	r0, [r7, #52]	@ 0x34
                          /* Return the first parameter. */
                          1,
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    pcParameter2 = FreeRTOS_CLIGetParameter
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	461a      	mov	r2, r3
 8000a22:	2102      	movs	r1, #2
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fe67 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000a2a:	6338      	str	r0, [r7, #48]	@ 0x30
                          2,
                          /* Store the parameter string length. */
                          &xParameter2StringLength
                        );
    // convert the string to a number
    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000a32:	f006 f8cb 	bl	8006bcc <strtol>
 8000a36:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t xValue2 = strtol(pcParameter2, NULL, 10);
 8000a38:	220a      	movs	r2, #10
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a3e:	f006 f8c5 	bl	8006bcc <strtol>
 8000a42:	62b8      	str	r0, [r7, #40]	@ 0x28
    // add the two numbers
    int32_t xResultValue = xValue1 + xValue2;
 8000a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	4413      	add	r3, r2
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    // convert the result to a string
    char cResultString[10];
    itoa(xResultValue, cResultString, 10);
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	220a      	movs	r2, #10
 8000a52:	4619      	mov	r1, r3
 8000a54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a56:	f005 ff87 	bl	8006968 <itoa>
    // copy the result to the write buffer
    strcpy(pcWriteBuffer, cResultString);
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4619      	mov	r1, r3
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f006 fbd9 	bl	8007218 <strcpy>
    
    return pdFALSE;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3738      	adds	r7, #56	@ 0x38
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <cmd_stepx>:
//*****************************************************************************
BaseType_t cmd_stepx(char *pcWriteBuffer, size_t xWriteBufferLen,
                                const char *pcCommandString)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
    char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	461a      	mov	r2, r3
 8000a82:	2101      	movs	r1, #1
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fe37 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000a8a:	6278      	str	r0, [r7, #36]	@ 0x24
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    // convert the string to a number

    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	2100      	movs	r1, #0
 8000a90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a92:	f006 f89b 	bl	8006bcc <strtol>
 8000a96:	6238      	str	r0, [r7, #32]
    xTaskNotify(stepperXTaskHandle, xValue1, eSetValueWithOverwrite);
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <cmd_stepx+0x5c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	6a39      	ldr	r1, [r7, #32]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	f004 fdb4 	bl	8005610 <xTaskGenericNotify>
    char cResultString[10];
    itoa(xValue1, cResultString, 10);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	220a      	movs	r2, #10
 8000aae:	4619      	mov	r1, r3
 8000ab0:	6a38      	ldr	r0, [r7, #32]
 8000ab2:	f005 ff59 	bl	8006968 <itoa>
    // copy the result to the write buffer
    strcpy(pcWriteBuffer, cResultString);
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	4619      	mov	r1, r3
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f006 fbab 	bl	8007218 <strcpy>
    return pdFALSE;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3728      	adds	r7, #40	@ 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200001a4 	.word	0x200001a4

08000ad0 <cmd_stepy>:
//*****************************************************************************
BaseType_t cmd_stepy(char *pcWriteBuffer, size_t xWriteBufferLen,
    const char *pcCommandString)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
    char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fe07 	bl	80006f8 <FreeRTOS_CLIGetParameter>
 8000aea:	61f8      	str	r0, [r7, #28]
                          1,
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    // convert the string to a number
    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8000aec:	220a      	movs	r2, #10
 8000aee:	2100      	movs	r1, #0
 8000af0:	69f8      	ldr	r0, [r7, #28]
 8000af2:	f006 f86b 	bl	8006bcc <strtol>
 8000af6:	61b8      	str	r0, [r7, #24]
    return pdFALSE;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
    //iterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e009      	b.n	8000b24 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4a09      	ldr	r2, [pc, #36]	@ (8000b3c <vRegisterCLICommands+0x38>)
 8000b16:	4413      	add	r3, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd31 	bl	8000580 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <vRegisterCLICommands+0x38>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	4413      	add	r3, r2
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1ee      	bne.n	8000b10 <vRegisterCLICommands+0xc>
    }
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	08007d40 	.word	0x08007d40

08000b40 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <cliWrite+0x24>)
 8000b4c:	f006 fa0c 	bl	8006f68 <iprintf>
   // flush stdout
   fflush(stdout);
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <cliWrite+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f006 f930 	bl	8006dbc <fflush>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	08007ce8 	.word	0x08007ce8
 8000b68:	20000030 	.word	0x20000030

08000b6c <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 8000b78:	480f      	ldr	r0, [pc, #60]	@ (8000bb8 <handleNewline+0x4c>)
 8000b7a:	f7ff ffe1 	bl	8000b40 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {     
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8000b7e:	22c8      	movs	r2, #200	@ 0xc8
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fd32 	bl	80005ec <FreeRTOS_CLIProcessCommand>
 8000b88:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 8000b8a:	68b8      	ldr	r0, [r7, #8]
 8000b8c:	f7ff ffd8 	bl	8000b40 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f3      	bne.n	8000b7e <handleNewline+0x12>

    cliWrite(cli_prompt);
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <handleNewline+0x50>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffd0 	bl	8000b40 <cliWrite>
    *cInputIndex = 0;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 8000ba6:	2232      	movs	r2, #50	@ 0x32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f006 fa31 	bl	8007012 <memset>
}
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	08007cec 	.word	0x08007cec
 8000bbc:	2000000c 	.word	0x2000000c

08000bc0 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d010      	beq.n	8000bf4 <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 8000bec:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <handleBackspace+0x4c>)
 8000bee:	f7ff ffa7 	bl	8000b40 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 8000bf2:	e006      	b.n	8000c02 <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <handleBackspace+0x50>)
 8000bf6:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff9f 	bl	8000b40 <cliWrite>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	00435b1b 	.word	0x00435b1b

08000c14 <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <handleCharacterInput+0x64>)
 8000c20:	f993 3000 	ldrsb.w	r3, [r3]
 8000c24:	2b0d      	cmp	r3, #13
 8000c26:	d023      	beq.n	8000c70 <handleCharacterInput+0x5c>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <handleCharacterInput+0x64>)
 8000c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d004      	beq.n	8000c3c <handleCharacterInput+0x28>
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <handleCharacterInput+0x64>)
 8000c34:	f993 3000 	ldrsb.w	r3, [r3]
 8000c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c3a:	d104      	bne.n	8000c46 <handleCharacterInput+0x32>
    {
        handleBackspace(cInputIndex, pcInputString);
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffbe 	bl	8000bc0 <handleBackspace>
 8000c44:	e015      	b.n	8000c72 <handleCharacterInput+0x5e>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b31      	cmp	r3, #49	@ 0x31
 8000c4c:	d811      	bhi.n	8000c72 <handleCharacterInput+0x5e>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <handleCharacterInput+0x64>)
 8000c50:	f993 2000 	ldrsb.w	r2, [r3]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	440b      	add	r3, r1
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e000      	b.n	8000c72 <handleCharacterInput+0x5e>
        return;
 8000c70:	bf00      	nop
        }
    }
}
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000019e 	.word	0x2000019e

08000c7c <vCommandConsoleTask>:
/*************************************************************************************************/
void vCommandConsoleTask(void *pvParameters)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
    uint32_t receivedValue; // used to store the received value from the notification
    UNUSED(pvParameters);
    vRegisterCLICommands();
 8000c88:	f7ff ff3c 	bl	8000b04 <vRegisterCLICommands>
    
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8000c8c:	f107 0208 	add.w	r2, r7, #8
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	2100      	movs	r1, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	f004 fc5a 	bl	8005550 <xTaskNotifyWait>
                                  0,  // Clear all bits on exit
                                  &receivedValue, // Receives the notification value
                                  portMAX_DELAY); // Wait indefinitely
        //echo recevied char
        cRxedChar = receivedValue & 0xFF;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <vCommandConsoleTask+0x5c>)
 8000ca2:	701a      	strb	r2, [r3, #0]
        // cliWrite((char *)&cRxedChar);
        if (cRxedChar == '\r' || cRxedChar == '\n')
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <vCommandConsoleTask+0x5c>)
 8000ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	d004      	beq.n	8000cb8 <vCommandConsoleTask+0x3c>
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <vCommandConsoleTask+0x5c>)
 8000cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000cb4:	2b0a      	cmp	r3, #10
 8000cb6:	d107      	bne.n	8000cc8 <vCommandConsoleTask+0x4c>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 8000cb8:	f107 030f 	add.w	r3, r7, #15
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4907      	ldr	r1, [pc, #28]	@ (8000cdc <vCommandConsoleTask+0x60>)
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <vCommandConsoleTask+0x64>)
 8000cc2:	f7ff ff53 	bl	8000b6c <handleNewline>
 8000cc6:	e005      	b.n	8000cd4 <vCommandConsoleTask+0x58>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 8000cc8:	f107 030f 	add.w	r3, r7, #15
 8000ccc:	4904      	ldr	r1, [pc, #16]	@ (8000ce0 <vCommandConsoleTask+0x64>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffa0 	bl	8000c14 <handleCharacterInput>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8000cd4:	e7da      	b.n	8000c8c <vCommandConsoleTask+0x10>
 8000cd6:	bf00      	nop
 8000cd8:	2000019e 	.word	0x2000019e
 8000cdc:	200000a4 	.word	0x200000a4
 8000ce0:	2000016c 	.word	0x2000016c

08000ce4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d1c <MX_FREERTOS_Init+0x38>)
 8000cea:	2100      	movs	r1, #0
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <MX_FREERTOS_Init+0x3c>)
 8000cee:	f002 feb9 	bl	8003a64 <osThreadNew>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d24 <MX_FREERTOS_Init+0x40>)
 8000cf6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  cmdLineTaskHandle = osThreadNew(vCommandConsoleTask, NULL, &cmdLineTask_attributes);
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <MX_FREERTOS_Init+0x44>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <MX_FREERTOS_Init+0x48>)
 8000cfe:	f002 feb1 	bl	8003a64 <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <MX_FREERTOS_Init+0x4c>)
 8000d06:	6013      	str	r3, [r2, #0]
  stepperXTaskHandle = osThreadNew(vStepperControlX, NULL, &stepperX_attributes);
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <MX_FREERTOS_Init+0x50>)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	480a      	ldr	r0, [pc, #40]	@ (8000d38 <MX_FREERTOS_Init+0x54>)
 8000d0e:	f002 fea9 	bl	8003a64 <osThreadNew>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <MX_FREERTOS_Init+0x58>)
 8000d16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	08007df8 	.word	0x08007df8
 8000d20:	08000d41 	.word	0x08000d41
 8000d24:	200001a8 	.word	0x200001a8
 8000d28:	08007db0 	.word	0x08007db0
 8000d2c:	08000c7d 	.word	0x08000c7d
 8000d30:	200001a0 	.word	0x200001a0
 8000d34:	08007dd4 	.word	0x08007dd4
 8000d38:	08000f2d 	.word	0x08000f2d
 8000d3c:	200001a4 	.word	0x200001a4

08000d40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f002 ff1d 	bl	8003b88 <osDelay>
 8000d4e:	e7fb      	b.n	8000d48 <StartDefaultTask+0x8>

08000d50 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <MX_GPIO_Init+0xa8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <MX_GPIO_Init+0xa8>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <MX_GPIO_Init+0xa8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_GPIO_Init+0xa8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <MX_GPIO_Init+0xa8>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <MX_GPIO_Init+0xa8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_out_GPIO_Port, led_out_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2120      	movs	r1, #32
 8000da2:	4816      	ldr	r0, [pc, #88]	@ (8000dfc <MX_GPIO_Init+0xac>)
 8000da4:	f000 ff3a 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, stp1_pul_Pin|stp1_dir_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000dae:	4814      	ldr	r0, [pc, #80]	@ (8000e00 <MX_GPIO_Init+0xb0>)
 8000db0:	f000 ff34 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_out_Pin */
  GPIO_InitStruct.Pin = led_out_Pin;
 8000db4:	2320      	movs	r3, #32
 8000db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_out_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <MX_GPIO_Init+0xac>)
 8000dcc:	f000 fda2 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : stp1_pul_Pin stp1_dir_Pin */
  GPIO_InitStruct.Pin = stp1_pul_Pin|stp1_dir_Pin;
 8000dd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_GPIO_Init+0xb0>)
 8000dea:	f000 fd93 	bl	8001914 <HAL_GPIO_Init>

}
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fbce 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f816 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f7ff ff9e 	bl	8000d50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e14:	f000 fa54 	bl	80012c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e18:	f002 fdda 	bl	80039d0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e1c:	f7ff ff62 	bl	8000ce4 <MX_FREERTOS_Init>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&huart2.Instance->DR, 1);
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <main+0x34>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2201      	movs	r2, #1
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <main+0x34>)
 8000e2c:	f001 fe5e 	bl	8002aec <HAL_UART_Receive_IT>

  /* Start scheduler */
  osKernelStart();
 8000e30:	f002 fdf2 	bl	8003a18 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <main+0x30>
 8000e38:	200001f8 	.word	0x200001f8

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	@ 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	2230      	movs	r2, #48	@ 0x30
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 f8e1 	bl	8007012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <SystemClock_Config+0xb8>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	4a22      	ldr	r2, [pc, #136]	@ (8000ef4 <SystemClock_Config+0xb8>)
 8000e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e70:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <SystemClock_Config+0xb8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <SystemClock_Config+0xbc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef8 <SystemClock_Config+0xbc>)
 8000e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <SystemClock_Config+0xbc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fecd 	bl	8001c50 <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ebc:	f000 f830 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 f930 	bl	8002140 <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ee6:	f000 f81b 	bl	8000f20 <Error_Handler>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3750      	adds	r7, #80	@ 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0e:	f000 fb6d 	bl	80015ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40000c00 	.word	0x40000c00

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <vStepperControlX>:
#include "main.h"
#include "cmsis_os.h"
#include "stdio.h"

void vStepperControlX (void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
    int32_t steps;
    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8000f32:	463a      	mov	r2, r7
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f004 fb08 	bl	8005550 <xTaskNotifyWait>
            0,  // Clear all bits on exit
            &steps, // Receives the notification value
            portMAX_DELAY); // Wait indefinitely
        if (steps < 0)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da09      	bge.n	8000f5a <vStepperControlX+0x2e>
        {
            HAL_GPIO_WritePin(GPIOB, stp1_dir_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f4c:	4815      	ldr	r0, [pc, #84]	@ (8000fa4 <vStepperControlX+0x78>)
 8000f4e:	f000 fe65 	bl	8001c1c <HAL_GPIO_WritePin>
            steps = steps * -1;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	425b      	negs	r3, r3
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	e005      	b.n	8000f66 <vStepperControlX+0x3a>
        }
        else
            HAL_GPIO_WritePin(GPIOB, stp1_dir_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f60:	4810      	ldr	r0, [pc, #64]	@ (8000fa4 <vStepperControlX+0x78>)
 8000f62:	f000 fe5b 	bl	8001c1c <HAL_GPIO_WritePin>
        
        for (uint32_t pwm = 0; pwm < steps; pwm++){
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	e014      	b.n	8000f96 <vStepperControlX+0x6a>
            HAL_GPIO_WritePin(GPIOB, stp1_pul_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <vStepperControlX+0x78>)
 8000f74:	f000 fe52 	bl	8001c1c <HAL_GPIO_WritePin>
            osDelay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 fe05 	bl	8003b88 <osDelay>
            HAL_GPIO_WritePin(GPIOB, stp1_pul_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f84:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <vStepperControlX+0x78>)
 8000f86:	f000 fe49 	bl	8001c1c <HAL_GPIO_WritePin>
            osDelay(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f002 fdfc 	bl	8003b88 <osDelay>
        for (uint32_t pwm = 0; pwm < steps; pwm++){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d3e5      	bcc.n	8000f6c <vStepperControlX+0x40>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8000fa0:	e7c7      	b.n	8000f32 <vStepperControlX+0x6>
 8000fa2:	bf00      	nop
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_MspInit+0x54>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <HAL_MspInit+0x54>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_MspInit+0x54>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_MspInit+0x54>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_MspInit+0x54>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_MspInit+0x54>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	210f      	movs	r1, #15
 8000fea:	f06f 0001 	mvn.w	r0, #1
 8000fee:	f000 fbd5 	bl	800179c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	@ 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <HAL_InitTick+0xe4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	4a32      	ldr	r2, [pc, #200]	@ (80010e4 <HAL_InitTick+0xe4>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <HAL_InitTick+0xe4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fa62 	bl	8002500 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001046:	f001 fa33 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 800104a:	6378      	str	r0, [r7, #52]	@ 0x34
 800104c:	e004      	b.n	8001058 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800104e:	f001 fa2f 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8001052:	4603      	mov	r3, r0
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105a:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <HAL_InitTick+0xe8>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	0c9b      	lsrs	r3, r3, #18
 8001062:	3b01      	subs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <HAL_InitTick+0xec>)
 8001068:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <HAL_InitTick+0xf0>)
 800106a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <HAL_InitTick+0xec>)
 800106e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001072:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001074:	4a1d      	ldr	r2, [pc, #116]	@ (80010ec <HAL_InitTick+0xec>)
 8001076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001078:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <HAL_InitTick+0xec>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_InitTick+0xec>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_InitTick+0xec>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800108c:	4817      	ldr	r0, [pc, #92]	@ (80010ec <HAL_InitTick+0xec>)
 800108e:	f001 fa69 	bl	8002564 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001098:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800109c:	2b00      	cmp	r3, #0
 800109e:	d11b      	bne.n	80010d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80010a0:	4812      	ldr	r0, [pc, #72]	@ (80010ec <HAL_InitTick+0xec>)
 80010a2:	f001 fab9 	bl	8002618 <HAL_TIM_Base_Start_IT>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d111      	bne.n	80010d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010b4:	2032      	movs	r0, #50	@ 0x32
 80010b6:	f000 fb8d 	bl	80017d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d808      	bhi.n	80010d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	2032      	movs	r0, #50	@ 0x32
 80010c6:	f000 fb69 	bl	800179c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_InitTick+0xf4>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e002      	b.n	80010d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3738      	adds	r7, #56	@ 0x38
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	200001ac 	.word	0x200001ac
 80010f0:	40000c00 	.word	0x40000c00
 80010f4:	20000018 	.word	0x20000018

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <NMI_Handler+0x4>

08001100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <UsageFault_Handler+0x4>

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001136:	480d      	ldr	r0, [pc, #52]	@ (800116c <USART2_IRQHandler+0x3c>)
 8001138:	f001 fcfe 	bl	8002b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char rxedValue = USART2->DR & 0xFF;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <USART2_IRQHandler+0x40>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&huart2.Instance->DR, 1);
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <USART2_IRQHandler+0x3c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3304      	adds	r3, #4
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	@ (800116c <USART2_IRQHandler+0x3c>)
 800114e:	f001 fccd 	bl	8002aec <HAL_UART_Receive_IT>
  //send the char to the command line task
  xTaskNotifyFromISR(cmdLineTaskHandle, (uint32_t)rxedValue, eSetValueWithOverwrite , NULL);
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <USART2_IRQHandler+0x44>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	79f9      	ldrb	r1, [r7, #7]
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2300      	movs	r3, #0
 800115e:	2203      	movs	r2, #3
 8001160:	f004 fb18 	bl	8005794 <xTaskGenericNotifyFromISR>
  /* USER CODE END USART2_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001f8 	.word	0x200001f8
 8001170:	40004400 	.word	0x40004400
 8001174:	200001a0 	.word	0x200001a0

08001178 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <TIM5_IRQHandler+0x10>)
 800117e:	f001 faad 	bl	80026dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001ac 	.word	0x200001ac

0800118c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e00a      	b.n	80011b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119e:	f3af 8000 	nop.w
 80011a2:	4601      	mov	r1, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	b2ca      	uxtb	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbf0      	blt.n	800119e <_read+0x12>
  }

  return len;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ee:	605a      	str	r2, [r3, #4]
  return 0;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_isatty>:

int _isatty(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <_sbrk+0x5c>)
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <_sbrk+0x60>)
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <_sbrk+0x64>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <_sbrk+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d207      	bcs.n	8001270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001260:	f005 ffb0 	bl	80071c4 <__errno>
 8001264:	4603      	mov	r3, r0
 8001266:	220c      	movs	r2, #12
 8001268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	e009      	b.n	8001284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <_sbrk+0x64>)
 8001280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20018000 	.word	0x20018000
 8001290:	00000400 	.word	0x00000400
 8001294:	200001f4 	.word	0x200001f4
 8001298:	20004d90 	.word	0x20004d90

0800129c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <MX_USART2_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_USART2_UART_Init+0x4c>)
 80012f8:	f001 fba8 	bl	8002a4c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f7ff fe0d 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001f8 	.word	0x200001f8
 8001310:	40004400 	.word	0x40004400

08001314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1d      	ldr	r2, [pc, #116]	@ (80013a8 <HAL_UART_MspInit+0x94>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d133      	bne.n	800139e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <HAL_UART_MspInit+0x98>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a1b      	ldr	r2, [pc, #108]	@ (80013ac <HAL_UART_MspInit+0x98>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_UART_MspInit+0x98>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_UART_MspInit+0x98>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <HAL_UART_MspInit+0x98>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_UART_MspInit+0x98>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800136e:	230c      	movs	r3, #12
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137e:	2307      	movs	r3, #7
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4809      	ldr	r0, [pc, #36]	@ (80013b0 <HAL_UART_MspInit+0x9c>)
 800138a:	f000 fac3 	bl	8001914 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2105      	movs	r1, #5
 8001392:	2026      	movs	r0, #38	@ 0x26
 8001394:	f000 fa02 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001398:	2026      	movs	r0, #38	@ 0x26
 800139a:	f000 fa1b 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40004400 	.word	0x40004400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013b8:	f7ff ff70 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f005 fef5 	bl	80071d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff fd0d 	bl	8000e04 <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80013f8:	08007fa0 	.word	0x08007fa0
  ldr r2, =_sbss
 80013fc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001400:	20004d8c 	.word	0x20004d8c

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>

08001406 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
 8001418:	f7ff fd82 	bl	8000f20 <Error_Handler>
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e007      	b.n	8001436 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	2100      	movs	r1, #0
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d9f4      	bls.n	8001426 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	721a      	strb	r2, [r3, #8]
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d105      	bne.n	8001464 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
 800145c:	f7ff fd60 	bl	8000f20 <Error_Handler>
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7a1b      	ldrb	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d905      	bls.n	8001478 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
 8001470:	f7ff fd56 	bl	8000f20 <Error_Handler>
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7a1b      	ldrb	r3, [r3, #8]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	b2d1      	uxtb	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	7211      	strb	r1, [r2, #8]
 8001484:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001486:	f3ef 8211 	mrs	r2, BASEPRI
 800148a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	60fa      	str	r2, [r7, #12]
 800149c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
 80014c0:	f7ff fd2e 	bl	8000f20 <Error_Handler>
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7a1b      	ldrb	r3, [r3, #8]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7a1b      	ldrb	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d905      	bls.n	80014e8 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
 80014e0:	f7ff fd1e 	bl	8000f20 <Error_Handler>
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7a1b      	ldrb	r3, [r3, #8]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80014fc:	bf00      	nop
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001514:	f005 fe56 	bl	80071c4 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	2216      	movs	r2, #22
 800151c:	601a      	str	r2, [r3, #0]
    return;
 800151e:	e016      	b.n	800154e <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001520:	200c      	movs	r0, #12
 8001522:	f005 fa23 	bl	800696c <malloc>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff63 	bl	8001406 <stm32_lock_init>
    return;
 8001540:	e005      	b.n	800154e <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001542:	b672      	cpsid	i
}
 8001544:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001546:	f7ff fceb 	bl	8000f20 <Error_Handler>
 800154a:	bf00      	nop
 800154c:	e7fd      	b.n	800154a <__retarget_lock_init_recursive+0x44>
}
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001562:	b672      	cpsid	i
}
 8001564:	bf00      	nop
 8001566:	f7ff fcdb 	bl	8000f20 <Error_Handler>
 800156a:	bf00      	nop
 800156c:	e7fd      	b.n	800156a <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff6a 	bl	800144a <stm32_lock_acquire>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
 8001590:	f7ff fcc6 	bl	8000f20 <Error_Handler>
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff87 	bl	80014ae <stm32_lock_release>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	@ (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f8d8 	bl	8001786 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f7ff fd12 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fce4 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000001c 	.word	0x2000001c
 8001610:	20000258 	.word	0x20000258

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000258 	.word	0x20000258

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	@ (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	@ (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	@ 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff4c 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ae:	f7ff ff61 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	6978      	ldr	r0, [r7, #20]
 80017ba:	f7ff ffb1 	bl	8001720 <NVIC_EncodePriority>
 80017be:	4602      	mov	r2, r0
 80017c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff80 	bl	80016cc <__NVIC_SetPriority>
}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff54 	bl	8001690 <__NVIC_EnableIRQ>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017fe:	f7ff ff09 	bl	8001614 <HAL_GetTick>
 8001802:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2280      	movs	r2, #128	@ 0x80
 8001814:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e052      	b.n	80018c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0216 	bic.w	r2, r2, #22
 8001830:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001840:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <HAL_DMA_Abort+0x62>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0208 	bic.w	r2, r2, #8
 8001860:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001872:	e013      	b.n	800189c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001874:	f7ff fece 	bl	8001614 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b05      	cmp	r3, #5
 8001880:	d90c      	bls.n	800189c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2220      	movs	r2, #32
 8001886:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2203      	movs	r2, #3
 800188c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e015      	b.n	80018c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1e4      	bne.n	8001874 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ae:	223f      	movs	r2, #63	@ 0x3f
 80018b0:	409a      	lsls	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d004      	beq.n	80018ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00c      	b.n	8001908 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e159      	b.n	8001be4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 8148 	bne.w	8001bde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d005      	beq.n	8001966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001962:	2b02      	cmp	r3, #2
 8001964:	d130      	bne.n	80019c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d017      	beq.n	8001a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a2 	beq.w	8001bde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b57      	ldr	r3, [pc, #348]	@ (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a56      	ldr	r2, [pc, #344]	@ (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b54      	ldr	r3, [pc, #336]	@ (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab6:	4a52      	ldr	r2, [pc, #328]	@ (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a49      	ldr	r2, [pc, #292]	@ (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x202>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a48      	ldr	r2, [pc, #288]	@ (8001c08 <HAL_GPIO_Init+0x2f4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x1fe>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a47      	ldr	r2, [pc, #284]	@ (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a46      	ldr	r2, [pc, #280]	@ (8001c10 <HAL_GPIO_Init+0x2fc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x1f6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a45      	ldr	r2, [pc, #276]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x1f2>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x204>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	@ (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a24      	ldr	r2, [pc, #144]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1a      	ldr	r2, [pc, #104]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c18 <HAL_GPIO_Init+0x304>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f aea2 	bls.w	8001930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e267      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d075      	beq.n	8001d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c6e:	4b88      	ldr	r3, [pc, #544]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d00c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7a:	4b85      	ldr	r3, [pc, #532]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d112      	bne.n	8001cac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b82      	ldr	r3, [pc, #520]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c92:	d10b      	bne.n	8001cac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	4b7e      	ldr	r3, [pc, #504]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d05b      	beq.n	8001d58 <HAL_RCC_OscConfig+0x108>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d157      	bne.n	8001d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e242      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x74>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a75      	ldr	r2, [pc, #468]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xb0>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x98>
 8001cce:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b6d      	ldr	r3, [pc, #436]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6c      	ldr	r2, [pc, #432]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xb0>
 8001ce8:	4b69      	ldr	r3, [pc, #420]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a68      	ldr	r2, [pc, #416]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b66      	ldr	r3, [pc, #408]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a65      	ldr	r2, [pc, #404]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fc84 	bl	8001614 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fc80 	bl	8001614 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e207      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b5b      	ldr	r3, [pc, #364]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xc0>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff fc70 	bl	8001614 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fc6c 	bl	8001614 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	@ 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1f3      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b51      	ldr	r3, [pc, #324]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0xe8>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d66:	4b4a      	ldr	r3, [pc, #296]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d72:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b44      	ldr	r3, [pc, #272]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b41      	ldr	r3, [pc, #260]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x152>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1c7      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b3b      	ldr	r3, [pc, #236]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4937      	ldr	r1, [pc, #220]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <HAL_RCC_OscConfig+0x244>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fc25 	bl	8001614 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fc21 	bl	8001614 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1a8      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4925      	ldr	r1, [pc, #148]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <HAL_RCC_OscConfig+0x244>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fc04 	bl	8001614 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff fc00 	bl	8001614 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e187      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d036      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_RCC_OscConfig+0x248>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff fbe4 	bl	8001614 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff fbe0 	bl	8001614 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e167      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_RCC_OscConfig+0x240>)
 8001e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x200>
 8001e6e:	e01b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_RCC_OscConfig+0x248>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fbcd 	bl	8001614 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	e00e      	b.n	8001e9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fbc9 	bl	8001614 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d907      	bls.n	8001e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e150      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	42470000 	.word	0x42470000
 8001e98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	4b88      	ldr	r3, [pc, #544]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ea      	bne.n	8001e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 8097 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b81      	ldr	r3, [pc, #516]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b7d      	ldr	r3, [pc, #500]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a7c      	ldr	r2, [pc, #496]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b7a      	ldr	r3, [pc, #488]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b77      	ldr	r3, [pc, #476]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b74      	ldr	r3, [pc, #464]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a73      	ldr	r2, [pc, #460]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fb89 	bl	8001614 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7ff fb85 	bl	8001614 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e10c      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b6a      	ldr	r3, [pc, #424]	@ (80020c4 <HAL_RCC_OscConfig+0x474>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2ea>
 8001f2c:	4b64      	ldr	r3, [pc, #400]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f30:	4a63      	ldr	r2, [pc, #396]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f38:	e01c      	b.n	8001f74 <HAL_RCC_OscConfig+0x324>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x30c>
 8001f42:	4b5f      	ldr	r3, [pc, #380]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	4a5e      	ldr	r2, [pc, #376]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	4a5b      	ldr	r2, [pc, #364]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0x324>
 8001f5c:	4b58      	ldr	r3, [pc, #352]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a57      	ldr	r2, [pc, #348]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	4b55      	ldr	r3, [pc, #340]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a54      	ldr	r2, [pc, #336]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff fb4a 	bl	8001614 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff fb46 	bl	8001614 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e0cb      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	4b49      	ldr	r3, [pc, #292]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCC_OscConfig+0x334>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fb34 	bl	8001614 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff fb30 	bl	8001614 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0b5      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ee      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd8:	4b39      	ldr	r3, [pc, #228]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	4a38      	ldr	r2, [pc, #224]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001fde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80a1 	beq.w	8002130 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fee:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d05c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d141      	bne.n	8002086 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_RCC_OscConfig+0x478>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fb04 	bl	8001614 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fb00 	bl	8001614 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e087      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	491b      	ldr	r1, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_RCC_OscConfig+0x478>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff fad9 	bl	8001614 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff fad5 	bl	8001614 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e05c      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x416>
 8002084:	e054      	b.n	8002130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_RCC_OscConfig+0x478>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fac2 	bl	8001614 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff fabe 	bl	8001614 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e045      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_RCC_OscConfig+0x470>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x444>
 80020b2:	e03d      	b.n	8002130 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e038      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000
 80020c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x4ec>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d028      	beq.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d121      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d11a      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002104:	4293      	cmp	r3, r2
 8002106:	d111      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0cc      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b68      	ldr	r3, [pc, #416]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d90c      	bls.n	800217c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b65      	ldr	r3, [pc, #404]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b63      	ldr	r3, [pc, #396]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b8      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002194:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a58      	ldr	r2, [pc, #352]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800219e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ac:	4b53      	ldr	r3, [pc, #332]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a52      	ldr	r2, [pc, #328]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b50      	ldr	r3, [pc, #320]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	494d      	ldr	r1, [pc, #308]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d044      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b47      	ldr	r3, [pc, #284]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d119      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b3f      	ldr	r3, [pc, #252]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3b      	ldr	r3, [pc, #236]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e067      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4934      	ldr	r1, [pc, #208]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7ff f9f0 	bl	8001614 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff f9ec 	bl	8001614 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d20c      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b22      	ldr	r3, [pc, #136]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e032      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4916      	ldr	r1, [pc, #88]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b2:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	490e      	ldr	r1, [pc, #56]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022c6:	f000 f821 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	490a      	ldr	r1, [pc, #40]	@ (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a09      	ldr	r2, [pc, #36]	@ (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fe8a 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023c00 	.word	0x40023c00
 80022fc:	40023800 	.word	0x40023800
 8002300:	08007e1c 	.word	0x08007e1c
 8002304:	20000014 	.word	0x20000014
 8002308:	20000018 	.word	0x20000018

0800230c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002310:	b090      	sub	sp, #64	@ 0x40
 8002312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002324:	4b59      	ldr	r3, [pc, #356]	@ (800248c <HAL_RCC_GetSysClockFreq+0x180>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d00d      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x40>
 8002330:	2b08      	cmp	r3, #8
 8002332:	f200 80a1 	bhi.w	8002478 <HAL_RCC_GetSysClockFreq+0x16c>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x34>
 800233a:	2b04      	cmp	r3, #4
 800233c:	d003      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x3a>
 800233e:	e09b      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x184>)
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002344:	e09b      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002346:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x188>)
 8002348:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800234a:	e098      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800234c:	4b4f      	ldr	r3, [pc, #316]	@ (800248c <HAL_RCC_GetSysClockFreq+0x180>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002354:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002356:	4b4d      	ldr	r3, [pc, #308]	@ (800248c <HAL_RCC_GetSysClockFreq+0x180>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d028      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002362:	4b4a      	ldr	r3, [pc, #296]	@ (800248c <HAL_RCC_GetSysClockFreq+0x180>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	099b      	lsrs	r3, r3, #6
 8002368:	2200      	movs	r2, #0
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	627a      	str	r2, [r7, #36]	@ 0x24
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002374:	2100      	movs	r1, #0
 8002376:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x188>)
 8002378:	fb03 f201 	mul.w	r2, r3, r1
 800237c:	2300      	movs	r3, #0
 800237e:	fb00 f303 	mul.w	r3, r0, r3
 8002382:	4413      	add	r3, r2
 8002384:	4a43      	ldr	r2, [pc, #268]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x188>)
 8002386:	fba0 1202 	umull	r1, r2, r0, r2
 800238a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800238c:	460a      	mov	r2, r1
 800238e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002392:	4413      	add	r3, r2
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002398:	2200      	movs	r2, #0
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	61fa      	str	r2, [r7, #28]
 800239e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023a6:	f7fd ff73 	bl	8000290 <__aeabi_uldivmod>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4613      	mov	r3, r2
 80023b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b2:	e053      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b4:	4b35      	ldr	r3, [pc, #212]	@ (800248c <HAL_RCC_GetSysClockFreq+0x180>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	2200      	movs	r2, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	617a      	str	r2, [r7, #20]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023c6:	f04f 0b00 	mov.w	fp, #0
 80023ca:	4652      	mov	r2, sl
 80023cc:	465b      	mov	r3, fp
 80023ce:	f04f 0000 	mov.w	r0, #0
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	0159      	lsls	r1, r3, #5
 80023d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023dc:	0150      	lsls	r0, r2, #5
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	ebb2 080a 	subs.w	r8, r2, sl
 80023e6:	eb63 090b 	sbc.w	r9, r3, fp
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002402:	eb63 0509 	sbc.w	r5, r3, r9
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	00eb      	lsls	r3, r5, #3
 8002410:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002414:	00e2      	lsls	r2, r4, #3
 8002416:	4614      	mov	r4, r2
 8002418:	461d      	mov	r5, r3
 800241a:	eb14 030a 	adds.w	r3, r4, sl
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	eb45 030b 	adc.w	r3, r5, fp
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002432:	4629      	mov	r1, r5
 8002434:	028b      	lsls	r3, r1, #10
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800243c:	4621      	mov	r1, r4
 800243e:	028a      	lsls	r2, r1, #10
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002446:	2200      	movs	r2, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	60fa      	str	r2, [r7, #12]
 800244c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002450:	f7fd ff1e 	bl	8000290 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_RCC_GetSysClockFreq+0x180>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800246c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002476:	e002      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x184>)
 800247a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800247c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002480:	4618      	mov	r0, r3
 8002482:	3740      	adds	r7, #64	@ 0x40
 8002484:	46bd      	mov	sp, r7
 8002486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	00f42400 	.word	0x00f42400
 8002494:	017d7840 	.word	0x017d7840

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <HAL_RCC_GetHCLKFreq+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000014 	.word	0x20000014

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b4:	f7ff fff0 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4903      	ldr	r1, [pc, #12]	@ (80024d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	08007e2c 	.word	0x08007e2c

080024d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024dc:	f7ff ffdc 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0b5b      	lsrs	r3, r3, #13
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4903      	ldr	r1, [pc, #12]	@ (80024fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08007e2c 	.word	0x08007e2c

08002500 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	220f      	movs	r2, #15
 800250e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_RCC_GetClockConfig+0x5c>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0203 	and.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_RCC_GetClockConfig+0x5c>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_RCC_GetClockConfig+0x5c>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <HAL_RCC_GetClockConfig+0x5c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002542:	4b07      	ldr	r3, [pc, #28]	@ (8002560 <HAL_RCC_GetClockConfig+0x60>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0207 	and.w	r2, r3, #7
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40023c00 	.word	0x40023c00

08002564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f839 	bl	8002602 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 f9b2 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d001      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e044      	b.n	80026ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d018      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x6c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800265a:	d013      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x6c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1a      	ldr	r2, [pc, #104]	@ (80026cc <HAL_TIM_Base_Start_IT+0xb4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00e      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x6c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a19      	ldr	r2, [pc, #100]	@ (80026d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x6c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a17      	ldr	r2, [pc, #92]	@ (80026d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d004      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x6c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d111      	bne.n	80026a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b06      	cmp	r3, #6
 8002694:	d010      	beq.n	80026b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a6:	e007      	b.n	80026b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40000c00 	.word	0x40000c00
 80026d8:	40014000 	.word	0x40014000

080026dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d020      	beq.n	8002740 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0202 	mvn.w	r2, #2
 8002710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8d2 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8c4 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f8d5 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d020      	beq.n	800278c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0204 	mvn.w	r2, #4
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8ac 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f89e 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8af 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d020      	beq.n	80027d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0208 	mvn.w	r2, #8
 80027a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2204      	movs	r2, #4
 80027ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f886 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f878 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f889 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d020      	beq.n	8002824 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0210 	mvn.w	r2, #16
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2208      	movs	r2, #8
 80027fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f860 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f852 	bl	80028bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f863 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00c      	beq.n	8002848 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0201 	mvn.w	r2, #1
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fb5a 	bl	8000efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8e6 	bl	8002a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f834 	bl	80028f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00c      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0220 	mvn.w	r2, #32
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8b8 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <TIM_Base_SetConfig+0xfc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00f      	beq.n	8002944 <TIM_Base_SetConfig+0x38>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292a:	d00b      	beq.n	8002944 <TIM_Base_SetConfig+0x38>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a37      	ldr	r2, [pc, #220]	@ (8002a0c <TIM_Base_SetConfig+0x100>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <TIM_Base_SetConfig+0x38>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a36      	ldr	r2, [pc, #216]	@ (8002a10 <TIM_Base_SetConfig+0x104>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <TIM_Base_SetConfig+0x38>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a35      	ldr	r2, [pc, #212]	@ (8002a14 <TIM_Base_SetConfig+0x108>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a2b      	ldr	r2, [pc, #172]	@ (8002a08 <TIM_Base_SetConfig+0xfc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01b      	beq.n	8002996 <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002964:	d017      	beq.n	8002996 <TIM_Base_SetConfig+0x8a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a28      	ldr	r2, [pc, #160]	@ (8002a0c <TIM_Base_SetConfig+0x100>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <TIM_Base_SetConfig+0x8a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a27      	ldr	r2, [pc, #156]	@ (8002a10 <TIM_Base_SetConfig+0x104>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00f      	beq.n	8002996 <TIM_Base_SetConfig+0x8a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <TIM_Base_SetConfig+0x108>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00b      	beq.n	8002996 <TIM_Base_SetConfig+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a25      	ldr	r2, [pc, #148]	@ (8002a18 <TIM_Base_SetConfig+0x10c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <TIM_Base_SetConfig+0x8a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a24      	ldr	r2, [pc, #144]	@ (8002a1c <TIM_Base_SetConfig+0x110>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_Base_SetConfig+0x8a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <TIM_Base_SetConfig+0x114>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d108      	bne.n	80029a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800299c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002a08 <TIM_Base_SetConfig+0xfc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d105      	bne.n	80029fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f023 0201 	bic.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]
  }
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e042      	b.n	8002ae4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe fc4e 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	@ 0x24
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fce5 	bl	8003460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d112      	bne.n	8002b2c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_UART_Receive_IT+0x26>
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00b      	b.n	8002b2e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fac4 	bl	80030b0 <UART_Start_Receive_IT>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	e000      	b.n	8002b2e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0ba      	sub	sp, #232	@ 0xe8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_UART_IRQHandler+0x66>
 8002b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fba3 	bl	80032e2 <UART_Receive_IT>
      return;
 8002b9c:	e25b      	b.n	8003056 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80de 	beq.w	8002d64 <HAL_UART_IRQHandler+0x22c>
 8002ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80d1 	beq.w	8002d64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_UART_IRQHandler+0xae>
 8002bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_UART_IRQHandler+0xd2>
 8002bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	f043 0202 	orr.w	r2, r3, #2
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_UART_IRQHandler+0xf6>
 8002c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d011      	beq.n	8002c5e <HAL_UART_IRQHandler+0x126>
 8002c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	f043 0208 	orr.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 81f2 	beq.w	800304c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_UART_IRQHandler+0x14e>
 8002c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fb2e 	bl	80032e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c90:	2b40      	cmp	r3, #64	@ 0x40
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x17a>
 8002caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04f      	beq.n	8002d52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa36 	bl	8003124 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc2:	2b40      	cmp	r3, #64	@ 0x40
 8002cc4:	d141      	bne.n	8002d4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002cf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1d9      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d013      	beq.n	8002d42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f18 <HAL_UART_IRQHandler+0x3e0>)
 8002d20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fdd2 	bl	80018d0 <HAL_DMA_Abort_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e00e      	b.n	8002d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f99e 	bl	8003084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	e00a      	b.n	8002d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f99a 	bl	8003084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	e006      	b.n	8002d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f996 	bl	8003084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d5e:	e175      	b.n	800304c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	bf00      	nop
    return;
 8002d62:	e173      	b.n	800304c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	f040 814f 	bne.w	800300c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8148 	beq.w	800300c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8141 	beq.w	800300c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	f040 80b6 	bne.w	8002f1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8145 	beq.w	8003050 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f080 813e 	bcs.w	8003050 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de6:	f000 8088 	beq.w	8002efa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1d9      	bne.n	8002dea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3314      	adds	r3, #20
 8002e3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3314      	adds	r3, #20
 8002e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e1      	bne.n	8002e36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e3      	bne.n	8002e72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002edc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ede:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ee2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e3      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fc7b 	bl	80017f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8c1 	bl	8003098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f16:	e09b      	b.n	8003050 <HAL_UART_IRQHandler+0x518>
 8002f18:	080031eb 	.word	0x080031eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 808e 	beq.w	8003054 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8089 	beq.w	8003054 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f66:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e3      	bne.n	8002f42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	623b      	str	r3, [r7, #32]
   return(result);
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3314      	adds	r3, #20
 8002f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa6:	e841 2300 	strex	r3, r2, [r1]
 8002faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e3      	bne.n	8002f7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0310 	bic.w	r3, r3, #16
 8002fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fe4:	61fa      	str	r2, [r7, #28]
 8002fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	69b9      	ldr	r1, [r7, #24]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e3      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f847 	bl	8003098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800300a:	e023      	b.n	8003054 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_UART_IRQHandler+0x4f4>
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800301c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8f4 	bl	8003212 <UART_Transmit_IT>
    return;
 800302a:	e014      	b.n	8003056 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800302c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00e      	beq.n	8003056 <HAL_UART_IRQHandler+0x51e>
 8003038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800303c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f934 	bl	80032b2 <UART_EndTransmit_IT>
    return;
 800304a:	e004      	b.n	8003056 <HAL_UART_IRQHandler+0x51e>
    return;
 800304c:	bf00      	nop
 800304e:	e002      	b.n	8003056 <HAL_UART_IRQHandler+0x51e>
      return;
 8003050:	bf00      	nop
 8003052:	e000      	b.n	8003056 <HAL_UART_IRQHandler+0x51e>
      return;
 8003054:	bf00      	nop
  }
}
 8003056:	37e8      	adds	r7, #232	@ 0xe8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2222      	movs	r2, #34	@ 0x22
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0220 	orr.w	r2, r2, #32
 8003114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b095      	sub	sp, #84	@ 0x54
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800314c:	643a      	str	r2, [r7, #64]	@ 0x40
 800314e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800315a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e5      	bne.n	800312c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3314      	adds	r3, #20
 8003166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3314      	adds	r3, #20
 800317e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e5      	bne.n	8003160 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	2b01      	cmp	r3, #1
 800319a:	d119      	bne.n	80031d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f023 0310 	bic.w	r3, r3, #16
 80031b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031bc:	61ba      	str	r2, [r7, #24]
 80031be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6979      	ldr	r1, [r7, #20]
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e5      	bne.n	800319c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031de:	bf00      	nop
 80031e0:	3754      	adds	r7, #84	@ 0x54
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff ff3d 	bl	8003084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b21      	cmp	r3, #33	@ 0x21
 8003224:	d13e      	bne.n	80032a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322e:	d114      	bne.n	800325a <UART_Transmit_IT+0x48>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d110      	bne.n	800325a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800324c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	621a      	str	r2, [r3, #32]
 8003258:	e008      	b.n	800326c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6211      	str	r1, [r2, #32]
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4619      	mov	r1, r3
 800327a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10f      	bne.n	80032a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800328e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800329e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fec2 	bl	800305c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b08c      	sub	sp, #48	@ 0x30
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b22      	cmp	r3, #34	@ 0x22
 80032f4:	f040 80ae 	bne.w	8003454 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003300:	d117      	bne.n	8003332 <UART_Receive_IT+0x50>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d113      	bne.n	8003332 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003320:	b29a      	uxth	r2, r3
 8003322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	1c9a      	adds	r2, r3, #2
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003330:	e026      	b.n	8003380 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003344:	d007      	beq.n	8003356 <UART_Receive_IT+0x74>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <UART_Receive_IT+0x82>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e008      	b.n	8003376 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003370:	b2da      	uxtb	r2, r3
 8003372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29b      	uxth	r3, r3
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4619      	mov	r1, r3
 800338e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003390:	2b00      	cmp	r3, #0
 8003392:	d15d      	bne.n	8003450 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0220 	bic.w	r2, r2, #32
 80033a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d135      	bne.n	8003446 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	613b      	str	r3, [r7, #16]
   return(result);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003400:	623a      	str	r2, [r7, #32]
 8003402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	69f9      	ldr	r1, [r7, #28]
 8003406:	6a3a      	ldr	r2, [r7, #32]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	61bb      	str	r3, [r7, #24]
   return(result);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b10      	cmp	r3, #16
 8003420:	d10a      	bne.n	8003438 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fe2a 	bl	8003098 <HAL_UARTEx_RxEventCallback>
 8003444:	e002      	b.n	800344c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fe12 	bl	8003070 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e002      	b.n	8003456 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3730      	adds	r7, #48	@ 0x30
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b0c0      	sub	sp, #256	@ 0x100
 8003466:	af00      	add	r7, sp, #0
 8003468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	ea40 0301 	orr.w	r3, r0, r1
 8003488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	431a      	orrs	r2, r3
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034b8:	f021 010c 	bic.w	r1, r1, #12
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034c6:	430b      	orrs	r3, r1
 80034c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	6999      	ldr	r1, [r3, #24]
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	ea40 0301 	orr.w	r3, r0, r1
 80034e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b8f      	ldr	r3, [pc, #572]	@ (800372c <UART_SetConfig+0x2cc>)
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d005      	beq.n	8003500 <UART_SetConfig+0xa0>
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003730 <UART_SetConfig+0x2d0>)
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d104      	bne.n	800350a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003500:	f7fe ffea 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8003504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003508:	e003      	b.n	8003512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800350a:	f7fe ffd1 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 800350e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800351c:	f040 810c 	bne.w	8003738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800352a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800352e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	1891      	adds	r1, r2, r2
 8003538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800353a:	415b      	adcs	r3, r3
 800353c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800353e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003542:	4621      	mov	r1, r4
 8003544:	eb12 0801 	adds.w	r8, r2, r1
 8003548:	4629      	mov	r1, r5
 800354a:	eb43 0901 	adc.w	r9, r3, r1
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003562:	4690      	mov	r8, r2
 8003564:	4699      	mov	r9, r3
 8003566:	4623      	mov	r3, r4
 8003568:	eb18 0303 	adds.w	r3, r8, r3
 800356c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003570:	462b      	mov	r3, r5
 8003572:	eb49 0303 	adc.w	r3, r9, r3
 8003576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800358a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800358e:	460b      	mov	r3, r1
 8003590:	18db      	adds	r3, r3, r3
 8003592:	653b      	str	r3, [r7, #80]	@ 0x50
 8003594:	4613      	mov	r3, r2
 8003596:	eb42 0303 	adc.w	r3, r2, r3
 800359a:	657b      	str	r3, [r7, #84]	@ 0x54
 800359c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035a4:	f7fc fe74 	bl	8000290 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2302 	umull	r2, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	011c      	lsls	r4, r3, #4
 80035b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035d0:	415b      	adcs	r3, r3
 80035d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035d8:	4641      	mov	r1, r8
 80035da:	eb12 0a01 	adds.w	sl, r2, r1
 80035de:	4649      	mov	r1, r9
 80035e0:	eb43 0b01 	adc.w	fp, r3, r1
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f8:	4692      	mov	sl, r2
 80035fa:	469b      	mov	fp, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003606:	464b      	mov	r3, r9
 8003608:	eb4b 0303 	adc.w	r3, fp, r3
 800360c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800361c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003624:	460b      	mov	r3, r1
 8003626:	18db      	adds	r3, r3, r3
 8003628:	643b      	str	r3, [r7, #64]	@ 0x40
 800362a:	4613      	mov	r3, r2
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	647b      	str	r3, [r7, #68]	@ 0x44
 8003632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800363a:	f7fc fe29 	bl	8000290 <__aeabi_uldivmod>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4611      	mov	r1, r2
 8003644:	4b3b      	ldr	r3, [pc, #236]	@ (8003734 <UART_SetConfig+0x2d4>)
 8003646:	fba3 2301 	umull	r2, r3, r3, r1
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2264      	movs	r2, #100	@ 0x64
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	1acb      	subs	r3, r1, r3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800365a:	4b36      	ldr	r3, [pc, #216]	@ (8003734 <UART_SetConfig+0x2d4>)
 800365c:	fba3 2302 	umull	r2, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003668:	441c      	add	r4, r3
 800366a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003684:	415b      	adcs	r3, r3
 8003686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800368c:	4641      	mov	r1, r8
 800368e:	1851      	adds	r1, r2, r1
 8003690:	6339      	str	r1, [r7, #48]	@ 0x30
 8003692:	4649      	mov	r1, r9
 8003694:	414b      	adcs	r3, r1
 8003696:	637b      	str	r3, [r7, #52]	@ 0x34
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036a4:	4659      	mov	r1, fp
 80036a6:	00cb      	lsls	r3, r1, #3
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ae:	4651      	mov	r1, sl
 80036b0:	00ca      	lsls	r2, r1, #3
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	4642      	mov	r2, r8
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036c0:	464b      	mov	r3, r9
 80036c2:	460a      	mov	r2, r1
 80036c4:	eb42 0303 	adc.w	r3, r2, r3
 80036c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036e0:	460b      	mov	r3, r1
 80036e2:	18db      	adds	r3, r3, r3
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e6:	4613      	mov	r3, r2
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036f6:	f7fc fdcb 	bl	8000290 <__aeabi_uldivmod>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <UART_SetConfig+0x2d4>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2164      	movs	r1, #100	@ 0x64
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	3332      	adds	r3, #50	@ 0x32
 8003712:	4a08      	ldr	r2, [pc, #32]	@ (8003734 <UART_SetConfig+0x2d4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4422      	add	r2, r4
 8003726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003728:	e106      	b.n	8003938 <UART_SetConfig+0x4d8>
 800372a:	bf00      	nop
 800372c:	40011000 	.word	0x40011000
 8003730:	40011400 	.word	0x40011400
 8003734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800374a:	4642      	mov	r2, r8
 800374c:	464b      	mov	r3, r9
 800374e:	1891      	adds	r1, r2, r2
 8003750:	6239      	str	r1, [r7, #32]
 8003752:	415b      	adcs	r3, r3
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
 8003756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800375a:	4641      	mov	r1, r8
 800375c:	1854      	adds	r4, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb43 0501 	adc.w	r5, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	00eb      	lsls	r3, r5, #3
 800376e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003772:	00e2      	lsls	r2, r4, #3
 8003774:	4614      	mov	r4, r2
 8003776:	461d      	mov	r5, r3
 8003778:	4643      	mov	r3, r8
 800377a:	18e3      	adds	r3, r4, r3
 800377c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003780:	464b      	mov	r3, r9
 8003782:	eb45 0303 	adc.w	r3, r5, r3
 8003786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037a6:	4629      	mov	r1, r5
 80037a8:	008b      	lsls	r3, r1, #2
 80037aa:	4621      	mov	r1, r4
 80037ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b0:	4621      	mov	r1, r4
 80037b2:	008a      	lsls	r2, r1, #2
 80037b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037b8:	f7fc fd6a 	bl	8000290 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4b60      	ldr	r3, [pc, #384]	@ (8003944 <UART_SetConfig+0x4e4>)
 80037c2:	fba3 2302 	umull	r2, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	011c      	lsls	r4, r3, #4
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	61b9      	str	r1, [r7, #24]
 80037e4:	415b      	adcs	r3, r3
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ec:	4641      	mov	r1, r8
 80037ee:	1851      	adds	r1, r2, r1
 80037f0:	6139      	str	r1, [r7, #16]
 80037f2:	4649      	mov	r1, r9
 80037f4:	414b      	adcs	r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	00cb      	lsls	r3, r1, #3
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380e:	4651      	mov	r1, sl
 8003810:	00ca      	lsls	r2, r1, #3
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	4603      	mov	r3, r0
 8003818:	4642      	mov	r2, r8
 800381a:	189b      	adds	r3, r3, r2
 800381c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003844:	4649      	mov	r1, r9
 8003846:	008b      	lsls	r3, r1, #2
 8003848:	4641      	mov	r1, r8
 800384a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384e:	4641      	mov	r1, r8
 8003850:	008a      	lsls	r2, r1, #2
 8003852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003856:	f7fc fd1b 	bl	8000290 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4611      	mov	r1, r2
 8003860:	4b38      	ldr	r3, [pc, #224]	@ (8003944 <UART_SetConfig+0x4e4>)
 8003862:	fba3 2301 	umull	r2, r3, r3, r1
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2264      	movs	r2, #100	@ 0x64
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	1acb      	subs	r3, r1, r3
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	3332      	adds	r3, #50	@ 0x32
 8003874:	4a33      	ldr	r2, [pc, #204]	@ (8003944 <UART_SetConfig+0x4e4>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003880:	441c      	add	r4, r3
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	673b      	str	r3, [r7, #112]	@ 0x70
 800388a:	677a      	str	r2, [r7, #116]	@ 0x74
 800388c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	415b      	adcs	r3, r3
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a0:	4641      	mov	r1, r8
 80038a2:	1851      	adds	r1, r2, r1
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	4649      	mov	r1, r9
 80038a8:	414b      	adcs	r3, r1
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038b8:	4659      	mov	r1, fp
 80038ba:	00cb      	lsls	r3, r1, #3
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c2:	4651      	mov	r1, sl
 80038c4:	00ca      	lsls	r2, r1, #3
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	4642      	mov	r2, r8
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038d2:	464b      	mov	r3, r9
 80038d4:	460a      	mov	r2, r1
 80038d6:	eb42 0303 	adc.w	r3, r2, r3
 80038da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038f4:	4649      	mov	r1, r9
 80038f6:	008b      	lsls	r3, r1, #2
 80038f8:	4641      	mov	r1, r8
 80038fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fe:	4641      	mov	r1, r8
 8003900:	008a      	lsls	r2, r1, #2
 8003902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003906:	f7fc fcc3 	bl	8000290 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <UART_SetConfig+0x4e4>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	@ 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	3332      	adds	r3, #50	@ 0x32
 8003922:	4a08      	ldr	r2, [pc, #32]	@ (8003944 <UART_SetConfig+0x4e4>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4422      	add	r2, r4
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800393e:	46bd      	mov	sp, r7
 8003940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003944:	51eb851f 	.word	0x51eb851f

08003948 <__NVIC_SetPriority>:
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	2b00      	cmp	r3, #0
 800395a:	db0a      	blt.n	8003972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	490c      	ldr	r1, [pc, #48]	@ (8003994 <__NVIC_SetPriority+0x4c>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	0112      	lsls	r2, r2, #4
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	440b      	add	r3, r1
 800396c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003970:	e00a      	b.n	8003988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4908      	ldr	r1, [pc, #32]	@ (8003998 <__NVIC_SetPriority+0x50>)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3b04      	subs	r3, #4
 8003980:	0112      	lsls	r2, r2, #4
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	440b      	add	r3, r1
 8003986:	761a      	strb	r2, [r3, #24]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000e100 	.word	0xe000e100
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <SysTick_Handler+0x1c>)
 80039a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039a4:	f001 fd46 	bl	8005434 <xTaskGetSchedulerState>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d001      	beq.n	80039b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039ae:	f002 fd43 	bl	8006438 <xPortSysTickHandler>
  }
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	e000e010 	.word	0xe000e010

080039bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039c0:	2100      	movs	r1, #0
 80039c2:	f06f 0004 	mvn.w	r0, #4
 80039c6:	f7ff ffbf 	bl	8003948 <__NVIC_SetPriority>
#endif
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d6:	f3ef 8305 	mrs	r3, IPSR
 80039da:	603b      	str	r3, [r7, #0]
  return(result);
 80039dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039e2:	f06f 0305 	mvn.w	r3, #5
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	e00c      	b.n	8003a04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <osKernelInitialize+0x44>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <osKernelInitialize+0x44>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	e002      	b.n	8003a04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a04:	687b      	ldr	r3, [r7, #4]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	2000025c 	.word	0x2000025c

08003a18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1e:	f3ef 8305 	mrs	r3, IPSR
 8003a22:	603b      	str	r3, [r7, #0]
  return(result);
 8003a24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a2a:	f06f 0305 	mvn.w	r3, #5
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	e010      	b.n	8003a54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a32:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <osKernelStart+0x48>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d109      	bne.n	8003a4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a3a:	f7ff ffbf 	bl	80039bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a3e:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <osKernelStart+0x48>)
 8003a40:	2202      	movs	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a44:	f001 f892 	bl	8004b6c <vTaskStartScheduler>
      stat = osOK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	e002      	b.n	8003a54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a54:	687b      	ldr	r3, [r7, #4]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	2000025c 	.word	0x2000025c

08003a64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08e      	sub	sp, #56	@ 0x38
 8003a68:	af04      	add	r7, sp, #16
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a74:	f3ef 8305 	mrs	r3, IPSR
 8003a78:	617b      	str	r3, [r7, #20]
  return(result);
 8003a7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d17e      	bne.n	8003b7e <osThreadNew+0x11a>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d07b      	beq.n	8003b7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a8a:	2318      	movs	r3, #24
 8003a8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d045      	beq.n	8003b2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <osThreadNew+0x48>
        name = attr->name;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <osThreadNew+0x6e>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b38      	cmp	r3, #56	@ 0x38
 8003ac4:	d805      	bhi.n	8003ad2 <osThreadNew+0x6e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <osThreadNew+0x72>
        return (NULL);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e054      	b.n	8003b80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00e      	beq.n	8003b0c <osThreadNew+0xa8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003af4:	d90a      	bls.n	8003b0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <osThreadNew+0xa8>
        mem = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e010      	b.n	8003b2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10c      	bne.n	8003b2e <osThreadNew+0xca>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <osThreadNew+0xca>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <osThreadNew+0xca>
          mem = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e001      	b.n	8003b2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d110      	bne.n	8003b56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b3c:	9202      	str	r2, [sp, #8]
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a3a      	ldr	r2, [r7, #32]
 8003b48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fe1a 	bl	8004784 <xTaskCreateStatic>
 8003b50:	4603      	mov	r3, r0
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e013      	b.n	8003b7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d110      	bne.n	8003b7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	f107 0310 	add.w	r3, r7, #16
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fe68 	bl	8004844 <xTaskCreate>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <osThreadNew+0x11a>
            hTask = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b7e:	693b      	ldr	r3, [r7, #16]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3728      	adds	r7, #40	@ 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b90:	f3ef 8305 	mrs	r3, IPSR
 8003b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <osDelay+0x1c>
    stat = osErrorISR;
 8003b9c:	f06f 0305 	mvn.w	r3, #5
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e007      	b.n	8003bb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 ffa6 	bl	8004b00 <vTaskDelay>
    }
  }

  return (stat);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a07      	ldr	r2, [pc, #28]	@ (8003bec <vApplicationGetIdleTaskMemory+0x2c>)
 8003bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a06      	ldr	r2, [pc, #24]	@ (8003bf0 <vApplicationGetIdleTaskMemory+0x30>)
 8003bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	@ 0x80
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000260 	.word	0x20000260
 8003bf0:	20000308 	.word	0x20000308

08003bf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a07      	ldr	r2, [pc, #28]	@ (8003c20 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a06      	ldr	r2, [pc, #24]	@ (8003c24 <vApplicationGetTimerTaskMemory+0x30>)
 8003c0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000508 	.word	0x20000508
 8003c24:	200005b0 	.word	0x200005b0

08003c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 0208 	add.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f103 0208 	add.w	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 0208 	add.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d103      	bne.n	8003cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e00c      	b.n	8003d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3308      	adds	r3, #8
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e002      	b.n	8003cf8 <vListInsert+0x2e>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d2f6      	bcs.n	8003cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6852      	ldr	r2, [r2, #4]
 8003d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d103      	bne.n	8003d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <xQueueGenericReset+0x2c>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	60bb      	str	r3, [r7, #8]
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003dbc:	f002 faac 	bl	8006318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dec:	3b01      	subs	r3, #1
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22ff      	movs	r2, #255	@ 0xff
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	22ff      	movs	r2, #255	@ 0xff
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d114      	bne.n	8003e3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01a      	beq.n	8003e50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 f942 	bl	80050a8 <xTaskRemoveFromEventList>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d012      	beq.n	8003e50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <xQueueGenericReset+0xd0>)
 8003e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	e009      	b.n	8003e50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3310      	adds	r3, #16
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fef1 	bl	8003c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3324      	adds	r3, #36	@ 0x24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff feec 	bl	8003c28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e50:	f002 fa94 	bl	800637c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e54:	2301      	movs	r3, #1
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	@ 0x38
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <xQueueGenericCreateStatic+0x56>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <xQueueGenericCreateStatic+0x5a>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xQueueGenericCreateStatic+0x5c>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	623b      	str	r3, [r7, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <xQueueGenericCreateStatic+0x84>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <xQueueGenericCreateStatic+0x88>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <xQueueGenericCreateStatic+0x8a>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	61fb      	str	r3, [r7, #28]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f0a:	2350      	movs	r3, #80	@ 0x50
 8003f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b50      	cmp	r3, #80	@ 0x50
 8003f12:	d00b      	beq.n	8003f2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	61bb      	str	r3, [r7, #24]
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f805 	bl	8003f5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3730      	adds	r7, #48	@ 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e002      	b.n	8003f80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	69b8      	ldr	r0, [r7, #24]
 8003f90:	f7ff fefe 	bl	8003d90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	@ 0x38
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <xQueueGenericSend+0x34>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <xQueueGenericSend+0x42>
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <xQueueGenericSend+0x46>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueGenericSend+0x48>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <xQueueGenericSend+0x64>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x72>
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <xQueueGenericSend+0x76>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueGenericSend+0x78>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <xQueueGenericSend+0x94>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	623b      	str	r3, [r7, #32]
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004038:	f001 f9fc 	bl	8005434 <xTaskGetSchedulerState>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <xQueueGenericSend+0xa4>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <xQueueGenericSend+0xa8>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <xQueueGenericSend+0xaa>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <xQueueGenericSend+0xc6>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	61fb      	str	r3, [r7, #28]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800406a:	f002 f955 	bl	8006318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <xQueueGenericSend+0xdc>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d129      	bne.n	80040d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004086:	f000 fa0f 	bl	80044a8 <prvCopyDataToQueue>
 800408a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	3324      	adds	r3, #36	@ 0x24
 8004098:	4618      	mov	r0, r3
 800409a:	f001 f805 	bl	80050a8 <xTaskRemoveFromEventList>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040a4:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <xQueueGenericSend+0x200>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	e00a      	b.n	80040cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040bc:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <xQueueGenericSend+0x200>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040cc:	f002 f956 	bl	800637c <vPortExitCritical>
				return pdPASS;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e063      	b.n	800419c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040da:	f002 f94f 	bl	800637c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	e05c      	b.n	800419c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f83f 	bl	8005170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040f2:	2301      	movs	r3, #1
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040f6:	f002 f941 	bl	800637c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040fa:	f000 fda7 	bl	8004c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040fe:	f002 f90b 	bl	8006318 <vPortEnterCritical>
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004108:	b25b      	sxtb	r3, r3
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d103      	bne.n	8004118 <xQueueGenericSend+0x174>
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800411e:	b25b      	sxtb	r3, r3
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d103      	bne.n	800412e <xQueueGenericSend+0x18a>
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800412e:	f002 f925 	bl	800637c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004132:	1d3a      	adds	r2, r7, #4
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f82e 	bl	800519c <xTaskCheckForTimeOut>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d124      	bne.n	8004190 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004146:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004148:	f000 faa6 	bl	8004698 <prvIsQueueFull>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	3310      	adds	r3, #16
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f000 ff52 	bl	8005004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004162:	f000 fa31 	bl	80045c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004166:	f000 fd7f 	bl	8004c68 <xTaskResumeAll>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f af7c 	bne.w	800406a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004172:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <xQueueGenericSend+0x200>)
 8004174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	e772      	b.n	800406a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004186:	f000 fa1f 	bl	80045c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800418a:	f000 fd6d 	bl	8004c68 <xTaskResumeAll>
 800418e:	e76c      	b.n	800406a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004192:	f000 fa19 	bl	80045c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004196:	f000 fd67 	bl	8004c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800419a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800419c:	4618      	mov	r0, r3
 800419e:	3738      	adds	r7, #56	@ 0x38
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b090      	sub	sp, #64	@ 0x40
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSendFromISR+0x3e>
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSendFromISR+0x42>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSendFromISR+0x44>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d103      	bne.n	8004216 <xQueueGenericSendFromISR+0x6e>
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <xQueueGenericSendFromISR+0x72>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <xQueueGenericSendFromISR+0x74>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	623b      	str	r3, [r7, #32]
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004238:	f002 f94e 	bl	80064d8 <vPortValidateInterruptPriority>
	__asm volatile
 800423c:	f3ef 8211 	mrs	r2, BASEPRI
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	61fa      	str	r2, [r7, #28]
 8004252:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004254:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004256:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <xQueueGenericSendFromISR+0xc2>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d12f      	bne.n	80042ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004270:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004280:	f000 f912 	bl	80044a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004284:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d112      	bne.n	80042b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	3324      	adds	r3, #36	@ 0x24
 800429a:	4618      	mov	r0, r3
 800429c:	f000 ff04 	bl	80050a8 <xTaskRemoveFromEventList>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e007      	b.n	80042c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80042b8:	3301      	adds	r3, #1
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	b25a      	sxtb	r2, r3
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042c4:	2301      	movs	r3, #1
 80042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80042c8:	e001      	b.n	80042ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d0:	617b      	str	r3, [r7, #20]
	__asm volatile
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f383 8811 	msr	BASEPRI, r3
}
 80042d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3740      	adds	r7, #64	@ 0x40
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08c      	sub	sp, #48	@ 0x30
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <xQueueReceive+0x32>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	623b      	str	r3, [r7, #32]
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	e7fd      	b.n	8004312 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <xQueueReceive+0x40>
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <xQueueReceive+0x44>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <xQueueReceive+0x46>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <xQueueReceive+0x62>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	61fb      	str	r3, [r7, #28]
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004346:	f001 f875 	bl	8005434 <xTaskGetSchedulerState>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <xQueueReceive+0x72>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <xQueueReceive+0x76>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <xQueueReceive+0x78>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <xQueueReceive+0x94>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	61bb      	str	r3, [r7, #24]
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004378:	f001 ffce 	bl	8006318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01f      	beq.n	80043c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800438c:	f000 f8f6 	bl	800457c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	1e5a      	subs	r2, r3, #1
 8004394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004396:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00f      	beq.n	80043c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a2:	3310      	adds	r3, #16
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fe7f 	bl	80050a8 <xTaskRemoveFromEventList>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043b0:	4b3c      	ldr	r3, [pc, #240]	@ (80044a4 <xQueueReceive+0x1c0>)
 80043b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043c0:	f001 ffdc 	bl	800637c <vPortExitCritical>
				return pdPASS;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e069      	b.n	800449c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ce:	f001 ffd5 	bl	800637c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e062      	b.n	800449c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043dc:	f107 0310 	add.w	r3, r7, #16
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fec5 	bl	8005170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ea:	f001 ffc7 	bl	800637c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ee:	f000 fc2d 	bl	8004c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043f2:	f001 ff91 	bl	8006318 <vPortEnterCritical>
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d103      	bne.n	800440c <xQueueReceive+0x128>
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004412:	b25b      	sxtb	r3, r3
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d103      	bne.n	8004422 <xQueueReceive+0x13e>
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004422:	f001 ffab 	bl	800637c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004426:	1d3a      	adds	r2, r7, #4
 8004428:	f107 0310 	add.w	r3, r7, #16
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f000 feb4 	bl	800519c <xTaskCheckForTimeOut>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d123      	bne.n	8004482 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800443a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800443c:	f000 f916 	bl	800466c <prvIsQueueEmpty>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	3324      	adds	r3, #36	@ 0x24
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fdd8 	bl	8005004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004456:	f000 f8b7 	bl	80045c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800445a:	f000 fc05 	bl	8004c68 <xTaskResumeAll>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d189      	bne.n	8004378 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004464:	4b0f      	ldr	r3, [pc, #60]	@ (80044a4 <xQueueReceive+0x1c0>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	e780      	b.n	8004378 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004478:	f000 f8a6 	bl	80045c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800447c:	f000 fbf4 	bl	8004c68 <xTaskResumeAll>
 8004480:	e77a      	b.n	8004378 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004484:	f000 f8a0 	bl	80045c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004488:	f000 fbee 	bl	8004c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800448c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800448e:	f000 f8ed 	bl	800466c <prvIsQueueEmpty>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	f43f af6f 	beq.w	8004378 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800449a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800449c:	4618      	mov	r0, r3
 800449e:	3730      	adds	r7, #48	@ 0x30
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d14d      	bne.n	800456a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 ffcc 	bl	8005470 <xTaskPriorityDisinherit>
 80044d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	e043      	b.n	800456a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d119      	bne.n	800451c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6858      	ldr	r0, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	461a      	mov	r2, r3
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	f002 fe98 	bl	8007228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	441a      	add	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d32b      	bcc.n	800456a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	e026      	b.n	800456a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68d8      	ldr	r0, [r3, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	461a      	mov	r2, r3
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	f002 fe7e 	bl	8007228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	425b      	negs	r3, r3
 8004536:	441a      	add	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d207      	bcs.n	8004558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	425b      	negs	r3, r3
 8004552:	441a      	add	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d105      	bne.n	800456a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	3b01      	subs	r3, #1
 8004568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004572:	697b      	ldr	r3, [r7, #20]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d303      	bcc.n	80045b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68d9      	ldr	r1, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	461a      	mov	r2, r3
 80045ba:	6838      	ldr	r0, [r7, #0]
 80045bc:	f002 fe34 	bl	8007228 <memcpy>
	}
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045d0:	f001 fea2 	bl	8006318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045dc:	e011      	b.n	8004602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d012      	beq.n	800460c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3324      	adds	r3, #36	@ 0x24
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd5c 	bl	80050a8 <xTaskRemoveFromEventList>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045f6:	f000 fe35 	bl	8005264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	dce9      	bgt.n	80045de <prvUnlockQueue+0x16>
 800460a:	e000      	b.n	800460e <prvUnlockQueue+0x46>
					break;
 800460c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	22ff      	movs	r2, #255	@ 0xff
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004616:	f001 feb1 	bl	800637c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800461a:	f001 fe7d 	bl	8006318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004626:	e011      	b.n	800464c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d012      	beq.n	8004656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3310      	adds	r3, #16
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fd37 	bl	80050a8 <xTaskRemoveFromEventList>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004640:	f000 fe10 	bl	8005264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004644:	7bbb      	ldrb	r3, [r7, #14]
 8004646:	3b01      	subs	r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800464c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004650:	2b00      	cmp	r3, #0
 8004652:	dce9      	bgt.n	8004628 <prvUnlockQueue+0x60>
 8004654:	e000      	b.n	8004658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	22ff      	movs	r2, #255	@ 0xff
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004660:	f001 fe8c 	bl	800637c <vPortExitCritical>
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004674:	f001 fe50 	bl	8006318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e001      	b.n	800468a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800468a:	f001 fe77 	bl	800637c <vPortExitCritical>

	return xReturn;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046a0:	f001 fe3a 	bl	8006318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d102      	bne.n	80046b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e001      	b.n	80046ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046ba:	f001 fe5f 	bl	800637c <vPortExitCritical>

	return xReturn;
 80046be:	68fb      	ldr	r3, [r7, #12]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e014      	b.n	8004702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046d8:	4a0f      	ldr	r2, [pc, #60]	@ (8004718 <vQueueAddToRegistry+0x50>)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046e4:	490c      	ldr	r1, [pc, #48]	@ (8004718 <vQueueAddToRegistry+0x50>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004718 <vQueueAddToRegistry+0x50>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4413      	add	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046fa:	e006      	b.n	800470a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3301      	adds	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b07      	cmp	r3, #7
 8004706:	d9e7      	bls.n	80046d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	200009b0 	.word	0x200009b0

0800471c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800472c:	f001 fdf4 	bl	8006318 <vPortEnterCritical>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004736:	b25b      	sxtb	r3, r3
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d103      	bne.n	8004746 <vQueueWaitForMessageRestricted+0x2a>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800474c:	b25b      	sxtb	r3, r3
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d103      	bne.n	800475c <vQueueWaitForMessageRestricted+0x40>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800475c:	f001 fe0e 	bl	800637c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3324      	adds	r3, #36	@ 0x24
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fc6d 	bl	8005050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004776:	6978      	ldr	r0, [r7, #20]
 8004778:	f7ff ff26 	bl	80045c8 <prvUnlockQueue>
	}
 800477c:	bf00      	nop
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08e      	sub	sp, #56	@ 0x38
 8004788:	af04      	add	r7, sp, #16
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	623b      	str	r3, [r7, #32]
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61fb      	str	r3, [r7, #28]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ce:	23a8      	movs	r3, #168	@ 0xa8
 80047d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80047d6:	d00b      	beq.n	80047f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	61bb      	str	r3, [r7, #24]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01e      	beq.n	8004836 <xTaskCreateStatic+0xb2>
 80047f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01b      	beq.n	8004836 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	2202      	movs	r2, #2
 800480c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004810:	2300      	movs	r3, #0
 8004812:	9303      	str	r3, [sp, #12]
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	9302      	str	r3, [sp, #8]
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f851 	bl	80048d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800482e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004830:	f000 f8f6 	bl	8004a20 <prvAddNewTaskToReadyList>
 8004834:	e001      	b.n	800483a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800483a:	697b      	ldr	r3, [r7, #20]
	}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	@ 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08c      	sub	sp, #48	@ 0x30
 8004848:	af04      	add	r7, sp, #16
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fe7f 	bl	800655c <pvPortMalloc>
 800485e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00e      	beq.n	8004884 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004866:	20a8      	movs	r0, #168	@ 0xa8
 8004868:	f001 fe78 	bl	800655c <pvPortMalloc>
 800486c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	631a      	str	r2, [r3, #48]	@ 0x30
 800487a:	e005      	b.n	8004888 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800487c:	6978      	ldr	r0, [r7, #20]
 800487e:	f001 ff3b 	bl	80066f8 <vPortFree>
 8004882:	e001      	b.n	8004888 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d017      	beq.n	80048be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	2300      	movs	r3, #0
 800489a:	9303      	str	r3, [sp, #12]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	9302      	str	r3, [sp, #8]
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f80f 	bl	80048d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048b2:	69f8      	ldr	r0, [r7, #28]
 80048b4:	f000 f8b4 	bl	8004a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048b8:	2301      	movs	r3, #1
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e002      	b.n	80048c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
 80048c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048c4:	69bb      	ldr	r3, [r7, #24]
	}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	461a      	mov	r2, r3
 80048e8:	21a5      	movs	r1, #165	@ 0xa5
 80048ea:	f002 fb92 	bl	8007012 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048f8:	3b01      	subs	r3, #1
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	617b      	str	r3, [r7, #20]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01f      	beq.n	8004970 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e012      	b.n	800495c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	7819      	ldrb	r1, [r3, #0]
 800493e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	3334      	adds	r3, #52	@ 0x34
 8004946:	460a      	mov	r2, r1
 8004948:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d006      	beq.n	8004964 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3301      	adds	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d9e9      	bls.n	8004936 <prvInitialiseNewTask+0x66>
 8004962:	e000      	b.n	8004966 <prvInitialiseNewTask+0x96>
			{
				break;
 8004964:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800496e:	e003      	b.n	8004978 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	2b37      	cmp	r3, #55	@ 0x37
 800497c:	d901      	bls.n	8004982 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800497e:	2337      	movs	r3, #55	@ 0x37
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004986:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800498c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	2200      	movs	r2, #0
 8004992:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004996:	3304      	adds	r3, #4
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff f965 	bl	8003c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	3318      	adds	r3, #24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f960 	bl	8003c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049bc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	3354      	adds	r3, #84	@ 0x54
 80049d2:	224c      	movs	r2, #76	@ 0x4c
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f002 fb1b 	bl	8007012 <memset>
 80049dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049de:	4a0d      	ldr	r2, [pc, #52]	@ (8004a14 <prvInitialiseNewTask+0x144>)
 80049e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004a18 <prvInitialiseNewTask+0x148>)
 80049e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	4a0c      	ldr	r2, [pc, #48]	@ (8004a1c <prvInitialiseNewTask+0x14c>)
 80049ec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	69b8      	ldr	r0, [r7, #24]
 80049f4:	f001 fb62 	bl	80060bc <pxPortInitialiseStack>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a0a:	bf00      	nop
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20004c4c 	.word	0x20004c4c
 8004a18:	20004cb4 	.word	0x20004cb4
 8004a1c:	20004d1c 	.word	0x20004d1c

08004a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a28:	f001 fc76 	bl	8006318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae4 <prvAddNewTaskToReadyList+0xc4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <prvAddNewTaskToReadyList+0xc4>)
 8004a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a36:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae8 <prvAddNewTaskToReadyList+0xc8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae8 <prvAddNewTaskToReadyList+0xc8>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a44:	4b27      	ldr	r3, [pc, #156]	@ (8004ae4 <prvAddNewTaskToReadyList+0xc4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d110      	bne.n	8004a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a4c:	f000 fc2e 	bl	80052ac <prvInitialiseTaskLists>
 8004a50:	e00d      	b.n	8004a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a52:	4b26      	ldr	r3, [pc, #152]	@ (8004aec <prvAddNewTaskToReadyList+0xcc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a5a:	4b23      	ldr	r3, [pc, #140]	@ (8004ae8 <prvAddNewTaskToReadyList+0xc8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d802      	bhi.n	8004a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae8 <prvAddNewTaskToReadyList+0xc8>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a6e:	4b20      	ldr	r3, [pc, #128]	@ (8004af0 <prvAddNewTaskToReadyList+0xd0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <prvAddNewTaskToReadyList+0xd0>)
 8004a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a78:	4b1d      	ldr	r3, [pc, #116]	@ (8004af0 <prvAddNewTaskToReadyList+0xd0>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a84:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <prvAddNewTaskToReadyList+0xd4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d903      	bls.n	8004a94 <prvAddNewTaskToReadyList+0x74>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	4a18      	ldr	r2, [pc, #96]	@ (8004af4 <prvAddNewTaskToReadyList+0xd4>)
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <prvAddNewTaskToReadyList+0xd8>)
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7ff f8e9 	bl	8003c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ab0:	f001 fc64 	bl	800637c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <prvAddNewTaskToReadyList+0xcc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00e      	beq.n	8004ada <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <prvAddNewTaskToReadyList+0xc8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d207      	bcs.n	8004ada <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004aca:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <prvAddNewTaskToReadyList+0xdc>)
 8004acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000ec4 	.word	0x20000ec4
 8004ae8:	200009f0 	.word	0x200009f0
 8004aec:	20000ed0 	.word	0x20000ed0
 8004af0:	20000ee0 	.word	0x20000ee0
 8004af4:	20000ecc 	.word	0x20000ecc
 8004af8:	200009f4 	.word	0x200009f4
 8004afc:	e000ed04 	.word	0xe000ed04

08004b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d018      	beq.n	8004b44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b12:	4b14      	ldr	r3, [pc, #80]	@ (8004b64 <vTaskDelay+0x64>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <vTaskDelay+0x32>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60bb      	str	r3, [r7, #8]
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b32:	f000 f88b 	bl	8004c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b36:	2100      	movs	r1, #0
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 ff11 	bl	8005960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b3e:	f000 f893 	bl	8004c68 <xTaskResumeAll>
 8004b42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b4a:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <vTaskDelay+0x68>)
 8004b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000eec 	.word	0x20000eec
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	@ 0x28
 8004b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b7a:	463a      	mov	r2, r7
 8004b7c:	1d39      	adds	r1, r7, #4
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff f81c 	bl	8003bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	9202      	str	r2, [sp, #8]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	2300      	movs	r3, #0
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	460a      	mov	r2, r1
 8004b9a:	4924      	ldr	r1, [pc, #144]	@ (8004c2c <vTaskStartScheduler+0xc0>)
 8004b9c:	4824      	ldr	r0, [pc, #144]	@ (8004c30 <vTaskStartScheduler+0xc4>)
 8004b9e:	f7ff fdf1 	bl	8004784 <xTaskCreateStatic>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4a23      	ldr	r2, [pc, #140]	@ (8004c34 <vTaskStartScheduler+0xc8>)
 8004ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ba8:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <vTaskStartScheduler+0xc8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e001      	b.n	8004bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d102      	bne.n	8004bc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bc0:	f000 ff22 	bl	8005a08 <xTimerCreateTimerTask>
 8004bc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d11b      	bne.n	8004c04 <vTaskStartScheduler+0x98>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	613b      	str	r3, [r7, #16]
}
 8004bde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004be0:	4b15      	ldr	r3, [pc, #84]	@ (8004c38 <vTaskStartScheduler+0xcc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3354      	adds	r3, #84	@ 0x54
 8004be6:	4a15      	ldr	r2, [pc, #84]	@ (8004c3c <vTaskStartScheduler+0xd0>)
 8004be8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bea:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <vTaskStartScheduler+0xd4>)
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bf2:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <vTaskStartScheduler+0xd8>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bf8:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <vTaskStartScheduler+0xdc>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bfe:	f001 fae7 	bl	80061d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c02:	e00f      	b.n	8004c24 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d10b      	bne.n	8004c24 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60fb      	str	r3, [r7, #12]
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <vTaskStartScheduler+0xb4>
}
 8004c24:	bf00      	nop
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08007d18 	.word	0x08007d18
 8004c30:	0800527d 	.word	0x0800527d
 8004c34:	20000ee8 	.word	0x20000ee8
 8004c38:	200009f0 	.word	0x200009f0
 8004c3c:	20000030 	.word	0x20000030
 8004c40:	20000ee4 	.word	0x20000ee4
 8004c44:	20000ed0 	.word	0x20000ed0
 8004c48:	20000ec8 	.word	0x20000ec8

08004c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c50:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <vTaskSuspendAll+0x18>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4a03      	ldr	r2, [pc, #12]	@ (8004c64 <vTaskSuspendAll+0x18>)
 8004c58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20000eec 	.word	0x20000eec

08004c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c76:	4b42      	ldr	r3, [pc, #264]	@ (8004d80 <xTaskResumeAll+0x118>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <xTaskResumeAll+0x2e>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	603b      	str	r3, [r7, #0]
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	e7fd      	b.n	8004c92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c96:	f001 fb3f 	bl	8006318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c9a:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <xTaskResumeAll+0x118>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	4a37      	ldr	r2, [pc, #220]	@ (8004d80 <xTaskResumeAll+0x118>)
 8004ca2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca4:	4b36      	ldr	r3, [pc, #216]	@ (8004d80 <xTaskResumeAll+0x118>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d162      	bne.n	8004d72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cac:	4b35      	ldr	r3, [pc, #212]	@ (8004d84 <xTaskResumeAll+0x11c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05e      	beq.n	8004d72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cb4:	e02f      	b.n	8004d16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb6:	4b34      	ldr	r3, [pc, #208]	@ (8004d88 <xTaskResumeAll+0x120>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3318      	adds	r3, #24
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff f83a 	bl	8003d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff f835 	bl	8003d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d8c <xTaskResumeAll+0x124>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d903      	bls.n	8004ce6 <xTaskResumeAll+0x7e>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8004d8c <xTaskResumeAll+0x124>)
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4a27      	ldr	r2, [pc, #156]	@ (8004d90 <xTaskResumeAll+0x128>)
 8004cf4:	441a      	add	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7fe ffc0 	bl	8003c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d06:	4b23      	ldr	r3, [pc, #140]	@ (8004d94 <xTaskResumeAll+0x12c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <xTaskResumeAll+0x130>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d16:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <xTaskResumeAll+0x120>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1cb      	bne.n	8004cb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d24:	f000 fb66 	bl	80053f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d28:	4b1c      	ldr	r3, [pc, #112]	@ (8004d9c <xTaskResumeAll+0x134>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d010      	beq.n	8004d56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d34:	f000 f846 	bl	8004dc4 <xTaskIncrementTick>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d3e:	4b16      	ldr	r3, [pc, #88]	@ (8004d98 <xTaskResumeAll+0x130>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f1      	bne.n	8004d34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004d50:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <xTaskResumeAll+0x134>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d56:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <xTaskResumeAll+0x130>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d62:	4b0f      	ldr	r3, [pc, #60]	@ (8004da0 <xTaskResumeAll+0x138>)
 8004d64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d72:	f001 fb03 	bl	800637c <vPortExitCritical>

	return xAlreadyYielded;
 8004d76:	68bb      	ldr	r3, [r7, #8]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000eec 	.word	0x20000eec
 8004d84:	20000ec4 	.word	0x20000ec4
 8004d88:	20000e84 	.word	0x20000e84
 8004d8c:	20000ecc 	.word	0x20000ecc
 8004d90:	200009f4 	.word	0x200009f4
 8004d94:	200009f0 	.word	0x200009f0
 8004d98:	20000ed8 	.word	0x20000ed8
 8004d9c:	20000ed4 	.word	0x20000ed4
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004daa:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <xTaskGetTickCount+0x1c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004db0:	687b      	ldr	r3, [r7, #4]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000ec8 	.word	0x20000ec8

08004dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dce:	4b4f      	ldr	r3, [pc, #316]	@ (8004f0c <xTaskIncrementTick+0x148>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 8090 	bne.w	8004ef8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f10 <xTaskIncrementTick+0x14c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004de0:	4a4b      	ldr	r2, [pc, #300]	@ (8004f10 <xTaskIncrementTick+0x14c>)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d121      	bne.n	8004e30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004dec:	4b49      	ldr	r3, [pc, #292]	@ (8004f14 <xTaskIncrementTick+0x150>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	603b      	str	r3, [r7, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <xTaskIncrementTick+0x46>
 8004e0e:	4b41      	ldr	r3, [pc, #260]	@ (8004f14 <xTaskIncrementTick+0x150>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	4b40      	ldr	r3, [pc, #256]	@ (8004f18 <xTaskIncrementTick+0x154>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3e      	ldr	r2, [pc, #248]	@ (8004f14 <xTaskIncrementTick+0x150>)
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f18 <xTaskIncrementTick+0x154>)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	4b3e      	ldr	r3, [pc, #248]	@ (8004f1c <xTaskIncrementTick+0x158>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	4a3c      	ldr	r2, [pc, #240]	@ (8004f1c <xTaskIncrementTick+0x158>)
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	f000 fae2 	bl	80053f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e30:	4b3b      	ldr	r3, [pc, #236]	@ (8004f20 <xTaskIncrementTick+0x15c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d349      	bcc.n	8004ece <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e3a:	4b36      	ldr	r3, [pc, #216]	@ (8004f14 <xTaskIncrementTick+0x150>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e44:	4b36      	ldr	r3, [pc, #216]	@ (8004f20 <xTaskIncrementTick+0x15c>)
 8004e46:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4a:	601a      	str	r2, [r3, #0]
					break;
 8004e4c:	e03f      	b.n	8004ece <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <xTaskIncrementTick+0x150>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d203      	bcs.n	8004e6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e66:	4a2e      	ldr	r2, [pc, #184]	@ (8004f20 <xTaskIncrementTick+0x15c>)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e6c:	e02f      	b.n	8004ece <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe ff62 	bl	8003d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	3318      	adds	r3, #24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe ff59 	bl	8003d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8e:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <xTaskIncrementTick+0x160>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d903      	bls.n	8004e9e <xTaskIncrementTick+0xda>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4a22      	ldr	r2, [pc, #136]	@ (8004f24 <xTaskIncrementTick+0x160>)
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f28 <xTaskIncrementTick+0x164>)
 8004eac:	441a      	add	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fe fee4 	bl	8003c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8004f2c <xTaskIncrementTick+0x168>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d3b8      	bcc.n	8004e3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ecc:	e7b5      	b.n	8004e3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ece:	4b17      	ldr	r3, [pc, #92]	@ (8004f2c <xTaskIncrementTick+0x168>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed4:	4914      	ldr	r1, [pc, #80]	@ (8004f28 <xTaskIncrementTick+0x164>)
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d901      	bls.n	8004eea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004eea:	4b11      	ldr	r3, [pc, #68]	@ (8004f30 <xTaskIncrementTick+0x16c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e004      	b.n	8004f02 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <xTaskIncrementTick+0x170>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	4a0d      	ldr	r2, [pc, #52]	@ (8004f34 <xTaskIncrementTick+0x170>)
 8004f00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f02:	697b      	ldr	r3, [r7, #20]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000eec 	.word	0x20000eec
 8004f10:	20000ec8 	.word	0x20000ec8
 8004f14:	20000e7c 	.word	0x20000e7c
 8004f18:	20000e80 	.word	0x20000e80
 8004f1c:	20000edc 	.word	0x20000edc
 8004f20:	20000ee4 	.word	0x20000ee4
 8004f24:	20000ecc 	.word	0x20000ecc
 8004f28:	200009f4 	.word	0x200009f4
 8004f2c:	200009f0 	.word	0x200009f0
 8004f30:	20000ed8 	.word	0x20000ed8
 8004f34:	20000ed4 	.word	0x20000ed4

08004f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004fec <vTaskSwitchContext+0xb4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f46:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff0 <vTaskSwitchContext+0xb8>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f4c:	e047      	b.n	8004fde <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004f4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <vTaskSwitchContext+0xb8>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f54:	4b27      	ldr	r3, [pc, #156]	@ (8004ff4 <vTaskSwitchContext+0xbc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e011      	b.n	8004f80 <vTaskSwitchContext+0x48>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <vTaskSwitchContext+0x42>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	607b      	str	r3, [r7, #4]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <vTaskSwitchContext+0x3e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	491d      	ldr	r1, [pc, #116]	@ (8004ff8 <vTaskSwitchContext+0xc0>)
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0e3      	beq.n	8004f5c <vTaskSwitchContext+0x24>
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4a16      	ldr	r2, [pc, #88]	@ (8004ff8 <vTaskSwitchContext+0xc0>)
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d104      	bne.n	8004fc4 <vTaskSwitchContext+0x8c>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4a0c      	ldr	r2, [pc, #48]	@ (8004ffc <vTaskSwitchContext+0xc4>)
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	4a09      	ldr	r2, [pc, #36]	@ (8004ff4 <vTaskSwitchContext+0xbc>)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fd4:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <vTaskSwitchContext+0xc4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3354      	adds	r3, #84	@ 0x54
 8004fda:	4a09      	ldr	r2, [pc, #36]	@ (8005000 <vTaskSwitchContext+0xc8>)
 8004fdc:	6013      	str	r3, [r2, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000eec 	.word	0x20000eec
 8004ff0:	20000ed8 	.word	0x20000ed8
 8004ff4:	20000ecc 	.word	0x20000ecc
 8004ff8:	200009f4 	.word	0x200009f4
 8004ffc:	200009f0 	.word	0x200009f0
 8005000:	20000030 	.word	0x20000030

08005004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	60fb      	str	r3, [r7, #12]
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800502c:	4b07      	ldr	r3, [pc, #28]	@ (800504c <vTaskPlaceOnEventList+0x48>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3318      	adds	r3, #24
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fe fe48 	bl	8003cca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800503a:	2101      	movs	r1, #1
 800503c:	6838      	ldr	r0, [r7, #0]
 800503e:	f000 fc8f 	bl	8005960 <prvAddCurrentTaskToDelayedList>
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200009f0 	.word	0x200009f0

08005050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	617b      	str	r3, [r7, #20]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3318      	adds	r3, #24
 8005080:	4619      	mov	r1, r3
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7fe fdfd 	bl	8003c82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	68b8      	ldr	r0, [r7, #8]
 8005098:	f000 fc62 	bl	8005960 <prvAddCurrentTaskToDelayedList>
	}
 800509c:	bf00      	nop
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	200009f0 	.word	0x200009f0

080050a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10b      	bne.n	80050d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	3318      	adds	r3, #24
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fe2e 	bl	8003d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <xTaskRemoveFromEventList+0xb0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11d      	bne.n	8005124 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fe25 	bl	8003d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	4b19      	ldr	r3, [pc, #100]	@ (800515c <xTaskRemoveFromEventList+0xb4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d903      	bls.n	8005106 <xTaskRemoveFromEventList+0x5e>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	4a16      	ldr	r2, [pc, #88]	@ (800515c <xTaskRemoveFromEventList+0xb4>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4a13      	ldr	r2, [pc, #76]	@ (8005160 <xTaskRemoveFromEventList+0xb8>)
 8005114:	441a      	add	r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fe fdb0 	bl	8003c82 <vListInsertEnd>
 8005122:	e005      	b.n	8005130 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	3318      	adds	r3, #24
 8005128:	4619      	mov	r1, r3
 800512a:	480e      	ldr	r0, [pc, #56]	@ (8005164 <xTaskRemoveFromEventList+0xbc>)
 800512c:	f7fe fda9 	bl	8003c82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <xTaskRemoveFromEventList+0xc0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	429a      	cmp	r2, r3
 800513c:	d905      	bls.n	800514a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800513e:	2301      	movs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <xTaskRemoveFromEventList+0xc4>)
 8005144:	2201      	movs	r2, #1
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e001      	b.n	800514e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800514e:	697b      	ldr	r3, [r7, #20]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000eec 	.word	0x20000eec
 800515c:	20000ecc 	.word	0x20000ecc
 8005160:	200009f4 	.word	0x200009f4
 8005164:	20000e84 	.word	0x20000e84
 8005168:	200009f0 	.word	0x200009f0
 800516c:	20000ed8 	.word	0x20000ed8

08005170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005178:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <vTaskInternalSetTimeOutState+0x24>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <vTaskInternalSetTimeOutState+0x28>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	605a      	str	r2, [r3, #4]
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	20000edc 	.word	0x20000edc
 8005198:	20000ec8 	.word	0x20000ec8

0800519c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	613b      	str	r3, [r7, #16]
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	60fb      	str	r3, [r7, #12]
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	e7fd      	b.n	80051de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80051e2:	f001 f899 	bl	8006318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051e6:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <xTaskCheckForTimeOut+0xc0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d102      	bne.n	8005206 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e023      	b.n	800524e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <xTaskCheckForTimeOut+0xc4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d007      	beq.n	8005222 <xTaskCheckForTimeOut+0x86>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800521c:	2301      	movs	r3, #1
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	e015      	b.n	800524e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	429a      	cmp	r2, r3
 800522a:	d20b      	bcs.n	8005244 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff99 	bl	8005170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	e004      	b.n	800524e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800524a:	2301      	movs	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800524e:	f001 f895 	bl	800637c <vPortExitCritical>

	return xReturn;
 8005252:	69fb      	ldr	r3, [r7, #28]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000ec8 	.word	0x20000ec8
 8005260:	20000edc 	.word	0x20000edc

08005264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005268:	4b03      	ldr	r3, [pc, #12]	@ (8005278 <vTaskMissedYield+0x14>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]
}
 800526e:	bf00      	nop
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20000ed8 	.word	0x20000ed8

0800527c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005284:	f000 f852 	bl	800532c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005288:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <prvIdleTask+0x28>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d9f9      	bls.n	8005284 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005290:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <prvIdleTask+0x2c>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052a0:	e7f0      	b.n	8005284 <prvIdleTask+0x8>
 80052a2:	bf00      	nop
 80052a4:	200009f4 	.word	0x200009f4
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052b2:	2300      	movs	r3, #0
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	e00c      	b.n	80052d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4a12      	ldr	r2, [pc, #72]	@ (800530c <prvInitialiseTaskLists+0x60>)
 80052c4:	4413      	add	r3, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fcae 	bl	8003c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3301      	adds	r3, #1
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b37      	cmp	r3, #55	@ 0x37
 80052d6:	d9ef      	bls.n	80052b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052d8:	480d      	ldr	r0, [pc, #52]	@ (8005310 <prvInitialiseTaskLists+0x64>)
 80052da:	f7fe fca5 	bl	8003c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052de:	480d      	ldr	r0, [pc, #52]	@ (8005314 <prvInitialiseTaskLists+0x68>)
 80052e0:	f7fe fca2 	bl	8003c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052e4:	480c      	ldr	r0, [pc, #48]	@ (8005318 <prvInitialiseTaskLists+0x6c>)
 80052e6:	f7fe fc9f 	bl	8003c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052ea:	480c      	ldr	r0, [pc, #48]	@ (800531c <prvInitialiseTaskLists+0x70>)
 80052ec:	f7fe fc9c 	bl	8003c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052f0:	480b      	ldr	r0, [pc, #44]	@ (8005320 <prvInitialiseTaskLists+0x74>)
 80052f2:	f7fe fc99 	bl	8003c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <prvInitialiseTaskLists+0x78>)
 80052f8:	4a05      	ldr	r2, [pc, #20]	@ (8005310 <prvInitialiseTaskLists+0x64>)
 80052fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <prvInitialiseTaskLists+0x7c>)
 80052fe:	4a05      	ldr	r2, [pc, #20]	@ (8005314 <prvInitialiseTaskLists+0x68>)
 8005300:	601a      	str	r2, [r3, #0]
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	200009f4 	.word	0x200009f4
 8005310:	20000e54 	.word	0x20000e54
 8005314:	20000e68 	.word	0x20000e68
 8005318:	20000e84 	.word	0x20000e84
 800531c:	20000e98 	.word	0x20000e98
 8005320:	20000eb0 	.word	0x20000eb0
 8005324:	20000e7c 	.word	0x20000e7c
 8005328:	20000e80 	.word	0x20000e80

0800532c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005332:	e019      	b.n	8005368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005334:	f000 fff0 	bl	8006318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005338:	4b10      	ldr	r3, [pc, #64]	@ (800537c <prvCheckTasksWaitingTermination+0x50>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fcf9 	bl	8003d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800534a:	4b0d      	ldr	r3, [pc, #52]	@ (8005380 <prvCheckTasksWaitingTermination+0x54>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3b01      	subs	r3, #1
 8005350:	4a0b      	ldr	r2, [pc, #44]	@ (8005380 <prvCheckTasksWaitingTermination+0x54>)
 8005352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005354:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <prvCheckTasksWaitingTermination+0x58>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3b01      	subs	r3, #1
 800535a:	4a0a      	ldr	r2, [pc, #40]	@ (8005384 <prvCheckTasksWaitingTermination+0x58>)
 800535c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800535e:	f001 f80d 	bl	800637c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f810 	bl	8005388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <prvCheckTasksWaitingTermination+0x58>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e1      	bne.n	8005334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000e98 	.word	0x20000e98
 8005380:	20000ec4 	.word	0x20000ec4
 8005384:	20000eac 	.word	0x20000eac

08005388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3354      	adds	r3, #84	@ 0x54
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fe79 	bl	800708c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d108      	bne.n	80053b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 f9a5 	bl	80066f8 <vPortFree>
				vPortFree( pxTCB );
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 f9a2 	bl	80066f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053b4:	e019      	b.n	80053ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d103      	bne.n	80053c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 f999 	bl	80066f8 <vPortFree>
	}
 80053c6:	e010      	b.n	80053ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d00b      	beq.n	80053ea <prvDeleteTCB+0x62>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <prvDeleteTCB+0x5e>
	}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053fa:	4b0c      	ldr	r3, [pc, #48]	@ (800542c <prvResetNextTaskUnblockTime+0x38>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005404:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <prvResetNextTaskUnblockTime+0x3c>)
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
 800540a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800540c:	e008      	b.n	8005420 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540e:	4b07      	ldr	r3, [pc, #28]	@ (800542c <prvResetNextTaskUnblockTime+0x38>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4a04      	ldr	r2, [pc, #16]	@ (8005430 <prvResetNextTaskUnblockTime+0x3c>)
 800541e:	6013      	str	r3, [r2, #0]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000e7c 	.word	0x20000e7c
 8005430:	20000ee4 	.word	0x20000ee4

08005434 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800543a:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <xTaskGetSchedulerState+0x34>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005442:	2301      	movs	r3, #1
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	e008      	b.n	800545a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005448:	4b08      	ldr	r3, [pc, #32]	@ (800546c <xTaskGetSchedulerState+0x38>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005450:	2302      	movs	r3, #2
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	e001      	b.n	800545a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800545a:	687b      	ldr	r3, [r7, #4]
	}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	20000ed0 	.word	0x20000ed0
 800546c:	20000eec 	.word	0x20000eec

08005470 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d058      	beq.n	8005538 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005486:	4b2f      	ldr	r3, [pc, #188]	@ (8005544 <xTaskPriorityDisinherit+0xd4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	429a      	cmp	r2, r3
 800548e:	d00b      	beq.n	80054a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60fb      	str	r3, [r7, #12]
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60bb      	str	r3, [r7, #8]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054cc:	1e5a      	subs	r2, r3, #1
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d02c      	beq.n	8005538 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d128      	bne.n	8005538 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fc26 	bl	8003d3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <xTaskPriorityDisinherit+0xd8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d903      	bls.n	8005518 <xTaskPriorityDisinherit+0xa8>
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	4a0c      	ldr	r2, [pc, #48]	@ (8005548 <xTaskPriorityDisinherit+0xd8>)
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4a09      	ldr	r2, [pc, #36]	@ (800554c <xTaskPriorityDisinherit+0xdc>)
 8005526:	441a      	add	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f7fe fba7 	bl	8003c82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005534:	2301      	movs	r3, #1
 8005536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005538:	697b      	ldr	r3, [r7, #20]
	}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200009f0 	.word	0x200009f0
 8005548:	20000ecc 	.word	0x20000ecc
 800554c:	200009f4 	.word	0x200009f4

08005550 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800555e:	f000 fedb 	bl	8006318 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005562:	4b29      	ldr	r3, [pc, #164]	@ (8005608 <xTaskNotifyWait+0xb8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d01c      	beq.n	80055aa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005570:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <xTaskNotifyWait+0xb8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	43d2      	mvns	r2, r2
 800557c:	400a      	ands	r2, r1
 800557e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005582:	4b21      	ldr	r3, [pc, #132]	@ (8005608 <xTaskNotifyWait+0xb8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005592:	2101      	movs	r1, #1
 8005594:	6838      	ldr	r0, [r7, #0]
 8005596:	f000 f9e3 	bl	8005960 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800559a:	4b1c      	ldr	r3, [pc, #112]	@ (800560c <xTaskNotifyWait+0xbc>)
 800559c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80055aa:	f000 fee7 	bl	800637c <vPortExitCritical>

		taskENTER_CRITICAL();
 80055ae:	f000 feb3 	bl	8006318 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80055b8:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <xTaskNotifyWait+0xb8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80055c4:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <xTaskNotifyWait+0xb8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d002      	beq.n	80055d8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	e00a      	b.n	80055ee <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <xTaskNotifyWait+0xb8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	43d2      	mvns	r2, r2
 80055e4:	400a      	ands	r2, r1
 80055e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055ee:	4b06      	ldr	r3, [pc, #24]	@ (8005608 <xTaskNotifyWait+0xb8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80055f8:	f000 fec0 	bl	800637c <vPortExitCritical>

		return xReturn;
 80055fc:	697b      	ldr	r3, [r7, #20]
	}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	200009f0 	.word	0x200009f0
 800560c:	e000ed04 	.word	0xe000ed04

08005610 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	@ 0x28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <xTaskGenericNotify+0x32>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	61bb      	str	r3, [r7, #24]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005646:	f000 fe67 	bl	8006318 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005660:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d82e      	bhi.n	80056ce <xTaskGenericNotify+0xbe>
 8005670:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <xTaskGenericNotify+0x68>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	080056f3 	.word	0x080056f3
 800567c:	0800568d 	.word	0x0800568d
 8005680:	0800569f 	.word	0x0800569f
 8005684:	080056af 	.word	0x080056af
 8005688:	080056b9 	.word	0x080056b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	431a      	orrs	r2, r3
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800569c:	e02c      	b.n	80056f8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80056ac:	e024      	b.n	80056f8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80056b6:	e01f      	b.n	80056f8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80056b8:	7ffb      	ldrb	r3, [r7, #31]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d004      	beq.n	80056c8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80056c6:	e017      	b.n	80056f8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80056cc:	e014      	b.n	80056f8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d00d      	beq.n	80056f6 <xTaskGenericNotify+0xe6>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	617b      	str	r3, [r7, #20]
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <xTaskGenericNotify+0xde>
					break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <xTaskGenericNotify+0xe8>

					break;
 80056f6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80056f8:	7ffb      	ldrb	r3, [r7, #31]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d13b      	bne.n	8005776 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fb1a 	bl	8003d3c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570c:	4b1d      	ldr	r3, [pc, #116]	@ (8005784 <xTaskGenericNotify+0x174>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <xTaskGenericNotify+0x10c>
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	4a1a      	ldr	r2, [pc, #104]	@ (8005784 <xTaskGenericNotify+0x174>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <xTaskGenericNotify+0x178>)
 800572a:	441a      	add	r2, r3
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fe faa5 	bl	8003c82 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <xTaskGenericNotify+0x148>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	613b      	str	r3, [r7, #16]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <xTaskGenericNotify+0x17c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d907      	bls.n	8005776 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005766:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <xTaskGenericNotify+0x180>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005776:	f000 fe01 	bl	800637c <vPortExitCritical>

		return xReturn;
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800577c:	4618      	mov	r0, r3
 800577e:	3728      	adds	r7, #40	@ 0x28
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000ecc 	.word	0x20000ecc
 8005788:	200009f4 	.word	0x200009f4
 800578c:	200009f0 	.word	0x200009f0
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	@ 0x38
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057c6:	f000 fe87 	bl	80064d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80057ce:	f3ef 8211 	mrs	r2, BASEPRI
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	623a      	str	r2, [r7, #32]
 80057e4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80057e6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	2202      	movs	r2, #2
 8005808:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d82e      	bhi.n	8005870 <xTaskGenericNotifyFromISR+0xdc>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <xTaskGenericNotifyFromISR+0x84>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005895 	.word	0x08005895
 800581c:	0800582d 	.word	0x0800582d
 8005820:	0800583f 	.word	0x0800583f
 8005824:	0800584f 	.word	0x0800584f
 8005828:	08005859 	.word	0x08005859
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	431a      	orrs	r2, r3
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800583c:	e02d      	b.n	800589a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800584c:	e025      	b.n	800589a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005856:	e020      	b.n	800589a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005858:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800585c:	2b02      	cmp	r3, #2
 800585e:	d004      	beq.n	800586a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005868:	e017      	b.n	800589a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800586a:	2300      	movs	r3, #0
 800586c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800586e:	e014      	b.n	800589a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d00d      	beq.n	8005898 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	61bb      	str	r3, [r7, #24]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <xTaskGenericNotifyFromISR+0x106>
					break;
 8005898:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800589a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d147      	bne.n	8005932 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	617b      	str	r3, [r7, #20]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b21      	ldr	r3, [pc, #132]	@ (8005948 <xTaskGenericNotifyFromISR+0x1b4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11d      	bne.n	8005906 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	3304      	adds	r3, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fa34 	bl	8003d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <xTaskGenericNotifyFromISR+0x1b8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d903      	bls.n	80058e8 <xTaskGenericNotifyFromISR+0x154>
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e4:	4a19      	ldr	r2, [pc, #100]	@ (800594c <xTaskGenericNotifyFromISR+0x1b8>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a16      	ldr	r2, [pc, #88]	@ (8005950 <xTaskGenericNotifyFromISR+0x1bc>)
 80058f6:	441a      	add	r2, r3
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fe f9bf 	bl	8003c82 <vListInsertEnd>
 8005904:	e005      	b.n	8005912 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005908:	3318      	adds	r3, #24
 800590a:	4619      	mov	r1, r3
 800590c:	4811      	ldr	r0, [pc, #68]	@ (8005954 <xTaskGenericNotifyFromISR+0x1c0>)
 800590e:	f7fe f9b8 	bl	8003c82 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005916:	4b10      	ldr	r3, [pc, #64]	@ (8005958 <xTaskGenericNotifyFromISR+0x1c4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d908      	bls.n	8005932 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800592c:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <xTaskGenericNotifyFromISR+0x1c8>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005934:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f383 8811 	msr	BASEPRI, r3
}
 800593c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800593e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8005940:	4618      	mov	r0, r3
 8005942:	3738      	adds	r7, #56	@ 0x38
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000eec 	.word	0x20000eec
 800594c:	20000ecc 	.word	0x20000ecc
 8005950:	200009f4 	.word	0x200009f4
 8005954:	20000e84 	.word	0x20000e84
 8005958:	200009f0 	.word	0x200009f0
 800595c:	20000ed8 	.word	0x20000ed8

08005960 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800596a:	4b21      	ldr	r3, [pc, #132]	@ (80059f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005970:	4b20      	ldr	r3, [pc, #128]	@ (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe f9e0 	bl	8003d3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d10a      	bne.n	800599a <prvAddCurrentTaskToDelayedList+0x3a>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800598a:	4b1a      	ldr	r3, [pc, #104]	@ (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4819      	ldr	r0, [pc, #100]	@ (80059f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005994:	f7fe f975 	bl	8003c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005998:	e026      	b.n	80059e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059a2:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d209      	bcs.n	80059c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059b2:	4b12      	ldr	r3, [pc, #72]	@ (80059fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fe f983 	bl	8003cca <vListInsert>
}
 80059c4:	e010      	b.n	80059e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7fe f979 	bl	8003cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d202      	bcs.n	80059e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059e2:	4a08      	ldr	r2, [pc, #32]	@ (8005a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000ec8 	.word	0x20000ec8
 80059f4:	200009f0 	.word	0x200009f0
 80059f8:	20000eb0 	.word	0x20000eb0
 80059fc:	20000e80 	.word	0x20000e80
 8005a00:	20000e7c 	.word	0x20000e7c
 8005a04:	20000ee4 	.word	0x20000ee4

08005a08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	@ 0x28
 8005a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a12:	f000 fb13 	bl	800603c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a16:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <xTimerCreateTimerTask+0x84>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d021      	beq.n	8005a62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a26:	1d3a      	adds	r2, r7, #4
 8005a28:	f107 0108 	add.w	r1, r7, #8
 8005a2c:	f107 030c 	add.w	r3, r7, #12
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe f8df 	bl	8003bf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	9202      	str	r2, [sp, #8]
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	2302      	movs	r3, #2
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	460a      	mov	r2, r1
 8005a48:	4911      	ldr	r1, [pc, #68]	@ (8005a90 <xTimerCreateTimerTask+0x88>)
 8005a4a:	4812      	ldr	r0, [pc, #72]	@ (8005a94 <xTimerCreateTimerTask+0x8c>)
 8005a4c:	f7fe fe9a 	bl	8004784 <xTaskCreateStatic>
 8005a50:	4603      	mov	r3, r0
 8005a52:	4a11      	ldr	r2, [pc, #68]	@ (8005a98 <xTimerCreateTimerTask+0x90>)
 8005a54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a56:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <xTimerCreateTimerTask+0x90>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	613b      	str	r3, [r7, #16]
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	e7fd      	b.n	8005a7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a80:	697b      	ldr	r3, [r7, #20]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000f20 	.word	0x20000f20
 8005a90:	08007d20 	.word	0x08007d20
 8005a94:	08005bd5 	.word	0x08005bd5
 8005a98:	20000f24 	.word	0x20000f24

08005a9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <xTimerGenericCommand+0x30>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	623b      	str	r3, [r7, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <xTimerGenericCommand+0x98>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d02a      	beq.n	8005b2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	dc18      	bgt.n	8005b18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ae6:	f7ff fca5 	bl	8005434 <xTaskGetSchedulerState>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d109      	bne.n	8005b04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005af0:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <xTimerGenericCommand+0x98>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	f107 0110 	add.w	r1, r7, #16
 8005af8:	2300      	movs	r3, #0
 8005afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005afc:	f7fe fa52 	bl	8003fa4 <xQueueGenericSend>
 8005b00:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b02:	e012      	b.n	8005b2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b04:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <xTimerGenericCommand+0x98>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	f107 0110 	add.w	r1, r7, #16
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f7fe fa48 	bl	8003fa4 <xQueueGenericSend>
 8005b14:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b16:	e008      	b.n	8005b2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <xTimerGenericCommand+0x98>)
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	f107 0110 	add.w	r1, r7, #16
 8005b20:	2300      	movs	r3, #0
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	f7fe fb40 	bl	80041a8 <xQueueGenericSendFromISR>
 8005b28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3728      	adds	r7, #40	@ 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000f20 	.word	0x20000f20

08005b38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b42:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <prvProcessExpiredTimer+0x98>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe f8f3 	bl	8003d3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d023      	beq.n	8005bac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	18d1      	adds	r1, r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	f000 f8d5 	bl	8005d20 <prvInsertTimerInActiveList>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d020      	beq.n	8005bbe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	2100      	movs	r1, #0
 8005b86:	6978      	ldr	r0, [r7, #20]
 8005b88:	f7ff ff88 	bl	8005a9c <xTimerGenericCommand>
 8005b8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d114      	bne.n	8005bbe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	4798      	blx	r3
}
 8005bc6:	bf00      	nop
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000f18 	.word	0x20000f18

08005bd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bdc:	f107 0308 	add.w	r3, r7, #8
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 f859 	bl	8005c98 <prvGetNextExpireTime>
 8005be6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4619      	mov	r1, r3
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f805 	bl	8005bfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005bf2:	f000 f8d7 	bl	8005da4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bf6:	bf00      	nop
 8005bf8:	e7f0      	b.n	8005bdc <prvTimerTask+0x8>
	...

08005bfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c06:	f7ff f821 	bl	8004c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f866 	bl	8005ce0 <prvSampleTimeNow>
 8005c14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d130      	bne.n	8005c7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <prvProcessTimerOrBlockTask+0x3c>
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d806      	bhi.n	8005c38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c2a:	f7ff f81d 	bl	8004c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff81 	bl	8005b38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c36:	e024      	b.n	8005c82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c3e:	4b13      	ldr	r3, [pc, #76]	@ (8005c8c <prvProcessTimerOrBlockTask+0x90>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <prvProcessTimerOrBlockTask+0x50>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <prvProcessTimerOrBlockTask+0x52>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c50:	4b0f      	ldr	r3, [pc, #60]	@ (8005c90 <prvProcessTimerOrBlockTask+0x94>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f7fe fd5d 	bl	800471c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c62:	f7ff f801 	bl	8004c68 <xTaskResumeAll>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c6c:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <prvProcessTimerOrBlockTask+0x98>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	f3bf 8f6f 	isb	sy
}
 8005c7c:	e001      	b.n	8005c82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c7e:	f7fe fff3 	bl	8004c68 <xTaskResumeAll>
}
 8005c82:	bf00      	nop
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000f1c 	.word	0x20000f1c
 8005c90:	20000f20 	.word	0x20000f20
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8005cdc <prvGetNextExpireTime+0x44>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <prvGetNextExpireTime+0x16>
 8005caa:	2201      	movs	r2, #1
 8005cac:	e000      	b.n	8005cb0 <prvGetNextExpireTime+0x18>
 8005cae:	2200      	movs	r2, #0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cbc:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <prvGetNextExpireTime+0x44>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e001      	b.n	8005ccc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20000f18 	.word	0x20000f18

08005ce0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ce8:	f7ff f85c 	bl	8004da4 <xTaskGetTickCount>
 8005cec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005cee:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <prvSampleTimeNow+0x3c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d205      	bcs.n	8005d04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cf8:	f000 f93a 	bl	8005f70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e002      	b.n	8005d0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d0a:	4a04      	ldr	r2, [pc, #16]	@ (8005d1c <prvSampleTimeNow+0x3c>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000f28 	.word	0x20000f28

08005d20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d812      	bhi.n	8005d6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d302      	bcc.n	8005d5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e01b      	b.n	8005d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d5a:	4b10      	ldr	r3, [pc, #64]	@ (8005d9c <prvInsertTimerInActiveList+0x7c>)
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f7fd ffb0 	bl	8003cca <vListInsert>
 8005d6a:	e012      	b.n	8005d92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d206      	bcs.n	8005d82 <prvInsertTimerInActiveList+0x62>
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e007      	b.n	8005d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d82:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <prvInsertTimerInActiveList+0x80>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fd ff9c 	bl	8003cca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d92:	697b      	ldr	r3, [r7, #20]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000f1c 	.word	0x20000f1c
 8005da0:	20000f18 	.word	0x20000f18

08005da4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08e      	sub	sp, #56	@ 0x38
 8005da8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005daa:	e0ce      	b.n	8005f4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da19      	bge.n	8005de6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	3304      	adds	r3, #4
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	61fb      	str	r3, [r7, #28]
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	e7fd      	b.n	8005dd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ddc:	6850      	ldr	r0, [r2, #4]
 8005dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de0:	6892      	ldr	r2, [r2, #8]
 8005de2:	4611      	mov	r1, r2
 8005de4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f2c0 80ae 	blt.w	8005f4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fd ff9c 	bl	8003d3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e04:	463b      	mov	r3, r7
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff ff6a 	bl	8005ce0 <prvSampleTimeNow>
 8005e0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b09      	cmp	r3, #9
 8005e12:	f200 8097 	bhi.w	8005f44 <prvProcessReceivedCommands+0x1a0>
 8005e16:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <prvProcessReceivedCommands+0x78>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e45 	.word	0x08005e45
 8005e28:	08005ebb 	.word	0x08005ebb
 8005e2c:	08005ecf 	.word	0x08005ecf
 8005e30:	08005f1b 	.word	0x08005f1b
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e45 	.word	0x08005e45
 8005e3c:	08005ebb 	.word	0x08005ebb
 8005e40:	08005ecf 	.word	0x08005ecf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	18d1      	adds	r1, r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e64:	f7ff ff5c 	bl	8005d20 <prvInsertTimerInActiveList>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d06c      	beq.n	8005f48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d061      	beq.n	8005f48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	441a      	add	r2, r3
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2300      	movs	r3, #0
 8005e92:	2100      	movs	r1, #0
 8005e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e96:	f7ff fe01 	bl	8005a9c <xTimerGenericCommand>
 8005e9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d152      	bne.n	8005f48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	61bb      	str	r3, [r7, #24]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ecc:	e03d      	b.n	8005f4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	617b      	str	r3, [r7, #20]
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	e7fd      	b.n	8005f02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	18d1      	adds	r1, r2, r3
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f14:	f7ff ff04 	bl	8005d20 <prvInsertTimerInActiveList>
					break;
 8005f18:	e017      	b.n	8005f4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f2a:	f000 fbe5 	bl	80066f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f2e:	e00c      	b.n	8005f4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f42:	e002      	b.n	8005f4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005f44:	bf00      	nop
 8005f46:	e000      	b.n	8005f4a <prvProcessReceivedCommands+0x1a6>
					break;
 8005f48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f4a:	4b08      	ldr	r3, [pc, #32]	@ (8005f6c <prvProcessReceivedCommands+0x1c8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	1d39      	adds	r1, r7, #4
 8005f50:	2200      	movs	r2, #0
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe f9c6 	bl	80042e4 <xQueueReceive>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f47f af26 	bne.w	8005dac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	3730      	adds	r7, #48	@ 0x30
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000f20 	.word	0x20000f20

08005f70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f76:	e049      	b.n	800600c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f78:	4b2e      	ldr	r3, [pc, #184]	@ (8006034 <prvSwitchTimerLists+0xc4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f82:	4b2c      	ldr	r3, [pc, #176]	@ (8006034 <prvSwitchTimerLists+0xc4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fd fed3 	bl	8003d3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d02f      	beq.n	800600c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d90e      	bls.n	8005fdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fca:	4b1a      	ldr	r3, [pc, #104]	@ (8006034 <prvSwitchTimerLists+0xc4>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7fd fe78 	bl	8003cca <vListInsert>
 8005fda:	e017      	b.n	800600c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff fd58 	bl	8005a9c <xTimerGenericCommand>
 8005fec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10b      	bne.n	800600c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	603b      	str	r3, [r7, #0]
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	e7fd      	b.n	8006008 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800600c:	4b09      	ldr	r3, [pc, #36]	@ (8006034 <prvSwitchTimerLists+0xc4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1b0      	bne.n	8005f78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006016:	4b07      	ldr	r3, [pc, #28]	@ (8006034 <prvSwitchTimerLists+0xc4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800601c:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <prvSwitchTimerLists+0xc8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a04      	ldr	r2, [pc, #16]	@ (8006034 <prvSwitchTimerLists+0xc4>)
 8006022:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006024:	4a04      	ldr	r2, [pc, #16]	@ (8006038 <prvSwitchTimerLists+0xc8>)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	6013      	str	r3, [r2, #0]
}
 800602a:	bf00      	nop
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000f18 	.word	0x20000f18
 8006038:	20000f1c 	.word	0x20000f1c

0800603c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006042:	f000 f969 	bl	8006318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006046:	4b15      	ldr	r3, [pc, #84]	@ (800609c <prvCheckForValidListAndQueue+0x60>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d120      	bne.n	8006090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800604e:	4814      	ldr	r0, [pc, #80]	@ (80060a0 <prvCheckForValidListAndQueue+0x64>)
 8006050:	f7fd fdea 	bl	8003c28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006054:	4813      	ldr	r0, [pc, #76]	@ (80060a4 <prvCheckForValidListAndQueue+0x68>)
 8006056:	f7fd fde7 	bl	8003c28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800605a:	4b13      	ldr	r3, [pc, #76]	@ (80060a8 <prvCheckForValidListAndQueue+0x6c>)
 800605c:	4a10      	ldr	r2, [pc, #64]	@ (80060a0 <prvCheckForValidListAndQueue+0x64>)
 800605e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006060:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <prvCheckForValidListAndQueue+0x70>)
 8006062:	4a10      	ldr	r2, [pc, #64]	@ (80060a4 <prvCheckForValidListAndQueue+0x68>)
 8006064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006066:	2300      	movs	r3, #0
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <prvCheckForValidListAndQueue+0x74>)
 800606c:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <prvCheckForValidListAndQueue+0x78>)
 800606e:	2110      	movs	r1, #16
 8006070:	200a      	movs	r0, #10
 8006072:	f7fd fef7 	bl	8003e64 <xQueueGenericCreateStatic>
 8006076:	4603      	mov	r3, r0
 8006078:	4a08      	ldr	r2, [pc, #32]	@ (800609c <prvCheckForValidListAndQueue+0x60>)
 800607a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800607c:	4b07      	ldr	r3, [pc, #28]	@ (800609c <prvCheckForValidListAndQueue+0x60>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006084:	4b05      	ldr	r3, [pc, #20]	@ (800609c <prvCheckForValidListAndQueue+0x60>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	490b      	ldr	r1, [pc, #44]	@ (80060b8 <prvCheckForValidListAndQueue+0x7c>)
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fb1c 	bl	80046c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006090:	f000 f974 	bl	800637c <vPortExitCritical>
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000f20 	.word	0x20000f20
 80060a0:	20000ef0 	.word	0x20000ef0
 80060a4:	20000f04 	.word	0x20000f04
 80060a8:	20000f18 	.word	0x20000f18
 80060ac:	20000f1c 	.word	0x20000f1c
 80060b0:	20000fcc 	.word	0x20000fcc
 80060b4:	20000f2c 	.word	0x20000f2c
 80060b8:	08007d28 	.word	0x08007d28

080060bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3b04      	subs	r3, #4
 80060cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3b04      	subs	r3, #4
 80060da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006120 <pxPortInitialiseStack+0x64>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3b14      	subs	r3, #20
 80060f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3b04      	subs	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f06f 0202 	mvn.w	r2, #2
 800610a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3b20      	subs	r3, #32
 8006110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006112:	68fb      	ldr	r3, [r7, #12]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	08006125 	.word	0x08006125

08006124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <prvTaskExitError+0x58>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d00b      	beq.n	8006150 <prvTaskExitError+0x2c>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	60fb      	str	r3, [r7, #12]
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <prvTaskExitError+0x28>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60bb      	str	r3, [r7, #8]
}
 8006162:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006164:	bf00      	nop
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0fc      	beq.n	8006166 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000020 	.word	0x20000020

08006180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <pxCurrentTCBConst2>)
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	6808      	ldr	r0, [r1, #0]
 8006186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	f380 8809 	msr	PSP, r0
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f04f 0000 	mov.w	r0, #0
 8006196:	f380 8811 	msr	BASEPRI, r0
 800619a:	4770      	bx	lr
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst2>:
 80061a0:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061a8:	4808      	ldr	r0, [pc, #32]	@ (80061cc <prvPortStartFirstTask+0x24>)
 80061aa:	6800      	ldr	r0, [r0, #0]
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f380 8808 	msr	MSP, r0
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8814 	msr	CONTROL, r0
 80061ba:	b662      	cpsie	i
 80061bc:	b661      	cpsie	f
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	df00      	svc	0
 80061c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ca:	bf00      	nop
 80061cc:	e000ed08 	.word	0xe000ed08

080061d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061d6:	4b47      	ldr	r3, [pc, #284]	@ (80062f4 <xPortStartScheduler+0x124>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a47      	ldr	r2, [pc, #284]	@ (80062f8 <xPortStartScheduler+0x128>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10b      	bne.n	80061f8 <xPortStartScheduler+0x28>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061f8:	4b3e      	ldr	r3, [pc, #248]	@ (80062f4 <xPortStartScheduler+0x124>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a3f      	ldr	r2, [pc, #252]	@ (80062fc <xPortStartScheduler+0x12c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d10b      	bne.n	800621a <xPortStartScheduler+0x4a>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	60fb      	str	r3, [r7, #12]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800621a:	4b39      	ldr	r3, [pc, #228]	@ (8006300 <xPortStartScheduler+0x130>)
 800621c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	22ff      	movs	r2, #255	@ 0xff
 800622a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4b31      	ldr	r3, [pc, #196]	@ (8006304 <xPortStartScheduler+0x134>)
 8006240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006242:	4b31      	ldr	r3, [pc, #196]	@ (8006308 <xPortStartScheduler+0x138>)
 8006244:	2207      	movs	r2, #7
 8006246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006248:	e009      	b.n	800625e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800624a:	4b2f      	ldr	r3, [pc, #188]	@ (8006308 <xPortStartScheduler+0x138>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3b01      	subs	r3, #1
 8006250:	4a2d      	ldr	r2, [pc, #180]	@ (8006308 <xPortStartScheduler+0x138>)
 8006252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006266:	2b80      	cmp	r3, #128	@ 0x80
 8006268:	d0ef      	beq.n	800624a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800626a:	4b27      	ldr	r3, [pc, #156]	@ (8006308 <xPortStartScheduler+0x138>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f1c3 0307 	rsb	r3, r3, #7
 8006272:	2b04      	cmp	r3, #4
 8006274:	d00b      	beq.n	800628e <xPortStartScheduler+0xbe>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	60bb      	str	r3, [r7, #8]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800628e:	4b1e      	ldr	r3, [pc, #120]	@ (8006308 <xPortStartScheduler+0x138>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	4a1c      	ldr	r2, [pc, #112]	@ (8006308 <xPortStartScheduler+0x138>)
 8006296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <xPortStartScheduler+0x138>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062a0:	4a19      	ldr	r2, [pc, #100]	@ (8006308 <xPortStartScheduler+0x138>)
 80062a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062ac:	4b17      	ldr	r3, [pc, #92]	@ (800630c <xPortStartScheduler+0x13c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a16      	ldr	r2, [pc, #88]	@ (800630c <xPortStartScheduler+0x13c>)
 80062b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062b8:	4b14      	ldr	r3, [pc, #80]	@ (800630c <xPortStartScheduler+0x13c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a13      	ldr	r2, [pc, #76]	@ (800630c <xPortStartScheduler+0x13c>)
 80062be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062c4:	f000 f8da 	bl	800647c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062c8:	4b11      	ldr	r3, [pc, #68]	@ (8006310 <xPortStartScheduler+0x140>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062ce:	f000 f8f9 	bl	80064c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062d2:	4b10      	ldr	r3, [pc, #64]	@ (8006314 <xPortStartScheduler+0x144>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006314 <xPortStartScheduler+0x144>)
 80062d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80062dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062de:	f7ff ff63 	bl	80061a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062e2:	f7fe fe29 	bl	8004f38 <vTaskSwitchContext>
	prvTaskExitError();
 80062e6:	f7ff ff1d 	bl	8006124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	e000ed00 	.word	0xe000ed00
 80062f8:	410fc271 	.word	0x410fc271
 80062fc:	410fc270 	.word	0x410fc270
 8006300:	e000e400 	.word	0xe000e400
 8006304:	2000101c 	.word	0x2000101c
 8006308:	20001020 	.word	0x20001020
 800630c:	e000ed20 	.word	0xe000ed20
 8006310:	20000020 	.word	0x20000020
 8006314:	e000ef34 	.word	0xe000ef34

08006318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006332:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <vPortEnterCritical+0x5c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3301      	adds	r3, #1
 8006338:	4a0e      	ldr	r2, [pc, #56]	@ (8006374 <vPortEnterCritical+0x5c>)
 800633a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800633c:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <vPortEnterCritical+0x5c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d110      	bne.n	8006366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006344:	4b0c      	ldr	r3, [pc, #48]	@ (8006378 <vPortEnterCritical+0x60>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <vPortEnterCritical+0x4e>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	603b      	str	r3, [r7, #0]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <vPortEnterCritical+0x4a>
	}
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000020 	.word	0x20000020
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006382:	4b12      	ldr	r3, [pc, #72]	@ (80063cc <vPortExitCritical+0x50>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <vPortExitCritical+0x26>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	607b      	str	r3, [r7, #4]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063a2:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <vPortExitCritical+0x50>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	4a08      	ldr	r2, [pc, #32]	@ (80063cc <vPortExitCritical+0x50>)
 80063aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063ac:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <vPortExitCritical+0x50>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <vPortExitCritical+0x44>
 80063b4:	2300      	movs	r3, #0
 80063b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f383 8811 	msr	BASEPRI, r3
}
 80063be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20000020 	.word	0x20000020

080063d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063d0:	f3ef 8009 	mrs	r0, PSP
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <pxCurrentTCBConst>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f01e 0f10 	tst.w	lr, #16
 80063e0:	bf08      	it	eq
 80063e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	6010      	str	r0, [r2, #0]
 80063ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063f4:	f380 8811 	msr	BASEPRI, r0
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f7fe fd9a 	bl	8004f38 <vTaskSwitchContext>
 8006404:	f04f 0000 	mov.w	r0, #0
 8006408:	f380 8811 	msr	BASEPRI, r0
 800640c:	bc09      	pop	{r0, r3}
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	6808      	ldr	r0, [r1, #0]
 8006412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006416:	f01e 0f10 	tst.w	lr, #16
 800641a:	bf08      	it	eq
 800641c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006420:	f380 8809 	msr	PSP, r0
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	f3af 8000 	nop.w

08006430 <pxCurrentTCBConst>:
 8006430:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop

08006438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	607b      	str	r3, [r7, #4]
}
 8006450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006452:	f7fe fcb7 	bl	8004dc4 <xTaskIncrementTick>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800645c:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <xPortSysTickHandler+0x40>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f383 8811 	msr	BASEPRI, r3
}
 800646e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006480:	4b0b      	ldr	r3, [pc, #44]	@ (80064b0 <vPortSetupTimerInterrupt+0x34>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006486:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <vPortSetupTimerInterrupt+0x38>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800648c:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <vPortSetupTimerInterrupt+0x3c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0a      	ldr	r2, [pc, #40]	@ (80064bc <vPortSetupTimerInterrupt+0x40>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	4a09      	ldr	r2, [pc, #36]	@ (80064c0 <vPortSetupTimerInterrupt+0x44>)
 800649a:	3b01      	subs	r3, #1
 800649c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800649e:	4b04      	ldr	r3, [pc, #16]	@ (80064b0 <vPortSetupTimerInterrupt+0x34>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	e000e010 	.word	0xe000e010
 80064b4:	e000e018 	.word	0xe000e018
 80064b8:	20000014 	.word	0x20000014
 80064bc:	10624dd3 	.word	0x10624dd3
 80064c0:	e000e014 	.word	0xe000e014

080064c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064d4 <vPortEnableVFP+0x10>
 80064c8:	6801      	ldr	r1, [r0, #0]
 80064ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064ce:	6001      	str	r1, [r0, #0]
 80064d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064d2:	bf00      	nop
 80064d4:	e000ed88 	.word	0xe000ed88

080064d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064de:	f3ef 8305 	mrs	r3, IPSR
 80064e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	d915      	bls.n	8006516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064ea:	4a18      	ldr	r2, [pc, #96]	@ (800654c <vPortValidateInterruptPriority+0x74>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064f4:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <vPortValidateInterruptPriority+0x78>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	7afa      	ldrb	r2, [r7, #11]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d20b      	bcs.n	8006516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006516:	4b0f      	ldr	r3, [pc, #60]	@ (8006554 <vPortValidateInterruptPriority+0x7c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800651e:	4b0e      	ldr	r3, [pc, #56]	@ (8006558 <vPortValidateInterruptPriority+0x80>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d90b      	bls.n	800653e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	603b      	str	r3, [r7, #0]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <vPortValidateInterruptPriority+0x62>
	}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	e000e3f0 	.word	0xe000e3f0
 8006550:	2000101c 	.word	0x2000101c
 8006554:	e000ed0c 	.word	0xe000ed0c
 8006558:	20001020 	.word	0x20001020

0800655c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	@ 0x28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006568:	f7fe fb70 	bl	8004c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800656c:	4b5c      	ldr	r3, [pc, #368]	@ (80066e0 <pvPortMalloc+0x184>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006574:	f000 f924 	bl	80067c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006578:	4b5a      	ldr	r3, [pc, #360]	@ (80066e4 <pvPortMalloc+0x188>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4013      	ands	r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 8095 	bne.w	80066b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01e      	beq.n	80065ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800658c:	2208      	movs	r2, #8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b00      	cmp	r3, #0
 800659c:	d015      	beq.n	80065ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f023 0307 	bic.w	r3, r3, #7
 80065a4:	3308      	adds	r3, #8
 80065a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <pvPortMalloc+0x6e>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	617b      	str	r3, [r7, #20]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d06f      	beq.n	80066b0 <pvPortMalloc+0x154>
 80065d0:	4b45      	ldr	r3, [pc, #276]	@ (80066e8 <pvPortMalloc+0x18c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d86a      	bhi.n	80066b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065da:	4b44      	ldr	r3, [pc, #272]	@ (80066ec <pvPortMalloc+0x190>)
 80065dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065de:	4b43      	ldr	r3, [pc, #268]	@ (80066ec <pvPortMalloc+0x190>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065e4:	e004      	b.n	80065f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d903      	bls.n	8006602 <pvPortMalloc+0xa6>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f1      	bne.n	80065e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006602:	4b37      	ldr	r3, [pc, #220]	@ (80066e0 <pvPortMalloc+0x184>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006608:	429a      	cmp	r2, r3
 800660a:	d051      	beq.n	80066b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2208      	movs	r2, #8
 8006612:	4413      	add	r3, r2
 8006614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	1ad2      	subs	r2, r2, r3
 8006626:	2308      	movs	r3, #8
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	429a      	cmp	r2, r3
 800662c:	d920      	bls.n	8006670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800662e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <pvPortMalloc+0xfc>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	613b      	str	r3, [r7, #16]
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	e7fd      	b.n	8006654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800666a:	69b8      	ldr	r0, [r7, #24]
 800666c:	f000 f90a 	bl	8006884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006670:	4b1d      	ldr	r3, [pc, #116]	@ (80066e8 <pvPortMalloc+0x18c>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	4a1b      	ldr	r2, [pc, #108]	@ (80066e8 <pvPortMalloc+0x18c>)
 800667c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800667e:	4b1a      	ldr	r3, [pc, #104]	@ (80066e8 <pvPortMalloc+0x18c>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <pvPortMalloc+0x194>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d203      	bcs.n	8006692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800668a:	4b17      	ldr	r3, [pc, #92]	@ (80066e8 <pvPortMalloc+0x18c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a18      	ldr	r2, [pc, #96]	@ (80066f0 <pvPortMalloc+0x194>)
 8006690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	4b13      	ldr	r3, [pc, #76]	@ (80066e4 <pvPortMalloc+0x188>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	431a      	orrs	r2, r3
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066a6:	4b13      	ldr	r3, [pc, #76]	@ (80066f4 <pvPortMalloc+0x198>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	4a11      	ldr	r2, [pc, #68]	@ (80066f4 <pvPortMalloc+0x198>)
 80066ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066b0:	f7fe fada 	bl	8004c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <pvPortMalloc+0x17a>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	60fb      	str	r3, [r7, #12]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <pvPortMalloc+0x176>
	return pvReturn;
 80066d6:	69fb      	ldr	r3, [r7, #28]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3728      	adds	r7, #40	@ 0x28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20004c2c 	.word	0x20004c2c
 80066e4:	20004c40 	.word	0x20004c40
 80066e8:	20004c30 	.word	0x20004c30
 80066ec:	20004c24 	.word	0x20004c24
 80066f0:	20004c34 	.word	0x20004c34
 80066f4:	20004c38 	.word	0x20004c38

080066f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d04f      	beq.n	80067aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800670a:	2308      	movs	r3, #8
 800670c:	425b      	negs	r3, r3
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	4b25      	ldr	r3, [pc, #148]	@ (80067b4 <vPortFree+0xbc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4013      	ands	r3, r2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <vPortFree+0x46>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60fb      	str	r3, [r7, #12]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <vPortFree+0x66>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60bb      	str	r3, [r7, #8]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <vPortFree+0xbc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01e      	beq.n	80067aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11a      	bne.n	80067aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <vPortFree+0xbc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006784:	f7fe fa62 	bl	8004c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <vPortFree+0xc0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4413      	add	r3, r2
 8006792:	4a09      	ldr	r2, [pc, #36]	@ (80067b8 <vPortFree+0xc0>)
 8006794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006796:	6938      	ldr	r0, [r7, #16]
 8006798:	f000 f874 	bl	8006884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800679c:	4b07      	ldr	r3, [pc, #28]	@ (80067bc <vPortFree+0xc4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	4a06      	ldr	r2, [pc, #24]	@ (80067bc <vPortFree+0xc4>)
 80067a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067a6:	f7fe fa5f 	bl	8004c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067aa:	bf00      	nop
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20004c40 	.word	0x20004c40
 80067b8:	20004c30 	.word	0x20004c30
 80067bc:	20004c3c 	.word	0x20004c3c

080067c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80067ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067cc:	4b27      	ldr	r3, [pc, #156]	@ (800686c <prvHeapInit+0xac>)
 80067ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3307      	adds	r3, #7
 80067de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0307 	bic.w	r3, r3, #7
 80067e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	4a1f      	ldr	r2, [pc, #124]	@ (800686c <prvHeapInit+0xac>)
 80067f0:	4413      	add	r3, r2
 80067f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <prvHeapInit+0xb0>)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <prvHeapInit+0xb0>)
 8006800:	2200      	movs	r2, #0
 8006802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4413      	add	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800680c:	2208      	movs	r2, #8
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0307 	bic.w	r3, r3, #7
 800681a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4a15      	ldr	r2, [pc, #84]	@ (8006874 <prvHeapInit+0xb4>)
 8006820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006822:	4b14      	ldr	r3, [pc, #80]	@ (8006874 <prvHeapInit+0xb4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2200      	movs	r2, #0
 8006828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800682a:	4b12      	ldr	r3, [pc, #72]	@ (8006874 <prvHeapInit+0xb4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	1ad2      	subs	r2, r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006840:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <prvHeapInit+0xb4>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4a0a      	ldr	r2, [pc, #40]	@ (8006878 <prvHeapInit+0xb8>)
 800684e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	4a09      	ldr	r2, [pc, #36]	@ (800687c <prvHeapInit+0xbc>)
 8006856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006858:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <prvHeapInit+0xc0>)
 800685a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800685e:	601a      	str	r2, [r3, #0]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20001024 	.word	0x20001024
 8006870:	20004c24 	.word	0x20004c24
 8006874:	20004c2c 	.word	0x20004c2c
 8006878:	20004c34 	.word	0x20004c34
 800687c:	20004c30 	.word	0x20004c30
 8006880:	20004c40 	.word	0x20004c40

08006884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800688c:	4b28      	ldr	r3, [pc, #160]	@ (8006930 <prvInsertBlockIntoFreeList+0xac>)
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e002      	b.n	8006898 <prvInsertBlockIntoFreeList+0x14>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d8f7      	bhi.n	8006892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	4413      	add	r3, r2
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d108      	bne.n	80068c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d118      	bne.n	800690c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b15      	ldr	r3, [pc, #84]	@ (8006934 <prvInsertBlockIntoFreeList+0xb0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d00d      	beq.n	8006902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e008      	b.n	8006914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006902:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <prvInsertBlockIntoFreeList+0xb0>)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	e003      	b.n	8006914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	429a      	cmp	r2, r3
 800691a:	d002      	beq.n	8006922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20004c24 	.word	0x20004c24
 8006934:	20004c2c 	.word	0x20004c2c

08006938 <__itoa>:
 8006938:	1e93      	subs	r3, r2, #2
 800693a:	2b22      	cmp	r3, #34	@ 0x22
 800693c:	b510      	push	{r4, lr}
 800693e:	460c      	mov	r4, r1
 8006940:	d904      	bls.n	800694c <__itoa+0x14>
 8006942:	2300      	movs	r3, #0
 8006944:	700b      	strb	r3, [r1, #0]
 8006946:	461c      	mov	r4, r3
 8006948:	4620      	mov	r0, r4
 800694a:	bd10      	pop	{r4, pc}
 800694c:	2a0a      	cmp	r2, #10
 800694e:	d109      	bne.n	8006964 <__itoa+0x2c>
 8006950:	2800      	cmp	r0, #0
 8006952:	da07      	bge.n	8006964 <__itoa+0x2c>
 8006954:	232d      	movs	r3, #45	@ 0x2d
 8006956:	700b      	strb	r3, [r1, #0]
 8006958:	4240      	negs	r0, r0
 800695a:	2101      	movs	r1, #1
 800695c:	4421      	add	r1, r4
 800695e:	f000 f93f 	bl	8006be0 <__utoa>
 8006962:	e7f1      	b.n	8006948 <__itoa+0x10>
 8006964:	2100      	movs	r1, #0
 8006966:	e7f9      	b.n	800695c <__itoa+0x24>

08006968 <itoa>:
 8006968:	f7ff bfe6 	b.w	8006938 <__itoa>

0800696c <malloc>:
 800696c:	4b02      	ldr	r3, [pc, #8]	@ (8006978 <malloc+0xc>)
 800696e:	4601      	mov	r1, r0
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	f000 b825 	b.w	80069c0 <_malloc_r>
 8006976:	bf00      	nop
 8006978:	20000030 	.word	0x20000030

0800697c <sbrk_aligned>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4e0f      	ldr	r6, [pc, #60]	@ (80069bc <sbrk_aligned+0x40>)
 8006980:	460c      	mov	r4, r1
 8006982:	6831      	ldr	r1, [r6, #0]
 8006984:	4605      	mov	r5, r0
 8006986:	b911      	cbnz	r1, 800698e <sbrk_aligned+0x12>
 8006988:	f000 fbfa 	bl	8007180 <_sbrk_r>
 800698c:	6030      	str	r0, [r6, #0]
 800698e:	4621      	mov	r1, r4
 8006990:	4628      	mov	r0, r5
 8006992:	f000 fbf5 	bl	8007180 <_sbrk_r>
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d103      	bne.n	80069a2 <sbrk_aligned+0x26>
 800699a:	f04f 34ff 	mov.w	r4, #4294967295
 800699e:	4620      	mov	r0, r4
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	1cc4      	adds	r4, r0, #3
 80069a4:	f024 0403 	bic.w	r4, r4, #3
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d0f8      	beq.n	800699e <sbrk_aligned+0x22>
 80069ac:	1a21      	subs	r1, r4, r0
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 fbe6 	bl	8007180 <_sbrk_r>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d1f2      	bne.n	800699e <sbrk_aligned+0x22>
 80069b8:	e7ef      	b.n	800699a <sbrk_aligned+0x1e>
 80069ba:	bf00      	nop
 80069bc:	20004c44 	.word	0x20004c44

080069c0 <_malloc_r>:
 80069c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c4:	1ccd      	adds	r5, r1, #3
 80069c6:	f025 0503 	bic.w	r5, r5, #3
 80069ca:	3508      	adds	r5, #8
 80069cc:	2d0c      	cmp	r5, #12
 80069ce:	bf38      	it	cc
 80069d0:	250c      	movcc	r5, #12
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	4606      	mov	r6, r0
 80069d6:	db01      	blt.n	80069dc <_malloc_r+0x1c>
 80069d8:	42a9      	cmp	r1, r5
 80069da:	d904      	bls.n	80069e6 <_malloc_r+0x26>
 80069dc:	230c      	movs	r3, #12
 80069de:	6033      	str	r3, [r6, #0]
 80069e0:	2000      	movs	r0, #0
 80069e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006abc <_malloc_r+0xfc>
 80069ea:	f000 f869 	bl	8006ac0 <__malloc_lock>
 80069ee:	f8d8 3000 	ldr.w	r3, [r8]
 80069f2:	461c      	mov	r4, r3
 80069f4:	bb44      	cbnz	r4, 8006a48 <_malloc_r+0x88>
 80069f6:	4629      	mov	r1, r5
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7ff ffbf 	bl	800697c <sbrk_aligned>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	4604      	mov	r4, r0
 8006a02:	d158      	bne.n	8006ab6 <_malloc_r+0xf6>
 8006a04:	f8d8 4000 	ldr.w	r4, [r8]
 8006a08:	4627      	mov	r7, r4
 8006a0a:	2f00      	cmp	r7, #0
 8006a0c:	d143      	bne.n	8006a96 <_malloc_r+0xd6>
 8006a0e:	2c00      	cmp	r4, #0
 8006a10:	d04b      	beq.n	8006aaa <_malloc_r+0xea>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	4639      	mov	r1, r7
 8006a16:	4630      	mov	r0, r6
 8006a18:	eb04 0903 	add.w	r9, r4, r3
 8006a1c:	f000 fbb0 	bl	8007180 <_sbrk_r>
 8006a20:	4581      	cmp	r9, r0
 8006a22:	d142      	bne.n	8006aaa <_malloc_r+0xea>
 8006a24:	6821      	ldr	r1, [r4, #0]
 8006a26:	1a6d      	subs	r5, r5, r1
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff ffa6 	bl	800697c <sbrk_aligned>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d03a      	beq.n	8006aaa <_malloc_r+0xea>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	442b      	add	r3, r5
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	bb62      	cbnz	r2, 8006a9c <_malloc_r+0xdc>
 8006a42:	f8c8 7000 	str.w	r7, [r8]
 8006a46:	e00f      	b.n	8006a68 <_malloc_r+0xa8>
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	1b52      	subs	r2, r2, r5
 8006a4c:	d420      	bmi.n	8006a90 <_malloc_r+0xd0>
 8006a4e:	2a0b      	cmp	r2, #11
 8006a50:	d917      	bls.n	8006a82 <_malloc_r+0xc2>
 8006a52:	1961      	adds	r1, r4, r5
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	6025      	str	r5, [r4, #0]
 8006a58:	bf18      	it	ne
 8006a5a:	6059      	strne	r1, [r3, #4]
 8006a5c:	6863      	ldr	r3, [r4, #4]
 8006a5e:	bf08      	it	eq
 8006a60:	f8c8 1000 	streq.w	r1, [r8]
 8006a64:	5162      	str	r2, [r4, r5]
 8006a66:	604b      	str	r3, [r1, #4]
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f000 f82f 	bl	8006acc <__malloc_unlock>
 8006a6e:	f104 000b 	add.w	r0, r4, #11
 8006a72:	1d23      	adds	r3, r4, #4
 8006a74:	f020 0007 	bic.w	r0, r0, #7
 8006a78:	1ac2      	subs	r2, r0, r3
 8006a7a:	bf1c      	itt	ne
 8006a7c:	1a1b      	subne	r3, r3, r0
 8006a7e:	50a3      	strne	r3, [r4, r2]
 8006a80:	e7af      	b.n	80069e2 <_malloc_r+0x22>
 8006a82:	6862      	ldr	r2, [r4, #4]
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	bf0c      	ite	eq
 8006a88:	f8c8 2000 	streq.w	r2, [r8]
 8006a8c:	605a      	strne	r2, [r3, #4]
 8006a8e:	e7eb      	b.n	8006a68 <_malloc_r+0xa8>
 8006a90:	4623      	mov	r3, r4
 8006a92:	6864      	ldr	r4, [r4, #4]
 8006a94:	e7ae      	b.n	80069f4 <_malloc_r+0x34>
 8006a96:	463c      	mov	r4, r7
 8006a98:	687f      	ldr	r7, [r7, #4]
 8006a9a:	e7b6      	b.n	8006a0a <_malloc_r+0x4a>
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d1fb      	bne.n	8006a9c <_malloc_r+0xdc>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6053      	str	r3, [r2, #4]
 8006aa8:	e7de      	b.n	8006a68 <_malloc_r+0xa8>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f000 f80c 	bl	8006acc <__malloc_unlock>
 8006ab4:	e794      	b.n	80069e0 <_malloc_r+0x20>
 8006ab6:	6005      	str	r5, [r0, #0]
 8006ab8:	e7d6      	b.n	8006a68 <_malloc_r+0xa8>
 8006aba:	bf00      	nop
 8006abc:	20004c48 	.word	0x20004c48

08006ac0 <__malloc_lock>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__malloc_lock+0x8>)
 8006ac2:	f7fa bd47 	b.w	8001554 <__retarget_lock_acquire_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	2000024c 	.word	0x2000024c

08006acc <__malloc_unlock>:
 8006acc:	4801      	ldr	r0, [pc, #4]	@ (8006ad4 <__malloc_unlock+0x8>)
 8006ace:	f7fa bd56 	b.w	800157e <__retarget_lock_release_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	2000024c 	.word	0x2000024c

08006ad8 <_strtol_l.constprop.0>:
 8006ad8:	2b24      	cmp	r3, #36	@ 0x24
 8006ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ade:	4686      	mov	lr, r0
 8006ae0:	4690      	mov	r8, r2
 8006ae2:	d801      	bhi.n	8006ae8 <_strtol_l.constprop.0+0x10>
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d106      	bne.n	8006af6 <_strtol_l.constprop.0+0x1e>
 8006ae8:	f000 fb6c 	bl	80071c4 <__errno>
 8006aec:	2316      	movs	r3, #22
 8006aee:	6003      	str	r3, [r0, #0]
 8006af0:	2000      	movs	r0, #0
 8006af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af6:	4834      	ldr	r0, [pc, #208]	@ (8006bc8 <_strtol_l.constprop.0+0xf0>)
 8006af8:	460d      	mov	r5, r1
 8006afa:	462a      	mov	r2, r5
 8006afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b00:	5d06      	ldrb	r6, [r0, r4]
 8006b02:	f016 0608 	ands.w	r6, r6, #8
 8006b06:	d1f8      	bne.n	8006afa <_strtol_l.constprop.0+0x22>
 8006b08:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b0a:	d12d      	bne.n	8006b68 <_strtol_l.constprop.0+0x90>
 8006b0c:	782c      	ldrb	r4, [r5, #0]
 8006b0e:	2601      	movs	r6, #1
 8006b10:	1c95      	adds	r5, r2, #2
 8006b12:	f033 0210 	bics.w	r2, r3, #16
 8006b16:	d109      	bne.n	8006b2c <_strtol_l.constprop.0+0x54>
 8006b18:	2c30      	cmp	r4, #48	@ 0x30
 8006b1a:	d12a      	bne.n	8006b72 <_strtol_l.constprop.0+0x9a>
 8006b1c:	782a      	ldrb	r2, [r5, #0]
 8006b1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b22:	2a58      	cmp	r2, #88	@ 0x58
 8006b24:	d125      	bne.n	8006b72 <_strtol_l.constprop.0+0x9a>
 8006b26:	786c      	ldrb	r4, [r5, #1]
 8006b28:	2310      	movs	r3, #16
 8006b2a:	3502      	adds	r5, #2
 8006b2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b34:	2200      	movs	r2, #0
 8006b36:	fbbc f9f3 	udiv	r9, ip, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b44:	2f09      	cmp	r7, #9
 8006b46:	d81b      	bhi.n	8006b80 <_strtol_l.constprop.0+0xa8>
 8006b48:	463c      	mov	r4, r7
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	dd27      	ble.n	8006b9e <_strtol_l.constprop.0+0xc6>
 8006b4e:	1c57      	adds	r7, r2, #1
 8006b50:	d007      	beq.n	8006b62 <_strtol_l.constprop.0+0x8a>
 8006b52:	4581      	cmp	r9, r0
 8006b54:	d320      	bcc.n	8006b98 <_strtol_l.constprop.0+0xc0>
 8006b56:	d101      	bne.n	8006b5c <_strtol_l.constprop.0+0x84>
 8006b58:	45a2      	cmp	sl, r4
 8006b5a:	db1d      	blt.n	8006b98 <_strtol_l.constprop.0+0xc0>
 8006b5c:	fb00 4003 	mla	r0, r0, r3, r4
 8006b60:	2201      	movs	r2, #1
 8006b62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b66:	e7eb      	b.n	8006b40 <_strtol_l.constprop.0+0x68>
 8006b68:	2c2b      	cmp	r4, #43	@ 0x2b
 8006b6a:	bf04      	itt	eq
 8006b6c:	782c      	ldrbeq	r4, [r5, #0]
 8006b6e:	1c95      	addeq	r5, r2, #2
 8006b70:	e7cf      	b.n	8006b12 <_strtol_l.constprop.0+0x3a>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1da      	bne.n	8006b2c <_strtol_l.constprop.0+0x54>
 8006b76:	2c30      	cmp	r4, #48	@ 0x30
 8006b78:	bf0c      	ite	eq
 8006b7a:	2308      	moveq	r3, #8
 8006b7c:	230a      	movne	r3, #10
 8006b7e:	e7d5      	b.n	8006b2c <_strtol_l.constprop.0+0x54>
 8006b80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006b84:	2f19      	cmp	r7, #25
 8006b86:	d801      	bhi.n	8006b8c <_strtol_l.constprop.0+0xb4>
 8006b88:	3c37      	subs	r4, #55	@ 0x37
 8006b8a:	e7de      	b.n	8006b4a <_strtol_l.constprop.0+0x72>
 8006b8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006b90:	2f19      	cmp	r7, #25
 8006b92:	d804      	bhi.n	8006b9e <_strtol_l.constprop.0+0xc6>
 8006b94:	3c57      	subs	r4, #87	@ 0x57
 8006b96:	e7d8      	b.n	8006b4a <_strtol_l.constprop.0+0x72>
 8006b98:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9c:	e7e1      	b.n	8006b62 <_strtol_l.constprop.0+0x8a>
 8006b9e:	1c53      	adds	r3, r2, #1
 8006ba0:	d108      	bne.n	8006bb4 <_strtol_l.constprop.0+0xdc>
 8006ba2:	2322      	movs	r3, #34	@ 0x22
 8006ba4:	f8ce 3000 	str.w	r3, [lr]
 8006ba8:	4660      	mov	r0, ip
 8006baa:	f1b8 0f00 	cmp.w	r8, #0
 8006bae:	d0a0      	beq.n	8006af2 <_strtol_l.constprop.0+0x1a>
 8006bb0:	1e69      	subs	r1, r5, #1
 8006bb2:	e006      	b.n	8006bc2 <_strtol_l.constprop.0+0xea>
 8006bb4:	b106      	cbz	r6, 8006bb8 <_strtol_l.constprop.0+0xe0>
 8006bb6:	4240      	negs	r0, r0
 8006bb8:	f1b8 0f00 	cmp.w	r8, #0
 8006bbc:	d099      	beq.n	8006af2 <_strtol_l.constprop.0+0x1a>
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	d1f6      	bne.n	8006bb0 <_strtol_l.constprop.0+0xd8>
 8006bc2:	f8c8 1000 	str.w	r1, [r8]
 8006bc6:	e794      	b.n	8006af2 <_strtol_l.constprop.0+0x1a>
 8006bc8:	08007e5a 	.word	0x08007e5a

08006bcc <strtol>:
 8006bcc:	4613      	mov	r3, r2
 8006bce:	460a      	mov	r2, r1
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	4802      	ldr	r0, [pc, #8]	@ (8006bdc <strtol+0x10>)
 8006bd4:	6800      	ldr	r0, [r0, #0]
 8006bd6:	f7ff bf7f 	b.w	8006ad8 <_strtol_l.constprop.0>
 8006bda:	bf00      	nop
 8006bdc:	20000030 	.word	0x20000030

08006be0 <__utoa>:
 8006be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be2:	4c1f      	ldr	r4, [pc, #124]	@ (8006c60 <__utoa+0x80>)
 8006be4:	b08b      	sub	sp, #44	@ 0x2c
 8006be6:	4605      	mov	r5, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	466e      	mov	r6, sp
 8006bec:	f104 0c20 	add.w	ip, r4, #32
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	6861      	ldr	r1, [r4, #4]
 8006bf4:	4637      	mov	r7, r6
 8006bf6:	c703      	stmia	r7!, {r0, r1}
 8006bf8:	3408      	adds	r4, #8
 8006bfa:	4564      	cmp	r4, ip
 8006bfc:	463e      	mov	r6, r7
 8006bfe:	d1f7      	bne.n	8006bf0 <__utoa+0x10>
 8006c00:	7921      	ldrb	r1, [r4, #4]
 8006c02:	7139      	strb	r1, [r7, #4]
 8006c04:	1e91      	subs	r1, r2, #2
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	6038      	str	r0, [r7, #0]
 8006c0a:	2922      	cmp	r1, #34	@ 0x22
 8006c0c:	f04f 0100 	mov.w	r1, #0
 8006c10:	d904      	bls.n	8006c1c <__utoa+0x3c>
 8006c12:	7019      	strb	r1, [r3, #0]
 8006c14:	460b      	mov	r3, r1
 8006c16:	4618      	mov	r0, r3
 8006c18:	b00b      	add	sp, #44	@ 0x2c
 8006c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1c:	1e58      	subs	r0, r3, #1
 8006c1e:	4684      	mov	ip, r0
 8006c20:	fbb5 f7f2 	udiv	r7, r5, r2
 8006c24:	fb02 5617 	mls	r6, r2, r7, r5
 8006c28:	3628      	adds	r6, #40	@ 0x28
 8006c2a:	446e      	add	r6, sp
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006c32:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006c36:	462e      	mov	r6, r5
 8006c38:	42b2      	cmp	r2, r6
 8006c3a:	f101 0101 	add.w	r1, r1, #1
 8006c3e:	463d      	mov	r5, r7
 8006c40:	d9ee      	bls.n	8006c20 <__utoa+0x40>
 8006c42:	2200      	movs	r2, #0
 8006c44:	545a      	strb	r2, [r3, r1]
 8006c46:	1919      	adds	r1, r3, r4
 8006c48:	1aa5      	subs	r5, r4, r2
 8006c4a:	42aa      	cmp	r2, r5
 8006c4c:	dae3      	bge.n	8006c16 <__utoa+0x36>
 8006c4e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006c52:	780e      	ldrb	r6, [r1, #0]
 8006c54:	7006      	strb	r6, [r0, #0]
 8006c56:	3201      	adds	r2, #1
 8006c58:	f801 5901 	strb.w	r5, [r1], #-1
 8006c5c:	e7f4      	b.n	8006c48 <__utoa+0x68>
 8006c5e:	bf00      	nop
 8006c60:	08007e34 	.word	0x08007e34

08006c64 <__sflush_r>:
 8006c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	0716      	lsls	r6, r2, #28
 8006c6e:	4605      	mov	r5, r0
 8006c70:	460c      	mov	r4, r1
 8006c72:	d454      	bmi.n	8006d1e <__sflush_r+0xba>
 8006c74:	684b      	ldr	r3, [r1, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dc02      	bgt.n	8006c80 <__sflush_r+0x1c>
 8006c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd48      	ble.n	8006d12 <__sflush_r+0xae>
 8006c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	d045      	beq.n	8006d12 <__sflush_r+0xae>
 8006c86:	2300      	movs	r3, #0
 8006c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c8c:	682f      	ldr	r7, [r5, #0]
 8006c8e:	6a21      	ldr	r1, [r4, #32]
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	d030      	beq.n	8006cf6 <__sflush_r+0x92>
 8006c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	0759      	lsls	r1, r3, #29
 8006c9a:	d505      	bpl.n	8006ca8 <__sflush_r+0x44>
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ca2:	b10b      	cbz	r3, 8006ca8 <__sflush_r+0x44>
 8006ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cac:	6a21      	ldr	r1, [r4, #32]
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b0      	blx	r6
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	d106      	bne.n	8006cc6 <__sflush_r+0x62>
 8006cb8:	6829      	ldr	r1, [r5, #0]
 8006cba:	291d      	cmp	r1, #29
 8006cbc:	d82b      	bhi.n	8006d16 <__sflush_r+0xb2>
 8006cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006d68 <__sflush_r+0x104>)
 8006cc0:	410a      	asrs	r2, r1
 8006cc2:	07d6      	lsls	r6, r2, #31
 8006cc4:	d427      	bmi.n	8006d16 <__sflush_r+0xb2>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	6062      	str	r2, [r4, #4]
 8006cca:	04d9      	lsls	r1, r3, #19
 8006ccc:	6922      	ldr	r2, [r4, #16]
 8006cce:	6022      	str	r2, [r4, #0]
 8006cd0:	d504      	bpl.n	8006cdc <__sflush_r+0x78>
 8006cd2:	1c42      	adds	r2, r0, #1
 8006cd4:	d101      	bne.n	8006cda <__sflush_r+0x76>
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	b903      	cbnz	r3, 8006cdc <__sflush_r+0x78>
 8006cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cde:	602f      	str	r7, [r5, #0]
 8006ce0:	b1b9      	cbz	r1, 8006d12 <__sflush_r+0xae>
 8006ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	d002      	beq.n	8006cf0 <__sflush_r+0x8c>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 faaa 	bl	8007244 <_free_r>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cf4:	e00d      	b.n	8006d12 <__sflush_r+0xae>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b0      	blx	r6
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	1c50      	adds	r0, r2, #1
 8006d00:	d1c9      	bne.n	8006c96 <__sflush_r+0x32>
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0c6      	beq.n	8006c96 <__sflush_r+0x32>
 8006d08:	2b1d      	cmp	r3, #29
 8006d0a:	d001      	beq.n	8006d10 <__sflush_r+0xac>
 8006d0c:	2b16      	cmp	r3, #22
 8006d0e:	d11e      	bne.n	8006d4e <__sflush_r+0xea>
 8006d10:	602f      	str	r7, [r5, #0]
 8006d12:	2000      	movs	r0, #0
 8006d14:	e022      	b.n	8006d5c <__sflush_r+0xf8>
 8006d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	e01b      	b.n	8006d56 <__sflush_r+0xf2>
 8006d1e:	690f      	ldr	r7, [r1, #16]
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	d0f6      	beq.n	8006d12 <__sflush_r+0xae>
 8006d24:	0793      	lsls	r3, r2, #30
 8006d26:	680e      	ldr	r6, [r1, #0]
 8006d28:	bf08      	it	eq
 8006d2a:	694b      	ldreq	r3, [r1, #20]
 8006d2c:	600f      	str	r7, [r1, #0]
 8006d2e:	bf18      	it	ne
 8006d30:	2300      	movne	r3, #0
 8006d32:	eba6 0807 	sub.w	r8, r6, r7
 8006d36:	608b      	str	r3, [r1, #8]
 8006d38:	f1b8 0f00 	cmp.w	r8, #0
 8006d3c:	dde9      	ble.n	8006d12 <__sflush_r+0xae>
 8006d3e:	6a21      	ldr	r1, [r4, #32]
 8006d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d42:	4643      	mov	r3, r8
 8006d44:	463a      	mov	r2, r7
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b0      	blx	r6
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	dc08      	bgt.n	8006d60 <__sflush_r+0xfc>
 8006d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	4407      	add	r7, r0
 8006d62:	eba8 0800 	sub.w	r8, r8, r0
 8006d66:	e7e7      	b.n	8006d38 <__sflush_r+0xd4>
 8006d68:	dfbffffe 	.word	0xdfbffffe

08006d6c <_fflush_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	690b      	ldr	r3, [r1, #16]
 8006d70:	4605      	mov	r5, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b913      	cbnz	r3, 8006d7c <_fflush_r+0x10>
 8006d76:	2500      	movs	r5, #0
 8006d78:	4628      	mov	r0, r5
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	b118      	cbz	r0, 8006d86 <_fflush_r+0x1a>
 8006d7e:	6a03      	ldr	r3, [r0, #32]
 8006d80:	b90b      	cbnz	r3, 8006d86 <_fflush_r+0x1a>
 8006d82:	f000 f8bb 	bl	8006efc <__sinit>
 8006d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f3      	beq.n	8006d76 <_fflush_r+0xa>
 8006d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d90:	07d0      	lsls	r0, r2, #31
 8006d92:	d404      	bmi.n	8006d9e <_fflush_r+0x32>
 8006d94:	0599      	lsls	r1, r3, #22
 8006d96:	d402      	bmi.n	8006d9e <_fflush_r+0x32>
 8006d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d9a:	f7fa fbdb 	bl	8001554 <__retarget_lock_acquire_recursive>
 8006d9e:	4628      	mov	r0, r5
 8006da0:	4621      	mov	r1, r4
 8006da2:	f7ff ff5f 	bl	8006c64 <__sflush_r>
 8006da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006da8:	07da      	lsls	r2, r3, #31
 8006daa:	4605      	mov	r5, r0
 8006dac:	d4e4      	bmi.n	8006d78 <_fflush_r+0xc>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	059b      	lsls	r3, r3, #22
 8006db2:	d4e1      	bmi.n	8006d78 <_fflush_r+0xc>
 8006db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006db6:	f7fa fbe2 	bl	800157e <__retarget_lock_release_recursive>
 8006dba:	e7dd      	b.n	8006d78 <_fflush_r+0xc>

08006dbc <fflush>:
 8006dbc:	4601      	mov	r1, r0
 8006dbe:	b920      	cbnz	r0, 8006dca <fflush+0xe>
 8006dc0:	4a04      	ldr	r2, [pc, #16]	@ (8006dd4 <fflush+0x18>)
 8006dc2:	4905      	ldr	r1, [pc, #20]	@ (8006dd8 <fflush+0x1c>)
 8006dc4:	4805      	ldr	r0, [pc, #20]	@ (8006ddc <fflush+0x20>)
 8006dc6:	f000 b8b1 	b.w	8006f2c <_fwalk_sglue>
 8006dca:	4b05      	ldr	r3, [pc, #20]	@ (8006de0 <fflush+0x24>)
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	f7ff bfcd 	b.w	8006d6c <_fflush_r>
 8006dd2:	bf00      	nop
 8006dd4:	20000024 	.word	0x20000024
 8006dd8:	08006d6d 	.word	0x08006d6d
 8006ddc:	20000034 	.word	0x20000034
 8006de0:	20000030 	.word	0x20000030

08006de4 <std>:
 8006de4:	2300      	movs	r3, #0
 8006de6:	b510      	push	{r4, lr}
 8006de8:	4604      	mov	r4, r0
 8006dea:	e9c0 3300 	strd	r3, r3, [r0]
 8006dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006df2:	6083      	str	r3, [r0, #8]
 8006df4:	8181      	strh	r1, [r0, #12]
 8006df6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006df8:	81c2      	strh	r2, [r0, #14]
 8006dfa:	6183      	str	r3, [r0, #24]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	2208      	movs	r2, #8
 8006e00:	305c      	adds	r0, #92	@ 0x5c
 8006e02:	f000 f906 	bl	8007012 <memset>
 8006e06:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <std+0x58>)
 8006e08:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <std+0x5c>)
 8006e0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e44 <std+0x60>)
 8006e10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e12:	4b0d      	ldr	r3, [pc, #52]	@ (8006e48 <std+0x64>)
 8006e14:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e16:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <std+0x68>)
 8006e18:	6224      	str	r4, [r4, #32]
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	d006      	beq.n	8006e2c <std+0x48>
 8006e1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e22:	4294      	cmp	r4, r2
 8006e24:	d002      	beq.n	8006e2c <std+0x48>
 8006e26:	33d0      	adds	r3, #208	@ 0xd0
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d105      	bne.n	8006e38 <std+0x54>
 8006e2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e34:	f7fa bb67 	b.w	8001506 <__retarget_lock_init_recursive>
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08006f8d 	.word	0x08006f8d
 8006e40:	08006faf 	.word	0x08006faf
 8006e44:	08006fe7 	.word	0x08006fe7
 8006e48:	0800700b 	.word	0x0800700b
 8006e4c:	20004c4c 	.word	0x20004c4c

08006e50 <stdio_exit_handler>:
 8006e50:	4a02      	ldr	r2, [pc, #8]	@ (8006e5c <stdio_exit_handler+0xc>)
 8006e52:	4903      	ldr	r1, [pc, #12]	@ (8006e60 <stdio_exit_handler+0x10>)
 8006e54:	4803      	ldr	r0, [pc, #12]	@ (8006e64 <stdio_exit_handler+0x14>)
 8006e56:	f000 b869 	b.w	8006f2c <_fwalk_sglue>
 8006e5a:	bf00      	nop
 8006e5c:	20000024 	.word	0x20000024
 8006e60:	08006d6d 	.word	0x08006d6d
 8006e64:	20000034 	.word	0x20000034

08006e68 <cleanup_stdio>:
 8006e68:	6841      	ldr	r1, [r0, #4]
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <cleanup_stdio+0x34>)
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	4604      	mov	r4, r0
 8006e72:	d001      	beq.n	8006e78 <cleanup_stdio+0x10>
 8006e74:	f7ff ff7a 	bl	8006d6c <_fflush_r>
 8006e78:	68a1      	ldr	r1, [r4, #8]
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <cleanup_stdio+0x38>)
 8006e7c:	4299      	cmp	r1, r3
 8006e7e:	d002      	beq.n	8006e86 <cleanup_stdio+0x1e>
 8006e80:	4620      	mov	r0, r4
 8006e82:	f7ff ff73 	bl	8006d6c <_fflush_r>
 8006e86:	68e1      	ldr	r1, [r4, #12]
 8006e88:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <cleanup_stdio+0x3c>)
 8006e8a:	4299      	cmp	r1, r3
 8006e8c:	d004      	beq.n	8006e98 <cleanup_stdio+0x30>
 8006e8e:	4620      	mov	r0, r4
 8006e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e94:	f7ff bf6a 	b.w	8006d6c <_fflush_r>
 8006e98:	bd10      	pop	{r4, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20004c4c 	.word	0x20004c4c
 8006ea0:	20004cb4 	.word	0x20004cb4
 8006ea4:	20004d1c 	.word	0x20004d1c

08006ea8 <global_stdio_init.part.0>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed8 <global_stdio_init.part.0+0x30>)
 8006eac:	4c0b      	ldr	r4, [pc, #44]	@ (8006edc <global_stdio_init.part.0+0x34>)
 8006eae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee0 <global_stdio_init.part.0+0x38>)
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2104      	movs	r1, #4
 8006eb8:	f7ff ff94 	bl	8006de4 <std>
 8006ebc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	2109      	movs	r1, #9
 8006ec4:	f7ff ff8e 	bl	8006de4 <std>
 8006ec8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ecc:	2202      	movs	r2, #2
 8006ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed2:	2112      	movs	r1, #18
 8006ed4:	f7ff bf86 	b.w	8006de4 <std>
 8006ed8:	20004d84 	.word	0x20004d84
 8006edc:	20004c4c 	.word	0x20004c4c
 8006ee0:	08006e51 	.word	0x08006e51

08006ee4 <__sfp_lock_acquire>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	@ (8006eec <__sfp_lock_acquire+0x8>)
 8006ee6:	f7fa bb35 	b.w	8001554 <__retarget_lock_acquire_recursive>
 8006eea:	bf00      	nop
 8006eec:	20000240 	.word	0x20000240

08006ef0 <__sfp_lock_release>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	@ (8006ef8 <__sfp_lock_release+0x8>)
 8006ef2:	f7fa bb44 	b.w	800157e <__retarget_lock_release_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	20000240 	.word	0x20000240

08006efc <__sinit>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	4604      	mov	r4, r0
 8006f00:	f7ff fff0 	bl	8006ee4 <__sfp_lock_acquire>
 8006f04:	6a23      	ldr	r3, [r4, #32]
 8006f06:	b11b      	cbz	r3, 8006f10 <__sinit+0x14>
 8006f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f0c:	f7ff bff0 	b.w	8006ef0 <__sfp_lock_release>
 8006f10:	4b04      	ldr	r3, [pc, #16]	@ (8006f24 <__sinit+0x28>)
 8006f12:	6223      	str	r3, [r4, #32]
 8006f14:	4b04      	ldr	r3, [pc, #16]	@ (8006f28 <__sinit+0x2c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f5      	bne.n	8006f08 <__sinit+0xc>
 8006f1c:	f7ff ffc4 	bl	8006ea8 <global_stdio_init.part.0>
 8006f20:	e7f2      	b.n	8006f08 <__sinit+0xc>
 8006f22:	bf00      	nop
 8006f24:	08006e69 	.word	0x08006e69
 8006f28:	20004d84 	.word	0x20004d84

08006f2c <_fwalk_sglue>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	4607      	mov	r7, r0
 8006f32:	4688      	mov	r8, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	2600      	movs	r6, #0
 8006f38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f3c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f40:	d505      	bpl.n	8006f4e <_fwalk_sglue+0x22>
 8006f42:	6824      	ldr	r4, [r4, #0]
 8006f44:	2c00      	cmp	r4, #0
 8006f46:	d1f7      	bne.n	8006f38 <_fwalk_sglue+0xc>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d907      	bls.n	8006f64 <_fwalk_sglue+0x38>
 8006f54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	d003      	beq.n	8006f64 <_fwalk_sglue+0x38>
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c0      	blx	r8
 8006f62:	4306      	orrs	r6, r0
 8006f64:	3568      	adds	r5, #104	@ 0x68
 8006f66:	e7e9      	b.n	8006f3c <_fwalk_sglue+0x10>

08006f68 <iprintf>:
 8006f68:	b40f      	push	{r0, r1, r2, r3}
 8006f6a:	b507      	push	{r0, r1, r2, lr}
 8006f6c:	4906      	ldr	r1, [pc, #24]	@ (8006f88 <iprintf+0x20>)
 8006f6e:	ab04      	add	r3, sp, #16
 8006f70:	6808      	ldr	r0, [r1, #0]
 8006f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f76:	6881      	ldr	r1, [r0, #8]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	f000 f9d7 	bl	800732c <_vfiprintf_r>
 8006f7e:	b003      	add	sp, #12
 8006f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f84:	b004      	add	sp, #16
 8006f86:	4770      	bx	lr
 8006f88:	20000030 	.word	0x20000030

08006f8c <__sread>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	460c      	mov	r4, r1
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	f000 f8e2 	bl	800715c <_read_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	bfab      	itete	ge
 8006f9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006fa0:	181b      	addge	r3, r3, r0
 8006fa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fa6:	bfac      	ite	ge
 8006fa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006faa:	81a3      	strhlt	r3, [r4, #12]
 8006fac:	bd10      	pop	{r4, pc}

08006fae <__swrite>:
 8006fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	461f      	mov	r7, r3
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	05db      	lsls	r3, r3, #23
 8006fb8:	4605      	mov	r5, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	d505      	bpl.n	8006fcc <__swrite+0x1e>
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f000 f8b6 	bl	8007138 <_lseek_r>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	4632      	mov	r2, r6
 8006fda:	463b      	mov	r3, r7
 8006fdc:	4628      	mov	r0, r5
 8006fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	f000 b8dd 	b.w	80071a0 <_write_r>

08006fe6 <__sseek>:
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fee:	f000 f8a3 	bl	8007138 <_lseek_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	bf15      	itete	ne
 8006ff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007002:	81a3      	strheq	r3, [r4, #12]
 8007004:	bf18      	it	ne
 8007006:	81a3      	strhne	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__sclose>:
 800700a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700e:	f000 b82d 	b.w	800706c <_close_r>

08007012 <memset>:
 8007012:	4402      	add	r2, r0
 8007014:	4603      	mov	r3, r0
 8007016:	4293      	cmp	r3, r2
 8007018:	d100      	bne.n	800701c <memset+0xa>
 800701a:	4770      	bx	lr
 800701c:	f803 1b01 	strb.w	r1, [r3], #1
 8007020:	e7f9      	b.n	8007016 <memset+0x4>

08007022 <strncmp>:
 8007022:	b510      	push	{r4, lr}
 8007024:	b16a      	cbz	r2, 8007042 <strncmp+0x20>
 8007026:	3901      	subs	r1, #1
 8007028:	1884      	adds	r4, r0, r2
 800702a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800702e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007032:	429a      	cmp	r2, r3
 8007034:	d103      	bne.n	800703e <strncmp+0x1c>
 8007036:	42a0      	cmp	r0, r4
 8007038:	d001      	beq.n	800703e <strncmp+0x1c>
 800703a:	2a00      	cmp	r2, #0
 800703c:	d1f5      	bne.n	800702a <strncmp+0x8>
 800703e:	1ad0      	subs	r0, r2, r3
 8007040:	bd10      	pop	{r4, pc}
 8007042:	4610      	mov	r0, r2
 8007044:	e7fc      	b.n	8007040 <strncmp+0x1e>

08007046 <strncpy>:
 8007046:	b510      	push	{r4, lr}
 8007048:	3901      	subs	r1, #1
 800704a:	4603      	mov	r3, r0
 800704c:	b132      	cbz	r2, 800705c <strncpy+0x16>
 800704e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007052:	f803 4b01 	strb.w	r4, [r3], #1
 8007056:	3a01      	subs	r2, #1
 8007058:	2c00      	cmp	r4, #0
 800705a:	d1f7      	bne.n	800704c <strncpy+0x6>
 800705c:	441a      	add	r2, r3
 800705e:	2100      	movs	r1, #0
 8007060:	4293      	cmp	r3, r2
 8007062:	d100      	bne.n	8007066 <strncpy+0x20>
 8007064:	bd10      	pop	{r4, pc}
 8007066:	f803 1b01 	strb.w	r1, [r3], #1
 800706a:	e7f9      	b.n	8007060 <strncpy+0x1a>

0800706c <_close_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d06      	ldr	r5, [pc, #24]	@ (8007088 <_close_r+0x1c>)
 8007070:	2300      	movs	r3, #0
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	f7fa f8a5 	bl	80011c6 <_close>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_close_r+0x1a>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_close_r+0x1a>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20004d88 	.word	0x20004d88

0800708c <_reclaim_reent>:
 800708c:	4b29      	ldr	r3, [pc, #164]	@ (8007134 <_reclaim_reent+0xa8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4283      	cmp	r3, r0
 8007092:	b570      	push	{r4, r5, r6, lr}
 8007094:	4604      	mov	r4, r0
 8007096:	d04b      	beq.n	8007130 <_reclaim_reent+0xa4>
 8007098:	69c3      	ldr	r3, [r0, #28]
 800709a:	b1ab      	cbz	r3, 80070c8 <_reclaim_reent+0x3c>
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	b16b      	cbz	r3, 80070bc <_reclaim_reent+0x30>
 80070a0:	2500      	movs	r5, #0
 80070a2:	69e3      	ldr	r3, [r4, #28]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	5959      	ldr	r1, [r3, r5]
 80070a8:	2900      	cmp	r1, #0
 80070aa:	d13b      	bne.n	8007124 <_reclaim_reent+0x98>
 80070ac:	3504      	adds	r5, #4
 80070ae:	2d80      	cmp	r5, #128	@ 0x80
 80070b0:	d1f7      	bne.n	80070a2 <_reclaim_reent+0x16>
 80070b2:	69e3      	ldr	r3, [r4, #28]
 80070b4:	4620      	mov	r0, r4
 80070b6:	68d9      	ldr	r1, [r3, #12]
 80070b8:	f000 f8c4 	bl	8007244 <_free_r>
 80070bc:	69e3      	ldr	r3, [r4, #28]
 80070be:	6819      	ldr	r1, [r3, #0]
 80070c0:	b111      	cbz	r1, 80070c8 <_reclaim_reent+0x3c>
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 f8be 	bl	8007244 <_free_r>
 80070c8:	6961      	ldr	r1, [r4, #20]
 80070ca:	b111      	cbz	r1, 80070d2 <_reclaim_reent+0x46>
 80070cc:	4620      	mov	r0, r4
 80070ce:	f000 f8b9 	bl	8007244 <_free_r>
 80070d2:	69e1      	ldr	r1, [r4, #28]
 80070d4:	b111      	cbz	r1, 80070dc <_reclaim_reent+0x50>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f8b4 	bl	8007244 <_free_r>
 80070dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80070de:	b111      	cbz	r1, 80070e6 <_reclaim_reent+0x5a>
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 f8af 	bl	8007244 <_free_r>
 80070e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070e8:	b111      	cbz	r1, 80070f0 <_reclaim_reent+0x64>
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 f8aa 	bl	8007244 <_free_r>
 80070f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80070f2:	b111      	cbz	r1, 80070fa <_reclaim_reent+0x6e>
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 f8a5 	bl	8007244 <_free_r>
 80070fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80070fc:	b111      	cbz	r1, 8007104 <_reclaim_reent+0x78>
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 f8a0 	bl	8007244 <_free_r>
 8007104:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007106:	b111      	cbz	r1, 800710e <_reclaim_reent+0x82>
 8007108:	4620      	mov	r0, r4
 800710a:	f000 f89b 	bl	8007244 <_free_r>
 800710e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007110:	b111      	cbz	r1, 8007118 <_reclaim_reent+0x8c>
 8007112:	4620      	mov	r0, r4
 8007114:	f000 f896 	bl	8007244 <_free_r>
 8007118:	6a23      	ldr	r3, [r4, #32]
 800711a:	b14b      	cbz	r3, 8007130 <_reclaim_reent+0xa4>
 800711c:	4620      	mov	r0, r4
 800711e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007122:	4718      	bx	r3
 8007124:	680e      	ldr	r6, [r1, #0]
 8007126:	4620      	mov	r0, r4
 8007128:	f000 f88c 	bl	8007244 <_free_r>
 800712c:	4631      	mov	r1, r6
 800712e:	e7bb      	b.n	80070a8 <_reclaim_reent+0x1c>
 8007130:	bd70      	pop	{r4, r5, r6, pc}
 8007132:	bf00      	nop
 8007134:	20000030 	.word	0x20000030

08007138 <_lseek_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d07      	ldr	r5, [pc, #28]	@ (8007158 <_lseek_r+0x20>)
 800713c:	4604      	mov	r4, r0
 800713e:	4608      	mov	r0, r1
 8007140:	4611      	mov	r1, r2
 8007142:	2200      	movs	r2, #0
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fa f864 	bl	8001214 <_lseek>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_lseek_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_lseek_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20004d88 	.word	0x20004d88

0800715c <_read_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	@ (800717c <_read_r+0x20>)
 8007160:	4604      	mov	r4, r0
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa f80e 	bl	800118c <_read>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_read_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_read_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20004d88 	.word	0x20004d88

08007180 <_sbrk_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d06      	ldr	r5, [pc, #24]	@ (800719c <_sbrk_r+0x1c>)
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	602b      	str	r3, [r5, #0]
 800718c:	f7fa f850 	bl	8001230 <_sbrk>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_sbrk_r+0x1a>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_sbrk_r+0x1a>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20004d88 	.word	0x20004d88

080071a0 <_write_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d07      	ldr	r5, [pc, #28]	@ (80071c0 <_write_r+0x20>)
 80071a4:	4604      	mov	r4, r0
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f7f9 fb98 	bl	80008e4 <_write>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_write_r+0x1e>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_write_r+0x1e>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20004d88 	.word	0x20004d88

080071c4 <__errno>:
 80071c4:	4b01      	ldr	r3, [pc, #4]	@ (80071cc <__errno+0x8>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000030 	.word	0x20000030

080071d0 <__libc_init_array>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007208 <__libc_init_array+0x38>)
 80071d4:	4c0d      	ldr	r4, [pc, #52]	@ (800720c <__libc_init_array+0x3c>)
 80071d6:	1b64      	subs	r4, r4, r5
 80071d8:	10a4      	asrs	r4, r4, #2
 80071da:	2600      	movs	r6, #0
 80071dc:	42a6      	cmp	r6, r4
 80071de:	d109      	bne.n	80071f4 <__libc_init_array+0x24>
 80071e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007210 <__libc_init_array+0x40>)
 80071e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007214 <__libc_init_array+0x44>)
 80071e4:	f000 fc60 	bl	8007aa8 <_init>
 80071e8:	1b64      	subs	r4, r4, r5
 80071ea:	10a4      	asrs	r4, r4, #2
 80071ec:	2600      	movs	r6, #0
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	d105      	bne.n	80071fe <__libc_init_array+0x2e>
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f8:	4798      	blx	r3
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7ee      	b.n	80071dc <__libc_init_array+0xc>
 80071fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007202:	4798      	blx	r3
 8007204:	3601      	adds	r6, #1
 8007206:	e7f2      	b.n	80071ee <__libc_init_array+0x1e>
 8007208:	08007f98 	.word	0x08007f98
 800720c:	08007f98 	.word	0x08007f98
 8007210:	08007f98 	.word	0x08007f98
 8007214:	08007f9c 	.word	0x08007f9c

08007218 <strcpy>:
 8007218:	4603      	mov	r3, r0
 800721a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800721e:	f803 2b01 	strb.w	r2, [r3], #1
 8007222:	2a00      	cmp	r2, #0
 8007224:	d1f9      	bne.n	800721a <strcpy+0x2>
 8007226:	4770      	bx	lr

08007228 <memcpy>:
 8007228:	440a      	add	r2, r1
 800722a:	4291      	cmp	r1, r2
 800722c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007230:	d100      	bne.n	8007234 <memcpy+0xc>
 8007232:	4770      	bx	lr
 8007234:	b510      	push	{r4, lr}
 8007236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800723a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723e:	4291      	cmp	r1, r2
 8007240:	d1f9      	bne.n	8007236 <memcpy+0xe>
 8007242:	bd10      	pop	{r4, pc}

08007244 <_free_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4605      	mov	r5, r0
 8007248:	2900      	cmp	r1, #0
 800724a:	d041      	beq.n	80072d0 <_free_r+0x8c>
 800724c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007250:	1f0c      	subs	r4, r1, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfb8      	it	lt
 8007256:	18e4      	addlt	r4, r4, r3
 8007258:	f7ff fc32 	bl	8006ac0 <__malloc_lock>
 800725c:	4a1d      	ldr	r2, [pc, #116]	@ (80072d4 <_free_r+0x90>)
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	b933      	cbnz	r3, 8007270 <_free_r+0x2c>
 8007262:	6063      	str	r3, [r4, #4]
 8007264:	6014      	str	r4, [r2, #0]
 8007266:	4628      	mov	r0, r5
 8007268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726c:	f7ff bc2e 	b.w	8006acc <__malloc_unlock>
 8007270:	42a3      	cmp	r3, r4
 8007272:	d908      	bls.n	8007286 <_free_r+0x42>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	1821      	adds	r1, r4, r0
 8007278:	428b      	cmp	r3, r1
 800727a:	bf01      	itttt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	1809      	addeq	r1, r1, r0
 8007282:	6021      	streq	r1, [r4, #0]
 8007284:	e7ed      	b.n	8007262 <_free_r+0x1e>
 8007286:	461a      	mov	r2, r3
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	b10b      	cbz	r3, 8007290 <_free_r+0x4c>
 800728c:	42a3      	cmp	r3, r4
 800728e:	d9fa      	bls.n	8007286 <_free_r+0x42>
 8007290:	6811      	ldr	r1, [r2, #0]
 8007292:	1850      	adds	r0, r2, r1
 8007294:	42a0      	cmp	r0, r4
 8007296:	d10b      	bne.n	80072b0 <_free_r+0x6c>
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	4401      	add	r1, r0
 800729c:	1850      	adds	r0, r2, r1
 800729e:	4283      	cmp	r3, r0
 80072a0:	6011      	str	r1, [r2, #0]
 80072a2:	d1e0      	bne.n	8007266 <_free_r+0x22>
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	6053      	str	r3, [r2, #4]
 80072aa:	4408      	add	r0, r1
 80072ac:	6010      	str	r0, [r2, #0]
 80072ae:	e7da      	b.n	8007266 <_free_r+0x22>
 80072b0:	d902      	bls.n	80072b8 <_free_r+0x74>
 80072b2:	230c      	movs	r3, #12
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	e7d6      	b.n	8007266 <_free_r+0x22>
 80072b8:	6820      	ldr	r0, [r4, #0]
 80072ba:	1821      	adds	r1, r4, r0
 80072bc:	428b      	cmp	r3, r1
 80072be:	bf04      	itt	eq
 80072c0:	6819      	ldreq	r1, [r3, #0]
 80072c2:	685b      	ldreq	r3, [r3, #4]
 80072c4:	6063      	str	r3, [r4, #4]
 80072c6:	bf04      	itt	eq
 80072c8:	1809      	addeq	r1, r1, r0
 80072ca:	6021      	streq	r1, [r4, #0]
 80072cc:	6054      	str	r4, [r2, #4]
 80072ce:	e7ca      	b.n	8007266 <_free_r+0x22>
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
 80072d2:	bf00      	nop
 80072d4:	20004c48 	.word	0x20004c48

080072d8 <__sfputc_r>:
 80072d8:	6893      	ldr	r3, [r2, #8]
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	b410      	push	{r4}
 80072e0:	6093      	str	r3, [r2, #8]
 80072e2:	da08      	bge.n	80072f6 <__sfputc_r+0x1e>
 80072e4:	6994      	ldr	r4, [r2, #24]
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	db01      	blt.n	80072ee <__sfputc_r+0x16>
 80072ea:	290a      	cmp	r1, #10
 80072ec:	d103      	bne.n	80072f6 <__sfputc_r+0x1e>
 80072ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072f2:	f000 bac1 	b.w	8007878 <__swbuf_r>
 80072f6:	6813      	ldr	r3, [r2, #0]
 80072f8:	1c58      	adds	r0, r3, #1
 80072fa:	6010      	str	r0, [r2, #0]
 80072fc:	7019      	strb	r1, [r3, #0]
 80072fe:	4608      	mov	r0, r1
 8007300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007304:	4770      	bx	lr

08007306 <__sfputs_r>:
 8007306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007308:	4606      	mov	r6, r0
 800730a:	460f      	mov	r7, r1
 800730c:	4614      	mov	r4, r2
 800730e:	18d5      	adds	r5, r2, r3
 8007310:	42ac      	cmp	r4, r5
 8007312:	d101      	bne.n	8007318 <__sfputs_r+0x12>
 8007314:	2000      	movs	r0, #0
 8007316:	e007      	b.n	8007328 <__sfputs_r+0x22>
 8007318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731c:	463a      	mov	r2, r7
 800731e:	4630      	mov	r0, r6
 8007320:	f7ff ffda 	bl	80072d8 <__sfputc_r>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d1f3      	bne.n	8007310 <__sfputs_r+0xa>
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800732c <_vfiprintf_r>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	460d      	mov	r5, r1
 8007332:	b09d      	sub	sp, #116	@ 0x74
 8007334:	4614      	mov	r4, r2
 8007336:	4698      	mov	r8, r3
 8007338:	4606      	mov	r6, r0
 800733a:	b118      	cbz	r0, 8007344 <_vfiprintf_r+0x18>
 800733c:	6a03      	ldr	r3, [r0, #32]
 800733e:	b90b      	cbnz	r3, 8007344 <_vfiprintf_r+0x18>
 8007340:	f7ff fddc 	bl	8006efc <__sinit>
 8007344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007346:	07d9      	lsls	r1, r3, #31
 8007348:	d405      	bmi.n	8007356 <_vfiprintf_r+0x2a>
 800734a:	89ab      	ldrh	r3, [r5, #12]
 800734c:	059a      	lsls	r2, r3, #22
 800734e:	d402      	bmi.n	8007356 <_vfiprintf_r+0x2a>
 8007350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007352:	f7fa f8ff 	bl	8001554 <__retarget_lock_acquire_recursive>
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	071b      	lsls	r3, r3, #28
 800735a:	d501      	bpl.n	8007360 <_vfiprintf_r+0x34>
 800735c:	692b      	ldr	r3, [r5, #16]
 800735e:	b99b      	cbnz	r3, 8007388 <_vfiprintf_r+0x5c>
 8007360:	4629      	mov	r1, r5
 8007362:	4630      	mov	r0, r6
 8007364:	f000 fac6 	bl	80078f4 <__swsetup_r>
 8007368:	b170      	cbz	r0, 8007388 <_vfiprintf_r+0x5c>
 800736a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800736c:	07dc      	lsls	r4, r3, #31
 800736e:	d504      	bpl.n	800737a <_vfiprintf_r+0x4e>
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	b01d      	add	sp, #116	@ 0x74
 8007376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737a:	89ab      	ldrh	r3, [r5, #12]
 800737c:	0598      	lsls	r0, r3, #22
 800737e:	d4f7      	bmi.n	8007370 <_vfiprintf_r+0x44>
 8007380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007382:	f7fa f8fc 	bl	800157e <__retarget_lock_release_recursive>
 8007386:	e7f3      	b.n	8007370 <_vfiprintf_r+0x44>
 8007388:	2300      	movs	r3, #0
 800738a:	9309      	str	r3, [sp, #36]	@ 0x24
 800738c:	2320      	movs	r3, #32
 800738e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007392:	f8cd 800c 	str.w	r8, [sp, #12]
 8007396:	2330      	movs	r3, #48	@ 0x30
 8007398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007548 <_vfiprintf_r+0x21c>
 800739c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073a0:	f04f 0901 	mov.w	r9, #1
 80073a4:	4623      	mov	r3, r4
 80073a6:	469a      	mov	sl, r3
 80073a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ac:	b10a      	cbz	r2, 80073b2 <_vfiprintf_r+0x86>
 80073ae:	2a25      	cmp	r2, #37	@ 0x25
 80073b0:	d1f9      	bne.n	80073a6 <_vfiprintf_r+0x7a>
 80073b2:	ebba 0b04 	subs.w	fp, sl, r4
 80073b6:	d00b      	beq.n	80073d0 <_vfiprintf_r+0xa4>
 80073b8:	465b      	mov	r3, fp
 80073ba:	4622      	mov	r2, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ffa1 	bl	8007306 <__sfputs_r>
 80073c4:	3001      	adds	r0, #1
 80073c6:	f000 80a7 	beq.w	8007518 <_vfiprintf_r+0x1ec>
 80073ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073cc:	445a      	add	r2, fp
 80073ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80073d0:	f89a 3000 	ldrb.w	r3, [sl]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 809f 	beq.w	8007518 <_vfiprintf_r+0x1ec>
 80073da:	2300      	movs	r3, #0
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295
 80073e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e4:	f10a 0a01 	add.w	sl, sl, #1
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	9307      	str	r3, [sp, #28]
 80073ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80073f2:	4654      	mov	r4, sl
 80073f4:	2205      	movs	r2, #5
 80073f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fa:	4853      	ldr	r0, [pc, #332]	@ (8007548 <_vfiprintf_r+0x21c>)
 80073fc:	f7f8 fef8 	bl	80001f0 <memchr>
 8007400:	9a04      	ldr	r2, [sp, #16]
 8007402:	b9d8      	cbnz	r0, 800743c <_vfiprintf_r+0x110>
 8007404:	06d1      	lsls	r1, r2, #27
 8007406:	bf44      	itt	mi
 8007408:	2320      	movmi	r3, #32
 800740a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800740e:	0713      	lsls	r3, r2, #28
 8007410:	bf44      	itt	mi
 8007412:	232b      	movmi	r3, #43	@ 0x2b
 8007414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007418:	f89a 3000 	ldrb.w	r3, [sl]
 800741c:	2b2a      	cmp	r3, #42	@ 0x2a
 800741e:	d015      	beq.n	800744c <_vfiprintf_r+0x120>
 8007420:	9a07      	ldr	r2, [sp, #28]
 8007422:	4654      	mov	r4, sl
 8007424:	2000      	movs	r0, #0
 8007426:	f04f 0c0a 	mov.w	ip, #10
 800742a:	4621      	mov	r1, r4
 800742c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007430:	3b30      	subs	r3, #48	@ 0x30
 8007432:	2b09      	cmp	r3, #9
 8007434:	d94b      	bls.n	80074ce <_vfiprintf_r+0x1a2>
 8007436:	b1b0      	cbz	r0, 8007466 <_vfiprintf_r+0x13a>
 8007438:	9207      	str	r2, [sp, #28]
 800743a:	e014      	b.n	8007466 <_vfiprintf_r+0x13a>
 800743c:	eba0 0308 	sub.w	r3, r0, r8
 8007440:	fa09 f303 	lsl.w	r3, r9, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	46a2      	mov	sl, r4
 800744a:	e7d2      	b.n	80073f2 <_vfiprintf_r+0xc6>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	1d19      	adds	r1, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9103      	str	r1, [sp, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfbb      	ittet	lt
 8007458:	425b      	neglt	r3, r3
 800745a:	f042 0202 	orrlt.w	r2, r2, #2
 800745e:	9307      	strge	r3, [sp, #28]
 8007460:	9307      	strlt	r3, [sp, #28]
 8007462:	bfb8      	it	lt
 8007464:	9204      	strlt	r2, [sp, #16]
 8007466:	7823      	ldrb	r3, [r4, #0]
 8007468:	2b2e      	cmp	r3, #46	@ 0x2e
 800746a:	d10a      	bne.n	8007482 <_vfiprintf_r+0x156>
 800746c:	7863      	ldrb	r3, [r4, #1]
 800746e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007470:	d132      	bne.n	80074d8 <_vfiprintf_r+0x1ac>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	1d1a      	adds	r2, r3, #4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	9203      	str	r2, [sp, #12]
 800747a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800747e:	3402      	adds	r4, #2
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007558 <_vfiprintf_r+0x22c>
 8007486:	7821      	ldrb	r1, [r4, #0]
 8007488:	2203      	movs	r2, #3
 800748a:	4650      	mov	r0, sl
 800748c:	f7f8 feb0 	bl	80001f0 <memchr>
 8007490:	b138      	cbz	r0, 80074a2 <_vfiprintf_r+0x176>
 8007492:	9b04      	ldr	r3, [sp, #16]
 8007494:	eba0 000a 	sub.w	r0, r0, sl
 8007498:	2240      	movs	r2, #64	@ 0x40
 800749a:	4082      	lsls	r2, r0
 800749c:	4313      	orrs	r3, r2
 800749e:	3401      	adds	r4, #1
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a6:	4829      	ldr	r0, [pc, #164]	@ (800754c <_vfiprintf_r+0x220>)
 80074a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074ac:	2206      	movs	r2, #6
 80074ae:	f7f8 fe9f 	bl	80001f0 <memchr>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d03f      	beq.n	8007536 <_vfiprintf_r+0x20a>
 80074b6:	4b26      	ldr	r3, [pc, #152]	@ (8007550 <_vfiprintf_r+0x224>)
 80074b8:	bb1b      	cbnz	r3, 8007502 <_vfiprintf_r+0x1d6>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	3307      	adds	r3, #7
 80074be:	f023 0307 	bic.w	r3, r3, #7
 80074c2:	3308      	adds	r3, #8
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c8:	443b      	add	r3, r7
 80074ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80074cc:	e76a      	b.n	80073a4 <_vfiprintf_r+0x78>
 80074ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d2:	460c      	mov	r4, r1
 80074d4:	2001      	movs	r0, #1
 80074d6:	e7a8      	b.n	800742a <_vfiprintf_r+0xfe>
 80074d8:	2300      	movs	r3, #0
 80074da:	3401      	adds	r4, #1
 80074dc:	9305      	str	r3, [sp, #20]
 80074de:	4619      	mov	r1, r3
 80074e0:	f04f 0c0a 	mov.w	ip, #10
 80074e4:	4620      	mov	r0, r4
 80074e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ea:	3a30      	subs	r2, #48	@ 0x30
 80074ec:	2a09      	cmp	r2, #9
 80074ee:	d903      	bls.n	80074f8 <_vfiprintf_r+0x1cc>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0c6      	beq.n	8007482 <_vfiprintf_r+0x156>
 80074f4:	9105      	str	r1, [sp, #20]
 80074f6:	e7c4      	b.n	8007482 <_vfiprintf_r+0x156>
 80074f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074fc:	4604      	mov	r4, r0
 80074fe:	2301      	movs	r3, #1
 8007500:	e7f0      	b.n	80074e4 <_vfiprintf_r+0x1b8>
 8007502:	ab03      	add	r3, sp, #12
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	462a      	mov	r2, r5
 8007508:	4b12      	ldr	r3, [pc, #72]	@ (8007554 <_vfiprintf_r+0x228>)
 800750a:	a904      	add	r1, sp, #16
 800750c:	4630      	mov	r0, r6
 800750e:	f3af 8000 	nop.w
 8007512:	4607      	mov	r7, r0
 8007514:	1c78      	adds	r0, r7, #1
 8007516:	d1d6      	bne.n	80074c6 <_vfiprintf_r+0x19a>
 8007518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751a:	07d9      	lsls	r1, r3, #31
 800751c:	d405      	bmi.n	800752a <_vfiprintf_r+0x1fe>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d402      	bmi.n	800752a <_vfiprintf_r+0x1fe>
 8007524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007526:	f7fa f82a 	bl	800157e <__retarget_lock_release_recursive>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	065b      	lsls	r3, r3, #25
 800752e:	f53f af1f 	bmi.w	8007370 <_vfiprintf_r+0x44>
 8007532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007534:	e71e      	b.n	8007374 <_vfiprintf_r+0x48>
 8007536:	ab03      	add	r3, sp, #12
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	462a      	mov	r2, r5
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <_vfiprintf_r+0x228>)
 800753e:	a904      	add	r1, sp, #16
 8007540:	4630      	mov	r0, r6
 8007542:	f000 f879 	bl	8007638 <_printf_i>
 8007546:	e7e4      	b.n	8007512 <_vfiprintf_r+0x1e6>
 8007548:	08007f5a 	.word	0x08007f5a
 800754c:	08007f64 	.word	0x08007f64
 8007550:	00000000 	.word	0x00000000
 8007554:	08007307 	.word	0x08007307
 8007558:	08007f60 	.word	0x08007f60

0800755c <_printf_common>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	4616      	mov	r6, r2
 8007562:	4698      	mov	r8, r3
 8007564:	688a      	ldr	r2, [r1, #8]
 8007566:	690b      	ldr	r3, [r1, #16]
 8007568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800756c:	4293      	cmp	r3, r2
 800756e:	bfb8      	it	lt
 8007570:	4613      	movlt	r3, r2
 8007572:	6033      	str	r3, [r6, #0]
 8007574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007578:	4607      	mov	r7, r0
 800757a:	460c      	mov	r4, r1
 800757c:	b10a      	cbz	r2, 8007582 <_printf_common+0x26>
 800757e:	3301      	adds	r3, #1
 8007580:	6033      	str	r3, [r6, #0]
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	0699      	lsls	r1, r3, #26
 8007586:	bf42      	ittt	mi
 8007588:	6833      	ldrmi	r3, [r6, #0]
 800758a:	3302      	addmi	r3, #2
 800758c:	6033      	strmi	r3, [r6, #0]
 800758e:	6825      	ldr	r5, [r4, #0]
 8007590:	f015 0506 	ands.w	r5, r5, #6
 8007594:	d106      	bne.n	80075a4 <_printf_common+0x48>
 8007596:	f104 0a19 	add.w	sl, r4, #25
 800759a:	68e3      	ldr	r3, [r4, #12]
 800759c:	6832      	ldr	r2, [r6, #0]
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	42ab      	cmp	r3, r5
 80075a2:	dc26      	bgt.n	80075f2 <_printf_common+0x96>
 80075a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	3b00      	subs	r3, #0
 80075ac:	bf18      	it	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	0692      	lsls	r2, r2, #26
 80075b2:	d42b      	bmi.n	800760c <_printf_common+0xb0>
 80075b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075b8:	4641      	mov	r1, r8
 80075ba:	4638      	mov	r0, r7
 80075bc:	47c8      	blx	r9
 80075be:	3001      	adds	r0, #1
 80075c0:	d01e      	beq.n	8007600 <_printf_common+0xa4>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	6922      	ldr	r2, [r4, #16]
 80075c6:	f003 0306 	and.w	r3, r3, #6
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	bf02      	ittt	eq
 80075ce:	68e5      	ldreq	r5, [r4, #12]
 80075d0:	6833      	ldreq	r3, [r6, #0]
 80075d2:	1aed      	subeq	r5, r5, r3
 80075d4:	68a3      	ldr	r3, [r4, #8]
 80075d6:	bf0c      	ite	eq
 80075d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075dc:	2500      	movne	r5, #0
 80075de:	4293      	cmp	r3, r2
 80075e0:	bfc4      	itt	gt
 80075e2:	1a9b      	subgt	r3, r3, r2
 80075e4:	18ed      	addgt	r5, r5, r3
 80075e6:	2600      	movs	r6, #0
 80075e8:	341a      	adds	r4, #26
 80075ea:	42b5      	cmp	r5, r6
 80075ec:	d11a      	bne.n	8007624 <_printf_common+0xc8>
 80075ee:	2000      	movs	r0, #0
 80075f0:	e008      	b.n	8007604 <_printf_common+0xa8>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4652      	mov	r2, sl
 80075f6:	4641      	mov	r1, r8
 80075f8:	4638      	mov	r0, r7
 80075fa:	47c8      	blx	r9
 80075fc:	3001      	adds	r0, #1
 80075fe:	d103      	bne.n	8007608 <_printf_common+0xac>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	3501      	adds	r5, #1
 800760a:	e7c6      	b.n	800759a <_printf_common+0x3e>
 800760c:	18e1      	adds	r1, r4, r3
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	2030      	movs	r0, #48	@ 0x30
 8007612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007616:	4422      	add	r2, r4
 8007618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800761c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007620:	3302      	adds	r3, #2
 8007622:	e7c7      	b.n	80075b4 <_printf_common+0x58>
 8007624:	2301      	movs	r3, #1
 8007626:	4622      	mov	r2, r4
 8007628:	4641      	mov	r1, r8
 800762a:	4638      	mov	r0, r7
 800762c:	47c8      	blx	r9
 800762e:	3001      	adds	r0, #1
 8007630:	d0e6      	beq.n	8007600 <_printf_common+0xa4>
 8007632:	3601      	adds	r6, #1
 8007634:	e7d9      	b.n	80075ea <_printf_common+0x8e>
	...

08007638 <_printf_i>:
 8007638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	7e0f      	ldrb	r7, [r1, #24]
 800763e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007640:	2f78      	cmp	r7, #120	@ 0x78
 8007642:	4691      	mov	r9, r2
 8007644:	4680      	mov	r8, r0
 8007646:	460c      	mov	r4, r1
 8007648:	469a      	mov	sl, r3
 800764a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800764e:	d807      	bhi.n	8007660 <_printf_i+0x28>
 8007650:	2f62      	cmp	r7, #98	@ 0x62
 8007652:	d80a      	bhi.n	800766a <_printf_i+0x32>
 8007654:	2f00      	cmp	r7, #0
 8007656:	f000 80d2 	beq.w	80077fe <_printf_i+0x1c6>
 800765a:	2f58      	cmp	r7, #88	@ 0x58
 800765c:	f000 80b9 	beq.w	80077d2 <_printf_i+0x19a>
 8007660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007668:	e03a      	b.n	80076e0 <_printf_i+0xa8>
 800766a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800766e:	2b15      	cmp	r3, #21
 8007670:	d8f6      	bhi.n	8007660 <_printf_i+0x28>
 8007672:	a101      	add	r1, pc, #4	@ (adr r1, 8007678 <_printf_i+0x40>)
 8007674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007678:	080076d1 	.word	0x080076d1
 800767c:	080076e5 	.word	0x080076e5
 8007680:	08007661 	.word	0x08007661
 8007684:	08007661 	.word	0x08007661
 8007688:	08007661 	.word	0x08007661
 800768c:	08007661 	.word	0x08007661
 8007690:	080076e5 	.word	0x080076e5
 8007694:	08007661 	.word	0x08007661
 8007698:	08007661 	.word	0x08007661
 800769c:	08007661 	.word	0x08007661
 80076a0:	08007661 	.word	0x08007661
 80076a4:	080077e5 	.word	0x080077e5
 80076a8:	0800770f 	.word	0x0800770f
 80076ac:	0800779f 	.word	0x0800779f
 80076b0:	08007661 	.word	0x08007661
 80076b4:	08007661 	.word	0x08007661
 80076b8:	08007807 	.word	0x08007807
 80076bc:	08007661 	.word	0x08007661
 80076c0:	0800770f 	.word	0x0800770f
 80076c4:	08007661 	.word	0x08007661
 80076c8:	08007661 	.word	0x08007661
 80076cc:	080077a7 	.word	0x080077a7
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	1d1a      	adds	r2, r3, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6032      	str	r2, [r6, #0]
 80076d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076e0:	2301      	movs	r3, #1
 80076e2:	e09d      	b.n	8007820 <_printf_i+0x1e8>
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	1d19      	adds	r1, r3, #4
 80076ea:	6031      	str	r1, [r6, #0]
 80076ec:	0606      	lsls	r6, r0, #24
 80076ee:	d501      	bpl.n	80076f4 <_printf_i+0xbc>
 80076f0:	681d      	ldr	r5, [r3, #0]
 80076f2:	e003      	b.n	80076fc <_printf_i+0xc4>
 80076f4:	0645      	lsls	r5, r0, #25
 80076f6:	d5fb      	bpl.n	80076f0 <_printf_i+0xb8>
 80076f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	da03      	bge.n	8007708 <_printf_i+0xd0>
 8007700:	232d      	movs	r3, #45	@ 0x2d
 8007702:	426d      	negs	r5, r5
 8007704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007708:	4859      	ldr	r0, [pc, #356]	@ (8007870 <_printf_i+0x238>)
 800770a:	230a      	movs	r3, #10
 800770c:	e011      	b.n	8007732 <_printf_i+0xfa>
 800770e:	6821      	ldr	r1, [r4, #0]
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	0608      	lsls	r0, r1, #24
 8007714:	f853 5b04 	ldr.w	r5, [r3], #4
 8007718:	d402      	bmi.n	8007720 <_printf_i+0xe8>
 800771a:	0649      	lsls	r1, r1, #25
 800771c:	bf48      	it	mi
 800771e:	b2ad      	uxthmi	r5, r5
 8007720:	2f6f      	cmp	r7, #111	@ 0x6f
 8007722:	4853      	ldr	r0, [pc, #332]	@ (8007870 <_printf_i+0x238>)
 8007724:	6033      	str	r3, [r6, #0]
 8007726:	bf14      	ite	ne
 8007728:	230a      	movne	r3, #10
 800772a:	2308      	moveq	r3, #8
 800772c:	2100      	movs	r1, #0
 800772e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007732:	6866      	ldr	r6, [r4, #4]
 8007734:	60a6      	str	r6, [r4, #8]
 8007736:	2e00      	cmp	r6, #0
 8007738:	bfa2      	ittt	ge
 800773a:	6821      	ldrge	r1, [r4, #0]
 800773c:	f021 0104 	bicge.w	r1, r1, #4
 8007740:	6021      	strge	r1, [r4, #0]
 8007742:	b90d      	cbnz	r5, 8007748 <_printf_i+0x110>
 8007744:	2e00      	cmp	r6, #0
 8007746:	d04b      	beq.n	80077e0 <_printf_i+0x1a8>
 8007748:	4616      	mov	r6, r2
 800774a:	fbb5 f1f3 	udiv	r1, r5, r3
 800774e:	fb03 5711 	mls	r7, r3, r1, r5
 8007752:	5dc7      	ldrb	r7, [r0, r7]
 8007754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007758:	462f      	mov	r7, r5
 800775a:	42bb      	cmp	r3, r7
 800775c:	460d      	mov	r5, r1
 800775e:	d9f4      	bls.n	800774a <_printf_i+0x112>
 8007760:	2b08      	cmp	r3, #8
 8007762:	d10b      	bne.n	800777c <_printf_i+0x144>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	07df      	lsls	r7, r3, #31
 8007768:	d508      	bpl.n	800777c <_printf_i+0x144>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	6861      	ldr	r1, [r4, #4]
 800776e:	4299      	cmp	r1, r3
 8007770:	bfde      	ittt	le
 8007772:	2330      	movle	r3, #48	@ 0x30
 8007774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800777c:	1b92      	subs	r2, r2, r6
 800777e:	6122      	str	r2, [r4, #16]
 8007780:	f8cd a000 	str.w	sl, [sp]
 8007784:	464b      	mov	r3, r9
 8007786:	aa03      	add	r2, sp, #12
 8007788:	4621      	mov	r1, r4
 800778a:	4640      	mov	r0, r8
 800778c:	f7ff fee6 	bl	800755c <_printf_common>
 8007790:	3001      	adds	r0, #1
 8007792:	d14a      	bne.n	800782a <_printf_i+0x1f2>
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	b004      	add	sp, #16
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f043 0320 	orr.w	r3, r3, #32
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	4833      	ldr	r0, [pc, #204]	@ (8007874 <_printf_i+0x23c>)
 80077a8:	2778      	movs	r7, #120	@ 0x78
 80077aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	6831      	ldr	r1, [r6, #0]
 80077b2:	061f      	lsls	r7, r3, #24
 80077b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80077b8:	d402      	bmi.n	80077c0 <_printf_i+0x188>
 80077ba:	065f      	lsls	r7, r3, #25
 80077bc:	bf48      	it	mi
 80077be:	b2ad      	uxthmi	r5, r5
 80077c0:	6031      	str	r1, [r6, #0]
 80077c2:	07d9      	lsls	r1, r3, #31
 80077c4:	bf44      	itt	mi
 80077c6:	f043 0320 	orrmi.w	r3, r3, #32
 80077ca:	6023      	strmi	r3, [r4, #0]
 80077cc:	b11d      	cbz	r5, 80077d6 <_printf_i+0x19e>
 80077ce:	2310      	movs	r3, #16
 80077d0:	e7ac      	b.n	800772c <_printf_i+0xf4>
 80077d2:	4827      	ldr	r0, [pc, #156]	@ (8007870 <_printf_i+0x238>)
 80077d4:	e7e9      	b.n	80077aa <_printf_i+0x172>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	f023 0320 	bic.w	r3, r3, #32
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	e7f6      	b.n	80077ce <_printf_i+0x196>
 80077e0:	4616      	mov	r6, r2
 80077e2:	e7bd      	b.n	8007760 <_printf_i+0x128>
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	6825      	ldr	r5, [r4, #0]
 80077e8:	6961      	ldr	r1, [r4, #20]
 80077ea:	1d18      	adds	r0, r3, #4
 80077ec:	6030      	str	r0, [r6, #0]
 80077ee:	062e      	lsls	r6, r5, #24
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	d501      	bpl.n	80077f8 <_printf_i+0x1c0>
 80077f4:	6019      	str	r1, [r3, #0]
 80077f6:	e002      	b.n	80077fe <_printf_i+0x1c6>
 80077f8:	0668      	lsls	r0, r5, #25
 80077fa:	d5fb      	bpl.n	80077f4 <_printf_i+0x1bc>
 80077fc:	8019      	strh	r1, [r3, #0]
 80077fe:	2300      	movs	r3, #0
 8007800:	6123      	str	r3, [r4, #16]
 8007802:	4616      	mov	r6, r2
 8007804:	e7bc      	b.n	8007780 <_printf_i+0x148>
 8007806:	6833      	ldr	r3, [r6, #0]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	6032      	str	r2, [r6, #0]
 800780c:	681e      	ldr	r6, [r3, #0]
 800780e:	6862      	ldr	r2, [r4, #4]
 8007810:	2100      	movs	r1, #0
 8007812:	4630      	mov	r0, r6
 8007814:	f7f8 fcec 	bl	80001f0 <memchr>
 8007818:	b108      	cbz	r0, 800781e <_printf_i+0x1e6>
 800781a:	1b80      	subs	r0, r0, r6
 800781c:	6060      	str	r0, [r4, #4]
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	2300      	movs	r3, #0
 8007824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007828:	e7aa      	b.n	8007780 <_printf_i+0x148>
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	4632      	mov	r2, r6
 800782e:	4649      	mov	r1, r9
 8007830:	4640      	mov	r0, r8
 8007832:	47d0      	blx	sl
 8007834:	3001      	adds	r0, #1
 8007836:	d0ad      	beq.n	8007794 <_printf_i+0x15c>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	079b      	lsls	r3, r3, #30
 800783c:	d413      	bmi.n	8007866 <_printf_i+0x22e>
 800783e:	68e0      	ldr	r0, [r4, #12]
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	4298      	cmp	r0, r3
 8007844:	bfb8      	it	lt
 8007846:	4618      	movlt	r0, r3
 8007848:	e7a6      	b.n	8007798 <_printf_i+0x160>
 800784a:	2301      	movs	r3, #1
 800784c:	4632      	mov	r2, r6
 800784e:	4649      	mov	r1, r9
 8007850:	4640      	mov	r0, r8
 8007852:	47d0      	blx	sl
 8007854:	3001      	adds	r0, #1
 8007856:	d09d      	beq.n	8007794 <_printf_i+0x15c>
 8007858:	3501      	adds	r5, #1
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	9903      	ldr	r1, [sp, #12]
 800785e:	1a5b      	subs	r3, r3, r1
 8007860:	42ab      	cmp	r3, r5
 8007862:	dcf2      	bgt.n	800784a <_printf_i+0x212>
 8007864:	e7eb      	b.n	800783e <_printf_i+0x206>
 8007866:	2500      	movs	r5, #0
 8007868:	f104 0619 	add.w	r6, r4, #25
 800786c:	e7f5      	b.n	800785a <_printf_i+0x222>
 800786e:	bf00      	nop
 8007870:	08007f6b 	.word	0x08007f6b
 8007874:	08007f7c 	.word	0x08007f7c

08007878 <__swbuf_r>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	460e      	mov	r6, r1
 800787c:	4614      	mov	r4, r2
 800787e:	4605      	mov	r5, r0
 8007880:	b118      	cbz	r0, 800788a <__swbuf_r+0x12>
 8007882:	6a03      	ldr	r3, [r0, #32]
 8007884:	b90b      	cbnz	r3, 800788a <__swbuf_r+0x12>
 8007886:	f7ff fb39 	bl	8006efc <__sinit>
 800788a:	69a3      	ldr	r3, [r4, #24]
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	071a      	lsls	r2, r3, #28
 8007892:	d501      	bpl.n	8007898 <__swbuf_r+0x20>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	b943      	cbnz	r3, 80078aa <__swbuf_r+0x32>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f82a 	bl	80078f4 <__swsetup_r>
 80078a0:	b118      	cbz	r0, 80078aa <__swbuf_r+0x32>
 80078a2:	f04f 37ff 	mov.w	r7, #4294967295
 80078a6:	4638      	mov	r0, r7
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	6922      	ldr	r2, [r4, #16]
 80078ae:	1a98      	subs	r0, r3, r2
 80078b0:	6963      	ldr	r3, [r4, #20]
 80078b2:	b2f6      	uxtb	r6, r6
 80078b4:	4283      	cmp	r3, r0
 80078b6:	4637      	mov	r7, r6
 80078b8:	dc05      	bgt.n	80078c6 <__swbuf_r+0x4e>
 80078ba:	4621      	mov	r1, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	f7ff fa55 	bl	8006d6c <_fflush_r>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d1ed      	bne.n	80078a2 <__swbuf_r+0x2a>
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	60a3      	str	r3, [r4, #8]
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6022      	str	r2, [r4, #0]
 80078d2:	701e      	strb	r6, [r3, #0]
 80078d4:	6962      	ldr	r2, [r4, #20]
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	429a      	cmp	r2, r3
 80078da:	d004      	beq.n	80078e6 <__swbuf_r+0x6e>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	07db      	lsls	r3, r3, #31
 80078e0:	d5e1      	bpl.n	80078a6 <__swbuf_r+0x2e>
 80078e2:	2e0a      	cmp	r6, #10
 80078e4:	d1df      	bne.n	80078a6 <__swbuf_r+0x2e>
 80078e6:	4621      	mov	r1, r4
 80078e8:	4628      	mov	r0, r5
 80078ea:	f7ff fa3f 	bl	8006d6c <_fflush_r>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d0d9      	beq.n	80078a6 <__swbuf_r+0x2e>
 80078f2:	e7d6      	b.n	80078a2 <__swbuf_r+0x2a>

080078f4 <__swsetup_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4b29      	ldr	r3, [pc, #164]	@ (800799c <__swsetup_r+0xa8>)
 80078f8:	4605      	mov	r5, r0
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	460c      	mov	r4, r1
 80078fe:	b118      	cbz	r0, 8007908 <__swsetup_r+0x14>
 8007900:	6a03      	ldr	r3, [r0, #32]
 8007902:	b90b      	cbnz	r3, 8007908 <__swsetup_r+0x14>
 8007904:	f7ff fafa 	bl	8006efc <__sinit>
 8007908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790c:	0719      	lsls	r1, r3, #28
 800790e:	d422      	bmi.n	8007956 <__swsetup_r+0x62>
 8007910:	06da      	lsls	r2, r3, #27
 8007912:	d407      	bmi.n	8007924 <__swsetup_r+0x30>
 8007914:	2209      	movs	r2, #9
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	f04f 30ff 	mov.w	r0, #4294967295
 8007922:	e033      	b.n	800798c <__swsetup_r+0x98>
 8007924:	0758      	lsls	r0, r3, #29
 8007926:	d512      	bpl.n	800794e <__swsetup_r+0x5a>
 8007928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800792a:	b141      	cbz	r1, 800793e <__swsetup_r+0x4a>
 800792c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007930:	4299      	cmp	r1, r3
 8007932:	d002      	beq.n	800793a <__swsetup_r+0x46>
 8007934:	4628      	mov	r0, r5
 8007936:	f7ff fc85 	bl	8007244 <_free_r>
 800793a:	2300      	movs	r3, #0
 800793c:	6363      	str	r3, [r4, #52]	@ 0x34
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	2300      	movs	r3, #0
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0308 	orr.w	r3, r3, #8
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	b94b      	cbnz	r3, 800796e <__swsetup_r+0x7a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007964:	d003      	beq.n	800796e <__swsetup_r+0x7a>
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f000 f83f 	bl	80079ec <__smakebuf_r>
 800796e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007972:	f013 0201 	ands.w	r2, r3, #1
 8007976:	d00a      	beq.n	800798e <__swsetup_r+0x9a>
 8007978:	2200      	movs	r2, #0
 800797a:	60a2      	str	r2, [r4, #8]
 800797c:	6962      	ldr	r2, [r4, #20]
 800797e:	4252      	negs	r2, r2
 8007980:	61a2      	str	r2, [r4, #24]
 8007982:	6922      	ldr	r2, [r4, #16]
 8007984:	b942      	cbnz	r2, 8007998 <__swsetup_r+0xa4>
 8007986:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800798a:	d1c5      	bne.n	8007918 <__swsetup_r+0x24>
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	0799      	lsls	r1, r3, #30
 8007990:	bf58      	it	pl
 8007992:	6962      	ldrpl	r2, [r4, #20]
 8007994:	60a2      	str	r2, [r4, #8]
 8007996:	e7f4      	b.n	8007982 <__swsetup_r+0x8e>
 8007998:	2000      	movs	r0, #0
 800799a:	e7f7      	b.n	800798c <__swsetup_r+0x98>
 800799c:	20000030 	.word	0x20000030

080079a0 <__swhatbuf_r>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	460c      	mov	r4, r1
 80079a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a8:	2900      	cmp	r1, #0
 80079aa:	b096      	sub	sp, #88	@ 0x58
 80079ac:	4615      	mov	r5, r2
 80079ae:	461e      	mov	r6, r3
 80079b0:	da0d      	bge.n	80079ce <__swhatbuf_r+0x2e>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079b8:	f04f 0100 	mov.w	r1, #0
 80079bc:	bf14      	ite	ne
 80079be:	2340      	movne	r3, #64	@ 0x40
 80079c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079c4:	2000      	movs	r0, #0
 80079c6:	6031      	str	r1, [r6, #0]
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	b016      	add	sp, #88	@ 0x58
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
 80079ce:	466a      	mov	r2, sp
 80079d0:	f000 f848 	bl	8007a64 <_fstat_r>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	dbec      	blt.n	80079b2 <__swhatbuf_r+0x12>
 80079d8:	9901      	ldr	r1, [sp, #4]
 80079da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079e2:	4259      	negs	r1, r3
 80079e4:	4159      	adcs	r1, r3
 80079e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ea:	e7eb      	b.n	80079c4 <__swhatbuf_r+0x24>

080079ec <__smakebuf_r>:
 80079ec:	898b      	ldrh	r3, [r1, #12]
 80079ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f0:	079d      	lsls	r5, r3, #30
 80079f2:	4606      	mov	r6, r0
 80079f4:	460c      	mov	r4, r1
 80079f6:	d507      	bpl.n	8007a08 <__smakebuf_r+0x1c>
 80079f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	2301      	movs	r3, #1
 8007a02:	6163      	str	r3, [r4, #20]
 8007a04:	b003      	add	sp, #12
 8007a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a08:	ab01      	add	r3, sp, #4
 8007a0a:	466a      	mov	r2, sp
 8007a0c:	f7ff ffc8 	bl	80079a0 <__swhatbuf_r>
 8007a10:	9f00      	ldr	r7, [sp, #0]
 8007a12:	4605      	mov	r5, r0
 8007a14:	4639      	mov	r1, r7
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7fe ffd2 	bl	80069c0 <_malloc_r>
 8007a1c:	b948      	cbnz	r0, 8007a32 <__smakebuf_r+0x46>
 8007a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a22:	059a      	lsls	r2, r3, #22
 8007a24:	d4ee      	bmi.n	8007a04 <__smakebuf_r+0x18>
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	f043 0302 	orr.w	r3, r3, #2
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	e7e2      	b.n	80079f8 <__smakebuf_r+0xc>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	6020      	str	r0, [r4, #0]
 8007a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	9b01      	ldr	r3, [sp, #4]
 8007a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a42:	b15b      	cbz	r3, 8007a5c <__smakebuf_r+0x70>
 8007a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f000 f81d 	bl	8007a88 <_isatty_r>
 8007a4e:	b128      	cbz	r0, 8007a5c <__smakebuf_r+0x70>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	431d      	orrs	r5, r3
 8007a60:	81a5      	strh	r5, [r4, #12]
 8007a62:	e7cf      	b.n	8007a04 <__smakebuf_r+0x18>

08007a64 <_fstat_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d07      	ldr	r5, [pc, #28]	@ (8007a84 <_fstat_r+0x20>)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	4611      	mov	r1, r2
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	f7f9 fbb4 	bl	80011de <_fstat>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	d102      	bne.n	8007a80 <_fstat_r+0x1c>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	b103      	cbz	r3, 8007a80 <_fstat_r+0x1c>
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	bd38      	pop	{r3, r4, r5, pc}
 8007a82:	bf00      	nop
 8007a84:	20004d88 	.word	0x20004d88

08007a88 <_isatty_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d06      	ldr	r5, [pc, #24]	@ (8007aa4 <_isatty_r+0x1c>)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	602b      	str	r3, [r5, #0]
 8007a94:	f7f9 fbb3 	bl	80011fe <_isatty>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_isatty_r+0x1a>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_isatty_r+0x1a>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	20004d88 	.word	0x20004d88

08007aa8 <_init>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_fini>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr
